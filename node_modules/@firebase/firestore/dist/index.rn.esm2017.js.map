{"version":3,"file":"index.rn.esm2017.js","sources":["../src/platform/rn/base64.ts","../src/util/error.ts","../src/util/log.ts","../src/platform/browser/format_json.ts","../src/util/assert.ts","../src/platform/browser/random_bytes.ts","../src/util/misc.ts","../src/util/byte_string.ts","../lite/src/api/bytes.ts","../src/api/blob.ts","../src/core/database_info.ts","../src/util/obj.ts","../src/util/obj_map.ts","../src/api/timestamp.ts","../src/core/snapshot_version.ts","../src/model/path.ts","../src/model/document_key.ts","../src/util/types.ts","../src/core/target.ts","../src/core/query.ts","../src/local/target_data.ts","../src/remote/existence_filter.ts","../src/remote/rpc_error.ts","../src/util/sorted_map.ts","../src/util/sorted_set.ts","../src/model/collections.ts","../src/model/document_set.ts","../src/core/view_snapshot.ts","../src/remote/remote_event.ts","../src/remote/watch_change.ts","../src/model/server_timestamps.ts","../src/model/values.ts","../src/remote/serializer.ts","../src/model/transform_operation.ts","../src/model/mutation.ts","../src/model/object_value.ts","../src/model/document.ts","../src/util/promise.ts","../src/remote/backoff.ts","../src/local/persistence_promise.ts","../src/local/simple_db.ts","../src/platform/browser/dom.ts","../src/util/async_queue.ts","../src/core/event_manager.ts","../src/auth/user.ts","../src/api/credentials.ts","../src/model/mutation_batch.ts","../src/local/remote_document_change_buffer.ts","../src/local/persistence.ts","../src/local/local_documents_view.ts","../src/local/local_view_changes.ts","../src/core/listen_sequence.ts","../src/local/lru_garbage_collector.ts","../src/local/encoded_resource_path.ts","../src/local/local_serializer.ts","../src/local/indexeddb_mutation_queue.ts","../src/local/indexeddb_remote_document_cache.ts","../src/local/memory_index_manager.ts","../src/local/indexeddb_schema.ts","../src/local/indexeddb_index_manager.ts","../src/core/target_id_generator.ts","../src/local/indexeddb_target_cache.ts","../src/local/indexeddb_persistence.ts","../src/local/local_store.ts","../src/remote/persistent_stream.ts","../src/remote/datastore.ts","../src/remote/online_state_tracker.ts","../src/remote/remote_store.ts","../src/local/reference_set.ts","../src/local/shared_client_state_schema.ts","../src/local/shared_client_state.ts","../src/core/view.ts","../src/core/sync_engine.ts","../src/local/index_free_query_engine.ts","../src/local/memory_mutation_queue.ts","../src/local/memory_remote_document_cache.ts","../src/local/memory_target_cache.ts","../src/local/memory_persistence.ts","../src/remote/stream_bridge.ts","../src/remote/rest_connection.ts","../src/platform/browser/webchannel_connection.ts","../src/platform/browser/connectivity_monitor.ts","../src/remote/connectivity_monitor_noop.ts","../src/platform/browser/serializer.ts","../src/core/component_provider.ts","../src/platform/browser/connection.ts","../src/util/async_observer.ts","../src/util/input_validation.ts","../src/api/field_path.ts","../lite/src/api/field_value.ts","../src/api/field_value.ts","../src/api/geo_point.ts","../src/compat/compat.ts","../src/api/user_data_reader.ts","../src/core/transaction.ts","../src/core/transaction_runner.ts","../src/core/firestore_client.ts","../src/api/observer.ts","../src/api/user_data_writer.ts","../lite/src/api/database.ts","../exp/src/api/database.ts","../src/api/database.ts","../lite/src/api/components.ts","../src/compat/field_value.ts","../src/config.ts","../index.rn.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64 } from '@firebase/util';\n\n// WebSafe uses a different URL-encoding safe alphabet that doesn't match\n// the encoding used on the backend.\nconst WEB_SAFE = false;\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return String.fromCharCode.apply(\n    null,\n    // We use `decodeStringToByteArray()` instead of `decodeString()` since\n    // `decodeString()` returns Unicode strings, which doesn't match the values\n    // returned by `atob()`'s Latin1 representation.\n    base64.decodeStringToByteArray(encoded, WEB_SAFE)\n  );\n}\n\n/** Converts a binary string to a Base64 encoded string. */\nexport function encodeBase64(raw: string): string {\n  const bytes: number[] = [];\n  for (let i = 0; i < raw.length; i++) {\n    bytes[i] = raw.charCodeAt(i);\n  }\n  return base64.encodeByteArray(bytes, WEB_SAFE);\n}\n\n/** True if and only if the Base64 conversion functions are available. */\nexport function isBase64Available(): boolean {\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The set of Firestore status codes. The codes are the same at the ones\n * exposed by gRPC here:\n * https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\n *\n * Possible values:\n * - 'cancelled': The operation was cancelled (typically by the caller).\n * - 'unknown': Unknown error or an error from a different error domain.\n * - 'invalid-argument': Client specified an invalid argument. Note that this\n *   differs from 'failed-precondition'. 'invalid-argument' indicates\n *   arguments that are problematic regardless of the state of the system\n *   (e.g. an invalid field name).\n * - 'deadline-exceeded': Deadline expired before operation could complete.\n *   For operations that change the state of the system, this error may be\n *   returned even if the operation has completed successfully. For example,\n *   a successful response from a server could have been delayed long enough\n *   for the deadline to expire.\n * - 'not-found': Some requested document was not found.\n * - 'already-exists': Some document that we attempted to create already\n *   exists.\n * - 'permission-denied': The caller does not have permission to execute the\n *   specified operation.\n * - 'resource-exhausted': Some resource has been exhausted, perhaps a\n *   per-user quota, or perhaps the entire file system is out of space.\n * - 'failed-precondition': Operation was rejected because the system is not\n *   in a state required for the operation's execution.\n * - 'aborted': The operation was aborted, typically due to a concurrency\n *   issue like transaction aborts, etc.\n * - 'out-of-range': Operation was attempted past the valid range.\n * - 'unimplemented': Operation is not implemented or not supported/enabled.\n * - 'internal': Internal errors. Means some invariants expected by\n *   underlying system has been broken. If you see one of these errors,\n *   something is very broken.\n * - 'unavailable': The service is currently unavailable. This is most likely\n *   a transient condition and may be corrected by retrying with a backoff.\n * - 'data-loss': Unrecoverable data loss or corruption.\n * - 'unauthenticated': The request does not have valid authentication\n *   credentials for the operation.\n */\nexport type FirestoreErrorCode =\n  | 'cancelled'\n  | 'unknown'\n  | 'invalid-argument'\n  | 'deadline-exceeded'\n  | 'not-found'\n  | 'already-exists'\n  | 'permission-denied'\n  | 'resource-exhausted'\n  | 'failed-precondition'\n  | 'aborted'\n  | 'out-of-range'\n  | 'unimplemented'\n  | 'internal'\n  | 'unavailable'\n  | 'data-loss'\n  | 'unauthenticated';\n\n/**\n * Error Codes describing the different ways Firestore can fail. These come\n * directly from GRPC.\n */\nexport type Code = FirestoreErrorCode;\n\nexport const Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n  /** Not an error; returned on success. */\n  OK: 'ok' as FirestoreErrorCode,\n\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled' as FirestoreErrorCode,\n\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown' as FirestoreErrorCode,\n\n  /**\n   * Client specified an invalid argument. Note that this differs from\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n   * problematic regardless of the state of the system (e.g., a malformed file\n   * name).\n   */\n  INVALID_ARGUMENT: 'invalid-argument' as FirestoreErrorCode,\n\n  /**\n   * Deadline expired before operation could complete. For operations that\n   * change the state of the system, this error may be returned even if the\n   * operation has completed successfully. For example, a successful response\n   * from a server could have been delayed long enough for the deadline to\n   * expire.\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded' as FirestoreErrorCode,\n\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found' as FirestoreErrorCode,\n\n  /**\n   * Some entity that we attempted to create (e.g., file or directory) already\n   * exists.\n   */\n  ALREADY_EXISTS: 'already-exists' as FirestoreErrorCode,\n\n  /**\n   * The caller does not have permission to execute the specified operation.\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n   * PERMISSION_DENIED must not be used if the caller can not be identified\n   * (use UNAUTHENTICATED instead for those errors).\n   */\n  PERMISSION_DENIED: 'permission-denied' as FirestoreErrorCode,\n\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED: 'unauthenticated' as FirestoreErrorCode,\n\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n   * entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted' as FirestoreErrorCode,\n\n  /**\n   * Operation was rejected because the system is not in a state required for\n   * the operation's execution. For example, directory to be deleted may be\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n   *  (b) Use ABORTED if the client should retry at a higher-level\n   *      (e.g., restarting a read-modify-write sequence).\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\n   *      should be returned since the client should not retry unless\n   *      they have first fixed up the directory by deleting files from it.\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\n   *      REST Get/Update/Delete on a resource and the resource on the\n   *      server does not match the condition. E.g., conflicting\n   *      read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION: 'failed-precondition' as FirestoreErrorCode,\n\n  /**\n   * The operation was aborted, typically due to a concurrency issue like\n   * sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  ABORTED: 'aborted' as FirestoreErrorCode,\n\n  /**\n   * Operation was attempted past the valid range. E.g., seeking or reading\n   * past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n   * if the system state changes. For example, a 32-bit file system will\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n   * an offset past the current file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n   * when it applies so that callers who are iterating through a space can\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\n   */\n  OUT_OF_RANGE: 'out-of-range' as FirestoreErrorCode,\n\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented' as FirestoreErrorCode,\n\n  /**\n   * Internal errors. Means some invariants expected by underlying System has\n   * been broken. If you see one of these errors, Something is very broken.\n   */\n  INTERNAL: 'internal' as FirestoreErrorCode,\n\n  /**\n   * The service is currently unavailable. This is a most likely a transient\n   * condition and may be corrected by retrying with a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  UNAVAILABLE: 'unavailable' as FirestoreErrorCode,\n\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss' as FirestoreErrorCode\n};\n\n/** An error returned by a Firestore operation. */\nexport class FirestoreError extends Error {\n  name = 'FirebaseError';\n  stack?: string;\n\n  constructor(readonly code: FirestoreErrorCode, readonly message: string) {\n    super(message);\n\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel, LogLevelString } from '@firebase/logger';\nimport { SDK_VERSION } from '../core/version';\nimport { formatJSON } from '../platform/format_json';\n\nexport { LogLevel, LogLevelString };\n\nconst logClient = new Logger('@firebase/firestore');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel\n *   The verbosity you set for activity and error logging. Can be any of\n *   the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */\nexport function setLogLevel(logLevel: LogLevelString | LogLevel): void {\n  logClient.setLogLevel(logLevel);\n}\n\nexport function logDebug(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logError(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logWarn(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    const args = obj.map(argToString);\n    logClient.warn(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Formats an object as a JSON string, suitable for logging. */\nexport function formatJSON(value: unknown): string {\n  return JSON.stringify(value);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '../core/version';\nimport { logError } from './log';\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure: string = 'Unexpected state'): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message =\n    `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message);\n\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nexport function hardAssert(\n  assertion: boolean,\n  message?: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * The code of callsites invoking this function are stripped out in production\n * builds. Any side-effects of code within the debugAssert() invocation will not\n * happen in this case.\n */\nexport function debugAssert(\n  assertion: boolean,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\nexport function debugCast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  debugAssert(\n    obj instanceof constructor,\n    `Expected type '${constructor.name}', but was '${obj.constructor.name}'`\n  );\n  return obj as T;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../../util/assert';\n\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nexport function randomBytes(nBytes: number): Uint8Array {\n  debugAssert(nBytes >= 0, `Expecting non-negative nBytes, got: ${nBytes}`);\n\n  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n  const crypto =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof self !== 'undefined' && (self.crypto || (self as any)['msCrypto']);\n  const bytes = new Uint8Array(nBytes);\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    crypto.getRandomValues(bytes);\n  } else {\n    // Falls back to Math.random\n    for (let i = 0; i < nBytes; i++) {\n      bytes[i] = Math.floor(Math.random() * 256);\n    }\n  }\n  return bytes;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\nimport { randomBytes } from '../platform/random_bytes';\n\nexport type EventHandler<E> = (value: E) => void;\nexport interface Indexable {\n  [k: string]: unknown;\n}\n\nexport class AutoId {\n  static newId(): string {\n    // Alphanumeric characters\n    const chars =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    // The largest byte value that is a multiple of `char.length`.\n    const maxMultiple = Math.floor(256 / chars.length) * chars.length;\n    debugAssert(\n      0 < maxMultiple && maxMultiple < 256,\n      `Expect maxMultiple to be (0, 256), but got ${maxMultiple}`\n    );\n\n    let autoId = '';\n    const targetLength = 20;\n    while (autoId.length < targetLength) {\n      const bytes = randomBytes(40);\n      for (let i = 0; i < bytes.length; ++i) {\n        // Only accept values that are [0, maxMultiple), this ensures they can\n        // be evenly mapped to indices of `chars` via a modulo operation.\n        if (autoId.length < targetLength && bytes[i] < maxMultiple) {\n          autoId += chars.charAt(bytes[i] % chars.length);\n        }\n      }\n    }\n    debugAssert(autoId.length === targetLength, 'Invalid auto ID: ' + autoId);\n\n    return autoId;\n  }\n}\n\nexport function primitiveComparator<T>(left: T, right: T): number {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\n\nexport interface Equatable<T> {\n  isEqual(other: T): boolean;\n}\n\n/** Helper to compare arrays using isEqual(). */\nexport function arrayEquals<T>(\n  left: T[],\n  right: T[],\n  comparator: (l: T, r: T) => boolean\n): boolean {\n  if (left.length !== right.length) {\n    return false;\n  }\n  return left.every((value, index) => comparator(value, right[index]));\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s: string): string {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { decodeBase64, encodeBase64 } from '../platform/base64';\nimport { primitiveComparator } from './misc';\n\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n */\nexport class ByteString {\n  static readonly EMPTY_BYTE_STRING = new ByteString('');\n\n  private constructor(private readonly binaryString: string) {}\n\n  static fromBase64String(base64: string): ByteString {\n    const binaryString = decodeBase64(base64);\n    return new ByteString(binaryString);\n  }\n\n  static fromUint8Array(array: Uint8Array): ByteString {\n    const binaryString = binaryStringFromUint8Array(array);\n    return new ByteString(binaryString);\n  }\n\n  toBase64(): string {\n    return encodeBase64(this.binaryString);\n  }\n\n  toUint8Array(): Uint8Array {\n    return uint8ArrayFromBinaryString(this.binaryString);\n  }\n\n  approximateByteSize(): number {\n    return this.binaryString.length * 2;\n  }\n\n  compareTo(other: ByteString): number {\n    return primitiveComparator(this.binaryString, other.binaryString);\n  }\n\n  isEqual(other: ByteString): boolean {\n    return this.binaryString === other.binaryString;\n  }\n}\n\n/**\n * Helper function to convert an Uint8array to a binary string.\n */\nexport function binaryStringFromUint8Array(array: Uint8Array): string {\n  let binaryString = '';\n  for (let i = 0; i < array.length; ++i) {\n    binaryString += String.fromCharCode(array[i]);\n  }\n  return binaryString;\n}\n\n/**\n * Helper function to convert a binary string to an Uint8Array.\n */\nexport function uint8ArrayFromBinaryString(binaryString: string): Uint8Array {\n  const buffer = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    buffer[i] = binaryString.charCodeAt(i);\n  }\n  return buffer;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../../../src/util/error';\nimport { ByteString } from '../../../src/util/byte_string';\n\n/**\n * An immutable object representing an array of bytes.\n */\nexport class Bytes {\n  _byteString: ByteString;\n\n  constructor(byteString: ByteString) {\n    this._byteString = byteString;\n  }\n\n  /**\n   * Creates a new `Bytes` object from the given Base64 string, converting it to\n   * bytes.\n   *\n   * @param base64 The Base64 string used to create the `Bytes` object.\n   */\n  static fromBase64String(base64: string): Bytes {\n    try {\n      return new Bytes(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct Bytes from Base64 string: ' + e\n      );\n    }\n  }\n\n  /**\n   * Creates a new `Bytes` object from the given Uint8Array.\n   *\n   * @param array The Uint8Array used to create the `Bytes` object.\n   */\n  static fromUint8Array(array: Uint8Array): Bytes {\n    return new Bytes(ByteString.fromUint8Array(array));\n  }\n\n  /**\n   * Returns the underlying bytes as a Base64-encoded string.\n   *\n   * @return The Base64-encoded string created from the `Bytes` object.\n   */\n  toBase64(): string {\n    return this._byteString.toBase64();\n  }\n\n  /**\n   * Returns the underlying bytes in a new `Uint8Array`.\n   *\n   * @return The Uint8Array created from the `Bytes` object.\n   */\n  toUint8Array(): Uint8Array {\n    return this._byteString.toUint8Array();\n  }\n\n  /**\n   * Returns a string representation of the `Bytes` object.\n   *\n   * @return A string representation of the `Bytes` object.\n   */\n  toString(): string {\n    return 'Bytes(base64: ' + this.toBase64() + ')';\n  }\n\n  /**\n   * Returns true if this `Bytes` object is equal to the provided one.\n   *\n   * @param other The `Bytes` object to compare against.\n   * @return true if this `Bytes` object is equal to the provided one.\n   */\n  isEqual(other: Bytes): boolean {\n    return this._byteString.isEqual(other._byteString);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isBase64Available } from '../platform/base64';\nimport { Code, FirestoreError } from '../util/error';\nimport { ByteString } from '../util/byte_string';\nimport { Bytes } from '../../lite/src/api/bytes';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable(): void {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available(): void {\n  if (!isBase64Available()) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/**\n * Immutable class holding a blob (binary data).\n *\n * This class is directly exposed in the public API. It extends the Bytes class\n * of the firestore-exp API to support `instanceof Bytes` checks during user\n * data conversion.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nexport class Blob extends Bytes {\n  static fromBase64String(base64: string): Blob {\n    assertBase64Available();\n    try {\n      return new Blob(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct Blob from Base64 string: ' + e\n      );\n    }\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    assertUint8ArrayAvailable();\n    return new Blob(ByteString.fromUint8Array(array));\n  }\n\n  toBase64(): string {\n    assertBase64Available();\n    return super.toBase64();\n  }\n\n  toUint8Array(): Uint8Array {\n    assertUint8ArrayAvailable();\n    return super.toUint8Array();\n  }\n\n  toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { primitiveComparator } from '../util/misc';\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId The database to use.\n   * @param persistenceKey A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host The Firestore backend host to connect to.\n   * @param ssl Whether to use SSL when connecting.\n   * @param forceLongPolling Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   * @param autoDetectLongPolling Whether to use the detectBufferingProxy\n   * option when using WebChannel as the network transport.\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean,\n    readonly forceLongPolling: boolean,\n    readonly autoDetectLongPolling: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n\n/** Represents the database ID a Firestore client is associated with. */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  isEqual(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n\n  compareTo(other: DatabaseId): number {\n    return (\n      primitiveComparator(this.projectId, other.projectId) ||\n      primitiveComparator(this.database, other.database)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\nexport interface Dict<V> {\n  [stringKey: string]: V;\n}\n\nexport function objectSize(obj: object): number {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport function forEach<V>(\n  obj: Dict<V>,\n  fn: (key: string, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\nexport function isEmpty<V>(obj: Dict<V>): boolean {\n  debugAssert(\n    obj != null && typeof obj === 'object',\n    'isEmpty() expects object parameter.'\n  );\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { forEach, isEmpty } from './obj';\n\ntype Entry<K, V> = [K, V];\n\n/**\n * A map implementation that uses objects as keys. Objects must have an\n * associated equals function and must be immutable. Entries in the map are\n * stored together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nexport class ObjectMap<KeyType, ValueType> {\n  /**\n   * The inner map for a key -> value pair. Due to the possibility of\n   * collisions we keep a list of entries that we do a linear search through\n   * to find an actual match. Note that collisions should be rare, so we still\n   * expect near constant time lookups in practice.\n   */\n  private inner: {\n    [canonicalId: string]: Array<Entry<KeyType, ValueType>>;\n  } = {};\n\n  constructor(\n    private mapKeyFn: (key: KeyType) => string,\n    private equalsFn: (l: KeyType, r: KeyType) => boolean\n  ) {}\n\n  /** Get a value for this key, or undefined if it does not exist. */\n  get(key: KeyType): ValueType | undefined {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return undefined;\n    }\n    for (const [otherKey, value] of matches) {\n      if (this.equalsFn(otherKey, key)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n\n  has(key: KeyType): boolean {\n    return this.get(key) !== undefined;\n  }\n\n  /** Put this key and value in the map. */\n  set(key: KeyType, value: ValueType): void {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      this.inner[id] = [[key, value]];\n      return;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        matches[i] = [key, value];\n        return;\n      }\n    }\n    matches.push([key, value]);\n  }\n\n  /**\n   * Remove this key from the map. Returns a boolean if anything was deleted.\n   */\n  delete(key: KeyType): boolean {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return false;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        if (matches.length === 1) {\n          delete this.inner[id];\n        } else {\n          matches.splice(i, 1);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  forEach(fn: (key: KeyType, val: ValueType) => void): void {\n    forEach(this.inner, (_, entries) => {\n      for (const [k, v] of entries) {\n        fn(k, v);\n      }\n    });\n  }\n\n  isEmpty(): boolean {\n    return isEmpty(this.inner);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport { primitiveComparator } from '../util/misc';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto\n */\nexport class Timestamp {\n  /**\n   * Creates a new timestamp with the current date, with millisecond precision.\n   *\n   * @return a new timestamp representing the current date.\n   */\n  static now(): Timestamp {\n    return Timestamp.fromMillis(Date.now());\n  }\n\n  /**\n   * Creates a new timestamp from the given date.\n   *\n   * @param date The date to initialize the `Timestamp` from.\n   * @return A new `Timestamp` representing the same point in time as the given\n   *     date.\n   */\n  static fromDate(date: Date): Timestamp {\n    return Timestamp.fromMillis(date.getTime());\n  }\n\n  /**\n   * Creates a new timestamp from the given number of milliseconds.\n   *\n   * @param milliseconds Number of milliseconds since Unix epoch\n   *     1970-01-01T00:00:00Z.\n   * @return A new `Timestamp` representing the same point in time as the given\n   *     number of milliseconds.\n   */\n  static fromMillis(milliseconds: number): Timestamp {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanos);\n  }\n\n  /**\n   * Creates a new timestamp.\n   *\n   * @param seconds The number of seconds of UTC time since Unix epoch\n   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   *     9999-12-31T23:59:59Z inclusive.\n   * @param nanoseconds The non-negative fractions of a second at nanosecond\n   *     resolution. Negative second values with fractions must still have\n   *     non-negative nanoseconds values that count forward in time. Must be\n   *     from 0 to 999,999,999 inclusive.\n   */\n  constructor(readonly seconds: number, readonly nanoseconds: number) {\n    if (nanoseconds < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (nanoseconds >= 1e9) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (seconds < MIN_SECONDS) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n  }\n\n  /**\n   * Converts a `Timestamp` to a JavaScript `Date` object. This conversion causes\n   * a loss of precision since `Date` objects only support millisecond precision.\n   *\n   * @return JavaScript `Date` object representing the same point in time as\n   *     this `Timestamp`, with millisecond precision.\n   */\n  toDate(): Date {\n    return new Date(this.toMillis());\n  }\n\n  /**\n   * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n   * epoch). This operation causes a loss of precision.\n   *\n   * @return The point in time corresponding to this timestamp, represented as\n   *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n   */\n  toMillis(): number {\n    return this.seconds * 1000 + this.nanoseconds / 1e6;\n  }\n\n  _compareTo(other: Timestamp): number {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanoseconds, other.nanoseconds);\n    }\n    return primitiveComparator(this.seconds, other.seconds);\n  }\n\n  /**\n   * Returns true if this `Timestamp` is equal to the provided one.\n   *\n   * @param other The `Timestamp` to compare against.\n   * @return true if this `Timestamp` is equal to the provided one.\n   */\n  isEqual(other: Timestamp): boolean {\n    return (\n      other.seconds === this.seconds && other.nanoseconds === this.nanoseconds\n    );\n  }\n\n  toString(): string {\n    return (\n      'Timestamp(seconds=' +\n      this.seconds +\n      ', nanoseconds=' +\n      this.nanoseconds +\n      ')'\n    );\n  }\n\n  toJSON(): { seconds: number; nanoseconds: number } {\n    return { seconds: this.seconds, nanoseconds: this.nanoseconds };\n  }\n\n  /**\n   * Converts this object to a primitive string, which allows Timestamp objects to be compared\n   * using the `>`, `<=`, `>=` and `>` operators.\n   */\n  valueOf(): string {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nexport class SnapshotVersion {\n  static fromTimestamp(value: Timestamp): SnapshotVersion {\n    return new SnapshotVersion(value);\n  }\n\n  static min(): SnapshotVersion {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  }\n\n  private constructor(private timestamp: Timestamp) {}\n\n  compareTo(other: SnapshotVersion): number {\n    return this.timestamp._compareTo(other.timestamp);\n  }\n\n  isEqual(other: SnapshotVersion): boolean {\n    return this.timestamp.isEqual(other.timestamp);\n  }\n\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds(): number {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\n  }\n\n  toString(): string {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n\n  toTimestamp(): Timestamp {\n    return this.timestamp;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\n\nexport const DOCUMENT_KEY_NAME = '__name__';\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nabstract class BasePath<B extends BasePath<B>> {\n  private segments: string[];\n  private offset: number;\n  private len: number;\n\n  constructor(segments: string[], offset?: number, length?: number) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail('offset ' + offset + ' out of range ' + segments.length);\n    }\n\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail('length ' + length + ' out of range ' + (segments.length - offset));\n    }\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n\n  /**\n   * Abstract constructor method to construct an instance of B with the given\n   * parameters.\n   */\n  protected abstract construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): B;\n\n  /**\n   * Returns a String representation.\n   *\n   * Implementing classes are required to provide deterministic implementations as\n   * the String representation is used to obtain canonical Query IDs.\n   */\n  abstract toString(): string;\n\n  get length(): number {\n    return this.len;\n  }\n\n  isEqual(other: B): boolean {\n    return BasePath.comparator(this, other) === 0;\n  }\n\n  child(nameOrPath: string | B): B {\n    const segments = this.segments.slice(this.offset, this.limit());\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n    return this.construct(segments);\n  }\n\n  /** The index of one past the last segment of the path. */\n  private limit(): number {\n    return this.offset + this.length;\n  }\n\n  popFirst(size?: number): B {\n    size = size === undefined ? 1 : size;\n    debugAssert(\n      this.length >= size,\n      \"Can't call popFirst() with less segments\"\n    );\n    return this.construct(\n      this.segments,\n      this.offset + size,\n      this.length - size\n    );\n  }\n\n  popLast(): B {\n    debugAssert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n\n  firstSegment(): string {\n    debugAssert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n    return this.segments[this.offset];\n  }\n\n  lastSegment(): string {\n    return this.get(this.length - 1);\n  }\n\n  get(index: number): string {\n    debugAssert(index < this.length, 'Index out of range');\n    return this.segments[this.offset + index];\n  }\n\n  isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  isPrefixOf(other: this): boolean {\n    if (other.length < this.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isImmediateParentOf(potentialChild: this): boolean {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  forEach(fn: (segment: string) => void): void {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n\n  toArray(): string[] {\n    return this.segments.slice(this.offset, this.limit());\n  }\n\n  static comparator<T extends BasePath<T>>(\n    p1: BasePath<T>,\n    p2: BasePath<T>\n  ): number {\n    const len = Math.min(p1.length, p2.length);\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n      if (left < right) {\n        return -1;\n      }\n      if (left > right) {\n        return 1;\n      }\n    }\n    if (p1.length < p2.length) {\n      return -1;\n    }\n    if (p1.length > p2.length) {\n      return 1;\n    }\n    return 0;\n  }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nexport class ResourcePath extends BasePath<ResourcePath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): ResourcePath {\n    return new ResourcePath(segments, offset, length);\n  }\n\n  canonicalString(): string {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    return this.toArray().join('/');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Creates a resource path from the given slash-delimited string. If multiple\n   * arguments are provided, all components are combined. Leading and trailing\n   * slashes from all components are ignored.\n   */\n  static fromString(...pathComponents: string[]): ResourcePath {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    const segments: string[] = [];\n    for (const path of pathComponents) {\n      if (path.indexOf('//') >= 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid segment (${path}). Paths must not contain // in them.`\n        );\n      }\n      // Strip leading and traling slashed.\n      segments.push(...path.split('/').filter(segment => segment.length > 0));\n    }\n\n    return new ResourcePath(segments);\n  }\n\n  static emptyPath(): ResourcePath {\n    return new ResourcePath([]);\n  }\n}\n\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/** A dot-separated path for navigating sub-objects within a document. */\nexport class FieldPath extends BasePath<FieldPath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): FieldPath {\n    return new FieldPath(segments, offset, length);\n  }\n\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  private static isValidIdentifier(segment: string): boolean {\n    return identifierRegExp.test(segment);\n  }\n\n  canonicalString(): string {\n    return this.toArray()\n      .map(str => {\n        str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n        if (!FieldPath.isValidIdentifier(str)) {\n          str = '`' + str + '`';\n        }\n        return str;\n      })\n      .join('.');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField(): boolean {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField(): FieldPath {\n    return new FieldPath([DOCUMENT_KEY_NAME]);\n  }\n\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(path: string): FieldPath {\n    const segments: string[] = [];\n    let current = '';\n    let i = 0;\n\n    const addCurrentSegment = (): void => {\n      if (current.length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field path (${path}). Paths must not be empty, begin ` +\n            `with '.', end with '.', or contain '..'`\n        );\n      }\n      segments.push(current);\n      current = '';\n    };\n\n    let inBackticks = false;\n\n    while (i < path.length) {\n      const c = path[i];\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has trailing escape character: ' + path\n          );\n        }\n        const next = path[i + 1];\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has invalid escape sequence: ' + path\n          );\n        }\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n    addCurrentSegment();\n\n    if (inBackticks) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Unterminated ` in path: ' + path\n      );\n    }\n\n    return new FieldPath(segments);\n  }\n\n  static emptyPath(): FieldPath {\n    return new FieldPath([]);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    debugAssert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  static fromPath(path: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(path));\n  }\n\n  static fromName(name: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(collectionId: string): boolean {\n    return (\n      this.path.length >= 2 &&\n      this.path.get(this.path.length - 2) === collectionId\n    );\n  }\n\n  isEqual(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments The segments of the path to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An Object whose keys and values are strings.\nexport interface StringMap {\n  [key: string]: string;\n}\n\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value: unknown): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/** Returns whether the value represents -0. */\nexport function isNegativeZero(value: number): boolean {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return value === 0 && 1 / value === 1 / -0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value: unknown): boolean {\n  return (\n    typeof value === 'number' &&\n    Number.isInteger(value) &&\n    !isNegativeZero(value) &&\n    value <= Number.MAX_SAFE_INTEGER &&\n    value >= Number.MIN_SAFE_INTEGER\n  );\n}\n\n/** The subset of the browser's Window interface used by the SDK. */\nexport interface WindowLike {\n  readonly localStorage: Storage;\n  readonly indexedDB: IDBFactory | null;\n  addEventListener(type: string, listener: EventListener): void;\n  removeEventListener(type: string, listener: EventListener): void;\n}\n\n/** The subset of the browser's Document interface used by the SDK. */\nexport interface DocumentLike {\n  readonly visibilityState: VisibilityState;\n  addEventListener(type: string, listener: EventListener): void;\n  removeEventListener(type: string, listener: EventListener): void;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\nimport { isNullOrUndefined } from '../util/types';\nimport {\n  Bound,\n  boundEquals,\n  canonifyBound,\n  canonifyFilter,\n  filterEquals,\n  stringifyFilter,\n  OrderBy,\n  orderByEquals,\n  stringifyOrderBy,\n  canonifyOrderBy,\n  Filter\n} from './query';\nimport { debugCast } from '../util/assert';\n\n/**\n * A Target represents the WatchTarget representation of a Query, which is used\n * by the LocalStore and the RemoteStore to keep track of and to execute\n * backend queries. While a Query can represent multiple Targets, each Targets\n * maps to a single WatchTarget in RemoteStore and a single TargetData entry\n * in persistence.\n */\nexport interface Target {\n  readonly path: ResourcePath;\n  readonly collectionGroup: string | null;\n  readonly orderBy: OrderBy[];\n  readonly filters: Filter[];\n  readonly limit: number | null;\n  readonly startAt: Bound | null;\n  readonly endAt: Bound | null;\n}\n\n// Visible for testing\nexport class TargetImpl implements Target {\n  memoizedCanonicalId: string | null = null;\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly orderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {}\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */\nexport function newTarget(\n  path: ResourcePath,\n  collectionGroup: string | null = null,\n  orderBy: OrderBy[] = [],\n  filters: Filter[] = [],\n  limit: number | null = null,\n  startAt: Bound | null = null,\n  endAt: Bound | null = null\n): Target {\n  return new TargetImpl(\n    path,\n    collectionGroup,\n    orderBy,\n    filters,\n    limit,\n    startAt,\n    endAt\n  );\n}\n\nexport function canonifyTarget(target: Target): string {\n  const targetImpl = debugCast(target, TargetImpl);\n\n  if (targetImpl.memoizedCanonicalId === null) {\n    let canonicalId = targetImpl.path.canonicalString();\n    if (targetImpl.collectionGroup !== null) {\n      canonicalId += '|cg:' + targetImpl.collectionGroup;\n    }\n    canonicalId += '|f:';\n    canonicalId += targetImpl.filters.map(f => canonifyFilter(f)).join(',');\n    canonicalId += '|ob:';\n    canonicalId += targetImpl.orderBy.map(o => canonifyOrderBy(o)).join(',');\n\n    if (!isNullOrUndefined(targetImpl.limit)) {\n      canonicalId += '|l:';\n      canonicalId += targetImpl.limit!;\n    }\n    if (targetImpl.startAt) {\n      canonicalId += '|lb:';\n      canonicalId += canonifyBound(targetImpl.startAt);\n    }\n    if (targetImpl.endAt) {\n      canonicalId += '|ub:';\n      canonicalId += canonifyBound(targetImpl.endAt);\n    }\n    targetImpl.memoizedCanonicalId = canonicalId;\n  }\n  return targetImpl.memoizedCanonicalId;\n}\n\nexport function stringifyTarget(target: Target): string {\n  let str = target.path.canonicalString();\n  if (target.collectionGroup !== null) {\n    str += ' collectionGroup=' + target.collectionGroup;\n  }\n  if (target.filters.length > 0) {\n    str += `, filters: [${target.filters\n      .map(f => stringifyFilter(f))\n      .join(', ')}]`;\n  }\n  if (!isNullOrUndefined(target.limit)) {\n    str += ', limit: ' + target.limit;\n  }\n  if (target.orderBy.length > 0) {\n    str += `, orderBy: [${target.orderBy\n      .map(o => stringifyOrderBy(o))\n      .join(', ')}]`;\n  }\n  if (target.startAt) {\n    str += ', startAt: ' + canonifyBound(target.startAt);\n  }\n  if (target.endAt) {\n    str += ', endAt: ' + canonifyBound(target.endAt);\n  }\n  return `Target(${str})`;\n}\n\nexport function targetEquals(left: Target, right: Target): boolean {\n  if (left.limit !== right.limit) {\n    return false;\n  }\n\n  if (left.orderBy.length !== right.orderBy.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.orderBy.length; i++) {\n    if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {\n      return false;\n    }\n  }\n\n  if (left.filters.length !== right.filters.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.filters.length; i++) {\n    if (!filterEquals(left.filters[i], right.filters[i])) {\n      return false;\n    }\n  }\n\n  if (left.collectionGroup !== right.collectionGroup) {\n    return false;\n  }\n\n  if (!left.path.isEqual(right.path)) {\n    return false;\n  }\n\n  if (!boundEquals(left.startAt, right.startAt)) {\n    return false;\n  }\n\n  return boundEquals(left.endAt, right.endAt);\n}\n\nexport function isDocumentTarget(target: Target): boolean {\n  return (\n    DocumentKey.isDocumentKey(target.path) &&\n    target.collectionGroup === null &&\n    target.filters.length === 0\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ProtoValue } from '../protos/firestore_proto_api';\n\nimport { compareDocumentsByField, Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  arrayValueContains,\n  canonicalId,\n  isArray,\n  isReferenceValue,\n  typeOrder,\n  valueCompare,\n  valueEquals\n} from '../model/values';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { debugAssert, debugCast, fail } from '../util/assert';\nimport { isNullOrUndefined } from '../util/types';\nimport {\n  canonifyTarget,\n  newTarget,\n  stringifyTarget,\n  Target,\n  targetEquals\n} from './target';\n\nexport const enum LimitType {\n  First = 'F',\n  Last = 'L'\n}\n\n/**\n * The Query interface defines all external properties of a query.\n *\n * QueryImpl implements this interface to provide memoization for `queryOrderBy`\n * and `queryToTarget`.\n */\nexport interface Query {\n  readonly path: ResourcePath;\n  readonly collectionGroup: string | null;\n  readonly explicitOrderBy: OrderBy[];\n  readonly filters: Filter[];\n  readonly limit: number | null;\n  readonly limitType: LimitType;\n  readonly startAt: Bound | null;\n  readonly endAt: Bound | null;\n}\n\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nexport class QueryImpl implements Query {\n  memoizedOrderBy: OrderBy[] | null = null;\n\n  // The corresponding `Target` of this `Query` instance.\n  memoizedTarget: Target | null = null;\n\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly explicitOrderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly limitType: LimitType = LimitType.First,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {\n    if (this.startAt) {\n      debugAssert(\n        this.startAt.position.length <= queryOrderBy(this).length,\n        'Bound is longer than orderBy'\n      );\n    }\n    if (this.endAt) {\n      debugAssert(\n        this.endAt.position.length <= queryOrderBy(this).length,\n        'Bound is longer than orderBy'\n      );\n    }\n  }\n}\n\n/** Creates a new Query instance with the options provided. */\nexport function newQuery(\n  path: ResourcePath,\n  collectionGroup: string | null,\n  explicitOrderBy: OrderBy[],\n  filters: Filter[],\n  limit: number | null,\n  limitType: LimitType,\n  startAt: Bound | null,\n  endAt: Bound | null\n): Query {\n  return new QueryImpl(\n    path,\n    collectionGroup,\n    explicitOrderBy,\n    filters,\n    limit,\n    limitType,\n    startAt,\n    endAt\n  );\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */\nexport function newQueryForPath(path: ResourcePath): Query {\n  return new QueryImpl(path);\n}\n\n/**\n * Helper to convert a collection group query into a collection query at a\n * specific path. This is used when executing collection group queries, since\n * we have to split the query into a set of collection queries at multiple\n * paths.\n */\nexport function asCollectionQueryAtPath(\n  query: Query,\n  path: ResourcePath\n): Query {\n  return new QueryImpl(\n    path,\n    /*collectionGroup=*/ null,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\n/**\n * Returns true if this query does not specify any query constraints that\n * could remove results.\n */\nexport function matchesAllDocuments(query: Query): boolean {\n  return (\n    query.filters.length === 0 &&\n    query.limit === null &&\n    query.startAt == null &&\n    query.endAt == null &&\n    (query.explicitOrderBy.length === 0 ||\n      (query.explicitOrderBy.length === 1 &&\n        query.explicitOrderBy[0].field.isKeyField()))\n  );\n}\n\nexport function hasLimitToFirst(query: Query): boolean {\n  return !isNullOrUndefined(query.limit) && query.limitType === LimitType.First;\n}\n\nexport function hasLimitToLast(query: Query): boolean {\n  return !isNullOrUndefined(query.limit) && query.limitType === LimitType.Last;\n}\n\nexport function getFirstOrderByField(query: Query): FieldPath | null {\n  return query.explicitOrderBy.length > 0\n    ? query.explicitOrderBy[0].field\n    : null;\n}\n\nexport function getInequalityFilterField(query: Query): FieldPath | null {\n  for (const filter of query.filters) {\n    debugAssert(\n      filter instanceof FieldFilter,\n      'Only FieldFilters are supported'\n    );\n    if (filter.isInequality()) {\n      return filter.field;\n    }\n  }\n  return null;\n}\n\n/**\n * Checks if any of the provided Operators are included in the query and\n * returns the first one that is, or null if none are.\n */\nexport function findFilterOperator(\n  query: Query,\n  operators: Operator[]\n): Operator | null {\n  for (const filter of query.filters) {\n    debugAssert(\n      filter instanceof FieldFilter,\n      'Only FieldFilters are supported'\n    );\n    if (operators.indexOf(filter.op) >= 0) {\n      return filter.op;\n    }\n  }\n  return null;\n}\n\n/**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\nexport function newQueryForCollectionGroup(collectionId: string): Query {\n  return new QueryImpl(ResourcePath.emptyPath(), collectionId);\n}\n\n/**\n * Returns whether the query matches a single document by path (rather than a\n * collection).\n */\nexport function isDocumentQuery(query: Query): boolean {\n  return (\n    DocumentKey.isDocumentKey(query.path) &&\n    query.collectionGroup === null &&\n    query.filters.length === 0\n  );\n}\n\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nexport function isCollectionGroupQuery(query: Query): boolean {\n  return query.collectionGroup !== null;\n}\n\n/**\n * Returns the implicit order by constraint that is used to execute the Query,\n * which can be different from the order by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`).\n */\nexport function queryOrderBy(query: Query): OrderBy[] {\n  const queryImpl = debugCast(query, QueryImpl);\n  if (queryImpl.memoizedOrderBy === null) {\n    queryImpl.memoizedOrderBy = [];\n\n    const inequalityField = getInequalityFilterField(queryImpl);\n    const firstOrderByField = getFirstOrderByField(queryImpl);\n    if (inequalityField !== null && firstOrderByField === null) {\n      // In order to implicitly add key ordering, we must also add the\n      // inequality filter field for it to be a valid query.\n      // Note that the default inequality field and key ordering is ascending.\n      if (!inequalityField.isKeyField()) {\n        queryImpl.memoizedOrderBy.push(new OrderBy(inequalityField));\n      }\n      queryImpl.memoizedOrderBy.push(\n        new OrderBy(FieldPath.keyField(), Direction.ASCENDING)\n      );\n    } else {\n      debugAssert(\n        inequalityField === null ||\n          (firstOrderByField !== null &&\n            inequalityField.isEqual(firstOrderByField)),\n        'First orderBy should match inequality field.'\n      );\n      let foundKeyOrdering = false;\n      for (const orderBy of queryImpl.explicitOrderBy) {\n        queryImpl.memoizedOrderBy.push(orderBy);\n        if (orderBy.field.isKeyField()) {\n          foundKeyOrdering = true;\n        }\n      }\n      if (!foundKeyOrdering) {\n        // The order of the implicit key ordering always matches the last\n        // explicit order by\n        const lastDirection =\n          queryImpl.explicitOrderBy.length > 0\n            ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1]\n                .dir\n            : Direction.ASCENDING;\n        queryImpl.memoizedOrderBy.push(\n          new OrderBy(FieldPath.keyField(), lastDirection)\n        );\n      }\n    }\n  }\n  return queryImpl.memoizedOrderBy;\n}\n\n/**\n * Converts this `Query` instance to it's corresponding `Target` representation.\n */\nexport function queryToTarget(query: Query): Target {\n  const queryImpl = debugCast(query, QueryImpl);\n  if (!queryImpl.memoizedTarget) {\n    if (queryImpl.limitType === LimitType.First) {\n      queryImpl.memoizedTarget = newTarget(\n        queryImpl.path,\n        queryImpl.collectionGroup,\n        queryOrderBy(queryImpl),\n        queryImpl.filters,\n        queryImpl.limit,\n        queryImpl.startAt,\n        queryImpl.endAt\n      );\n    } else {\n      // Flip the orderBy directions since we want the last results\n      const orderBys = [] as OrderBy[];\n      for (const orderBy of queryOrderBy(queryImpl)) {\n        const dir =\n          orderBy.dir === Direction.DESCENDING\n            ? Direction.ASCENDING\n            : Direction.DESCENDING;\n        orderBys.push(new OrderBy(orderBy.field, dir));\n      }\n\n      // We need to swap the cursors to match the now-flipped query ordering.\n      const startAt = queryImpl.endAt\n        ? new Bound(queryImpl.endAt.position, !queryImpl.endAt.before)\n        : null;\n      const endAt = queryImpl.startAt\n        ? new Bound(queryImpl.startAt.position, !queryImpl.startAt.before)\n        : null;\n\n      // Now return as a LimitType.First query.\n      queryImpl.memoizedTarget = newTarget(\n        queryImpl.path,\n        queryImpl.collectionGroup,\n        orderBys,\n        queryImpl.filters,\n        queryImpl.limit,\n        startAt,\n        endAt\n      );\n    }\n  }\n  return queryImpl.memoizedTarget!;\n}\n\nexport function queryWithAddedFilter(query: Query, filter: Filter): Query {\n  debugAssert(\n    getInequalityFilterField(query) == null ||\n      !(filter instanceof FieldFilter) ||\n      !filter.isInequality() ||\n      filter.field.isEqual(getInequalityFilterField(query)!),\n    'Query must only have one inequality field.'\n  );\n\n  debugAssert(\n    !isDocumentQuery(query),\n    'No filtering allowed for document query'\n  );\n\n  const newFilters = query.filters.concat([filter]);\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    newFilters,\n    query.limit,\n    query.limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithAddedOrderBy(query: Query, orderBy: OrderBy): Query {\n  debugAssert(\n    !query.startAt && !query.endAt,\n    'Bounds must be set after orderBy'\n  );\n  // TODO(dimond): validate that orderBy does not list the same key twice.\n  const newOrderBy = query.explicitOrderBy.concat([orderBy]);\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    newOrderBy,\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithLimit(\n  query: Query,\n  limit: number,\n  limitType: LimitType\n): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    limit,\n    limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithStartAt(query: Query, bound: Bound): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    bound,\n    query.endAt\n  );\n}\n\nexport function queryWithEndAt(query: Query, bound: Bound): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    query.startAt,\n    bound\n  );\n}\n\nexport function queryEquals(left: Query, right: Query): boolean {\n  return (\n    targetEquals(queryToTarget(left), queryToTarget(right)) &&\n    left.limitType === right.limitType\n  );\n}\n\n// TODO(b/29183165): This is used to get a unique string from a query to, for\n// example, use as a dictionary key, but the implementation is subject to\n// collisions. Make it collision-free.\nexport function canonifyQuery(query: Query): string {\n  return `${canonifyTarget(queryToTarget(query))}|lt:${query.limitType}`;\n}\n\nexport function stringifyQuery(query: Query): string {\n  return `Query(target=${stringifyTarget(queryToTarget(query))}; limitType=${\n    query.limitType\n  })`;\n}\n\n/** Returns whether `doc` matches the constraints of `query`. */\nexport function queryMatches(query: Query, doc: Document): boolean {\n  return (\n    queryMatchesPathAndCollectionGroup(query, doc) &&\n    queryMatchesOrderBy(query, doc) &&\n    queryMatchesFilters(query, doc) &&\n    queryMatchesBounds(query, doc)\n  );\n}\n\nfunction queryMatchesPathAndCollectionGroup(\n  query: Query,\n  doc: Document\n): boolean {\n  const docPath = doc.key.path;\n  if (query.collectionGroup !== null) {\n    // NOTE: this.path is currently always empty since we don't expose Collection\n    // Group queries rooted at a document path yet.\n    return (\n      doc.key.hasCollectionId(query.collectionGroup) &&\n      query.path.isPrefixOf(docPath)\n    );\n  } else if (DocumentKey.isDocumentKey(query.path)) {\n    // exact match for document queries\n    return query.path.isEqual(docPath);\n  } else {\n    // shallow ancestor queries by default\n    return query.path.isImmediateParentOf(docPath);\n  }\n}\n\n/**\n * A document must have a value for every ordering clause in order to show up\n * in the results.\n */\nfunction queryMatchesOrderBy(query: Query, doc: Document): boolean {\n  for (const orderBy of query.explicitOrderBy) {\n    // order by key always matches\n    if (!orderBy.field.isKeyField() && doc.field(orderBy.field) === null) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction queryMatchesFilters(query: Query, doc: Document): boolean {\n  for (const filter of query.filters) {\n    if (!filter.matches(doc)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** Makes sure a document is within the bounds, if provided. */\nfunction queryMatchesBounds(query: Query, doc: Document): boolean {\n  if (\n    query.startAt &&\n    !sortsBeforeDocument(query.startAt, queryOrderBy(query), doc)\n  ) {\n    return false;\n  }\n  if (\n    query.endAt &&\n    sortsBeforeDocument(query.endAt, queryOrderBy(query), doc)\n  ) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns a new comparator function that can be used to compare two documents\n * based on the Query's ordering constraint.\n */\nexport function newQueryComparator(\n  query: Query\n): (d1: Document, d2: Document) => number {\n  return (d1: Document, d2: Document): number => {\n    let comparedOnKeyField = false;\n    for (const orderBy of queryOrderBy(query)) {\n      const comp = compareDocs(orderBy, d1, d2);\n      if (comp !== 0) {\n        return comp;\n      }\n      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n    }\n    // Assert that we actually compared by key\n    debugAssert(\n      comparedOnKeyField,\n      \"orderBy used that doesn't compare on key field\"\n    );\n    return 0;\n  };\n}\n\nexport abstract class Filter {\n  abstract matches(doc: Document): boolean;\n}\n\nexport const enum Operator {\n  LESS_THAN = '<',\n  LESS_THAN_OR_EQUAL = '<=',\n  EQUAL = '==',\n  NOT_EQUAL = '!=',\n  GREATER_THAN = '>',\n  GREATER_THAN_OR_EQUAL = '>=',\n  ARRAY_CONTAINS = 'array-contains',\n  IN = 'in',\n  NOT_IN = 'not-in',\n  ARRAY_CONTAINS_ANY = 'array-contains-any'\n}\n\nexport class FieldFilter extends Filter {\n  protected constructor(\n    public field: FieldPath,\n    public op: Operator,\n    public value: ProtoValue\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(\n    field: FieldPath,\n    op: Operator,\n    value: ProtoValue\n  ): FieldFilter {\n    if (field.isKeyField()) {\n      if (op === Operator.IN || op === Operator.NOT_IN) {\n        return this.createKeyFieldInFilter(field, op, value);\n      } else {\n        debugAssert(\n          isReferenceValue(value),\n          'Comparing on key, but filter value not a RefValue'\n        );\n        debugAssert(\n          op !== Operator.ARRAY_CONTAINS && op !== Operator.ARRAY_CONTAINS_ANY,\n          `'${op.toString()}' queries don't make sense on document keys.`\n        );\n        return new KeyFieldFilter(field, op, value);\n      }\n    } else if (op === Operator.ARRAY_CONTAINS) {\n      return new ArrayContainsFilter(field, value);\n    } else if (op === Operator.IN) {\n      debugAssert(\n        isArray(value),\n        'IN filter has invalid value: ' + value.toString()\n      );\n      return new InFilter(field, value);\n    } else if (op === Operator.NOT_IN) {\n      debugAssert(\n        isArray(value),\n        'NOT_IN filter has invalid value: ' + value.toString()\n      );\n      return new NotInFilter(field, value);\n    } else if (op === Operator.ARRAY_CONTAINS_ANY) {\n      debugAssert(\n        isArray(value),\n        'ARRAY_CONTAINS_ANY filter has invalid value: ' + value.toString()\n      );\n      return new ArrayContainsAnyFilter(field, value);\n    } else {\n      return new FieldFilter(field, op, value);\n    }\n  }\n\n  private static createKeyFieldInFilter(\n    field: FieldPath,\n    op: Operator.IN | Operator.NOT_IN,\n    value: ProtoValue\n  ): FieldFilter {\n    debugAssert(\n      isArray(value),\n      `Comparing on key with ${op.toString()}` +\n        ', but filter value not an ArrayValue'\n    );\n    debugAssert(\n      (value.arrayValue.values || []).every(elem => isReferenceValue(elem)),\n      `Comparing on key with ${op.toString()}` +\n        ', but an array value was not a RefValue'\n    );\n\n    return op === Operator.IN\n      ? new KeyFieldInFilter(field, value)\n      : new KeyFieldNotInFilter(field, value);\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    // Types do not have to match in NOT_EQUAL filters.\n    if (this.op === Operator.NOT_EQUAL) {\n      return (\n        other !== null &&\n        this.matchesComparison(valueCompare(other!, this.value))\n      );\n    }\n\n    // Only compare types with matching backend order (such as double and int).\n    return (\n      other !== null &&\n      typeOrder(this.value) === typeOrder(other) &&\n      this.matchesComparison(valueCompare(other, this.value))\n    );\n  }\n\n  protected matchesComparison(comparison: number): boolean {\n    switch (this.op) {\n      case Operator.LESS_THAN:\n        return comparison < 0;\n      case Operator.LESS_THAN_OR_EQUAL:\n        return comparison <= 0;\n      case Operator.EQUAL:\n        return comparison === 0;\n      case Operator.NOT_EQUAL:\n        return comparison !== 0;\n      case Operator.GREATER_THAN:\n        return comparison > 0;\n      case Operator.GREATER_THAN_OR_EQUAL:\n        return comparison >= 0;\n      default:\n        return fail('Unknown FieldFilter operator: ' + this.op);\n    }\n  }\n\n  isInequality(): boolean {\n    return (\n      [\n        Operator.LESS_THAN,\n        Operator.LESS_THAN_OR_EQUAL,\n        Operator.GREATER_THAN,\n        Operator.GREATER_THAN_OR_EQUAL,\n        Operator.NOT_EQUAL,\n        Operator.NOT_IN\n      ].indexOf(this.op) >= 0\n    );\n  }\n}\n\nexport function canonifyFilter(filter: Filter): string {\n  debugAssert(\n    filter instanceof FieldFilter,\n    'canonifyFilter() only supports FieldFilters'\n  );\n  // TODO(b/29183165): Technically, this won't be unique if two values have\n  // the same description, such as the int 3 and the string \"3\". So we should\n  // add the types in here somehow, too.\n  return (\n    filter.field.canonicalString() +\n    filter.op.toString() +\n    canonicalId(filter.value)\n  );\n}\n\nexport function filterEquals(f1: Filter, f2: Filter): boolean {\n  debugAssert(\n    f1 instanceof FieldFilter && f2 instanceof FieldFilter,\n    'Only FieldFilters can be compared'\n  );\n\n  return (\n    f1.op === f2.op &&\n    f1.field.isEqual(f2.field) &&\n    valueEquals(f1.value, f2.value)\n  );\n}\n\n/** Returns a debug description for `filter`. */\nexport function stringifyFilter(filter: Filter): string {\n  debugAssert(\n    filter instanceof FieldFilter,\n    'stringifyFilter() only supports FieldFilters'\n  );\n  return `${filter.field.canonicalString()} ${filter.op} ${canonicalId(\n    filter.value\n  )}`;\n}\n\n/** Filter that matches on key fields (i.e. '__name__'). */\nexport class KeyFieldFilter extends FieldFilter {\n  private readonly key: DocumentKey;\n\n  constructor(field: FieldPath, op: Operator, value: ProtoValue) {\n    super(field, op, value);\n    debugAssert(\n      isReferenceValue(value),\n      'KeyFieldFilter expects a ReferenceValue'\n    );\n    this.key = DocumentKey.fromName(value.referenceValue);\n  }\n\n  matches(doc: Document): boolean {\n    const comparison = DocumentKey.comparator(doc.key, this.key);\n    return this.matchesComparison(comparison);\n  }\n}\n\n/** Filter that matches on key fields within an array. */\nexport class KeyFieldInFilter extends FieldFilter {\n  private readonly keys: DocumentKey[];\n\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.IN, value);\n    this.keys = extractDocumentKeysFromArrayValue(Operator.IN, value);\n  }\n\n  matches(doc: Document): boolean {\n    return this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n\n/** Filter that matches on key fields not present within an array. */\nexport class KeyFieldNotInFilter extends FieldFilter {\n  private readonly keys: DocumentKey[];\n\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.NOT_IN, value);\n    this.keys = extractDocumentKeysFromArrayValue(Operator.NOT_IN, value);\n  }\n\n  matches(doc: Document): boolean {\n    return !this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n\nfunction extractDocumentKeysFromArrayValue(\n  op: Operator.IN | Operator.NOT_IN,\n  value: ProtoValue\n): DocumentKey[] {\n  debugAssert(\n    isArray(value),\n    'KeyFieldInFilter/KeyFieldNotInFilter expects an ArrayValue'\n  );\n  return (value.arrayValue?.values || []).map(v => {\n    debugAssert(\n      isReferenceValue(v),\n      `Comparing on key with ${op.toString()}, but an array value was not ` +\n        `a ReferenceValue`\n    );\n    return DocumentKey.fromName(v.referenceValue);\n  });\n}\n\n/** A Filter that implements the array-contains operator. */\nexport class ArrayContainsFilter extends FieldFilter {\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.ARRAY_CONTAINS, value);\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return isArray(other) && arrayValueContains(other.arrayValue, this.value);\n  }\n}\n\n/** A Filter that implements the IN operator. */\nexport class InFilter extends FieldFilter {\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'InFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return other !== null && arrayValueContains(this.value.arrayValue!, other);\n  }\n}\n\n/** A Filter that implements the not-in operator. */\nexport class NotInFilter extends FieldFilter {\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.NOT_IN, value);\n    debugAssert(isArray(value), 'NotInFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    if (\n      arrayValueContains(this.value.arrayValue!, { nullValue: 'NULL_VALUE' })\n    ) {\n      return false;\n    }\n    const other = doc.field(this.field);\n    return other !== null && !arrayValueContains(this.value.arrayValue!, other);\n  }\n}\n\n/** A Filter that implements the array-contains-any operator. */\nexport class ArrayContainsAnyFilter extends FieldFilter {\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.ARRAY_CONTAINS_ANY, value);\n    debugAssert(isArray(value), 'ArrayContainsAnyFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    if (!isArray(other) || !other.arrayValue.values) {\n      return false;\n    }\n    return other.arrayValue.values.some(val =>\n      arrayValueContains(this.value.arrayValue!, val)\n    );\n  }\n}\n\n/**\n * The direction of sorting in an order by.\n */\nexport const enum Direction {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc'\n}\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nexport class Bound {\n  constructor(readonly position: ProtoValue[], readonly before: boolean) {}\n}\n\nexport function canonifyBound(bound: Bound): string {\n  // TODO(b/29183165): Make this collision robust.\n  return `${bound.before ? 'b' : 'a'}:${bound.position\n    .map(p => canonicalId(p))\n    .join(',')}`;\n}\n\n/**\n * Returns true if a document sorts before a bound using the provided sort\n * order.\n */\nexport function sortsBeforeDocument(\n  bound: Bound,\n  orderBy: OrderBy[],\n  doc: Document\n): boolean {\n  debugAssert(\n    bound.position.length <= orderBy.length,\n    \"Bound has more components than query's orderBy\"\n  );\n  let comparison = 0;\n  for (let i = 0; i < bound.position.length; i++) {\n    const orderByComponent = orderBy[i];\n    const component = bound.position[i];\n    if (orderByComponent.field.isKeyField()) {\n      debugAssert(\n        isReferenceValue(component),\n        'Bound has a non-key value where the key path is being used.'\n      );\n      comparison = DocumentKey.comparator(\n        DocumentKey.fromName(component.referenceValue),\n        doc.key\n      );\n    } else {\n      const docValue = doc.field(orderByComponent.field);\n      debugAssert(\n        docValue !== null,\n        'Field should exist since document matched the orderBy already.'\n      );\n      comparison = valueCompare(component, docValue);\n    }\n    if (orderByComponent.dir === Direction.DESCENDING) {\n      comparison = comparison * -1;\n    }\n    if (comparison !== 0) {\n      break;\n    }\n  }\n  return bound.before ? comparison <= 0 : comparison < 0;\n}\n\nexport function boundEquals(left: Bound | null, right: Bound | null): boolean {\n  if (left === null) {\n    return right === null;\n  } else if (right === null) {\n    return false;\n  }\n\n  if (\n    left.before !== right.before ||\n    left.position.length !== right.position.length\n  ) {\n    return false;\n  }\n  for (let i = 0; i < left.position.length; i++) {\n    const leftPosition = left.position[i];\n    const rightPosition = right.position[i];\n    if (!valueEquals(leftPosition, rightPosition)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nexport class OrderBy {\n  constructor(\n    readonly field: FieldPath,\n    readonly dir: Direction = Direction.ASCENDING\n  ) {}\n}\n\nexport function compareDocs(\n  orderBy: OrderBy,\n  d1: Document,\n  d2: Document\n): number {\n  const comparison = orderBy.field.isKeyField()\n    ? DocumentKey.comparator(d1.key, d2.key)\n    : compareDocumentsByField(orderBy.field, d1, d2);\n  switch (orderBy.dir) {\n    case Direction.ASCENDING:\n      return comparison;\n    case Direction.DESCENDING:\n      return -1 * comparison;\n    default:\n      return fail('Unknown direction: ' + orderBy.dir);\n  }\n}\n\nexport function canonifyOrderBy(orderBy: OrderBy): string {\n  // TODO(b/29183165): Make this collision robust.\n  return orderBy.field.canonicalString() + orderBy.dir;\n}\n\nexport function stringifyOrderBy(orderBy: OrderBy): string {\n  return `${orderBy.field.canonicalString()} (${orderBy.dir})`;\n}\n\nexport function orderByEquals(left: OrderBy, right: OrderBy): boolean {\n  return left.dir === right.dir && left.field.isEqual(right.field);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { ByteString } from '../util/byte_string';\n\n/** An enumeration of the different purposes we have for targets. */\nexport const enum TargetPurpose {\n  /** A regular, normal query target. */\n  Listen,\n\n  /**\n   * The query target was used to refill a query after an existence filter mismatch.\n   */\n  ExistenceFilterMismatch,\n\n  /** The query target was used to resolve a limbo document. */\n  LimboResolution\n}\n\n/**\n * An immutable set of metadata that the local store tracks for each target.\n */\nexport class TargetData {\n  constructor(\n    /** The target being listened to. */\n    readonly target: Target,\n    /**\n     * The target ID to which the target corresponds; Assigned by the\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\n     */\n    readonly targetId: TargetId,\n    /** The purpose of the target. */\n    readonly purpose: TargetPurpose,\n    /**\n     * The sequence number of the last transaction during which this target data\n     * was modified.\n     */\n    readonly sequenceNumber: ListenSequenceNumber,\n    /** The latest snapshot version seen for this target. */\n    readonly snapshotVersion: SnapshotVersion = SnapshotVersion.min(),\n    /**\n     * The maximum snapshot version at which the associated view\n     * contained no limbo documents.\n     */\n    readonly lastLimboFreeSnapshotVersion: SnapshotVersion = SnapshotVersion.min(),\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    readonly resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING\n  ) {}\n\n  /** Creates a new target data instance with an updated sequence number. */\n  withSequenceNumber(sequenceNumber: number): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      sequenceNumber,\n      this.snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated resume token and\n   * snapshot version.\n   */\n  withResumeToken(\n    resumeToken: ByteString,\n    snapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated last limbo free\n   * snapshot version number.\n   */\n  withLastLimboFreeSnapshotVersion(\n    lastLimboFreeSnapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      this.snapshotVersion,\n      lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ExistenceFilter {\n  // TODO(b/33078163): just use simplest form of existence filter for now\n  constructor(public count: number) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport { logError } from '../util/log';\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nenum RpcCode {\n  OK = 0,\n  CANCELLED = 1,\n  UNKNOWN = 2,\n  INVALID_ARGUMENT = 3,\n  DEADLINE_EXCEEDED = 4,\n  NOT_FOUND = 5,\n  ALREADY_EXISTS = 6,\n  PERMISSION_DENIED = 7,\n  UNAUTHENTICATED = 16,\n  RESOURCE_EXHAUSTED = 8,\n  FAILED_PRECONDITION = 9,\n  ABORTED = 10,\n  OUT_OF_RANGE = 11,\n  UNIMPLEMENTED = 12,\n  INTERNAL = 13,\n  UNAVAILABLE = 14,\n  DATA_LOSS = 15\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\nexport function isPermanentError(code: Code): boolean {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a write operation.\n *\n * Write operations must be handled specially because as of b/119437764, ABORTED\n * errors on the write stream should be retried too (even though ABORTED errors\n * are not generally retryable).\n *\n * Note that during the initial handshake on the write stream an ABORTED error\n * signals that we should discard our stream token (i.e. it is permanent). This\n * means a handshake error should be classified with isPermanentError, above.\n */\nexport function isPermanentWriteError(code: Code): boolean {\n  return isPermanentError(code) && code !== Code.ABORTED;\n}\n\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status: string): Code | undefined {\n  // lookup by string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const code: RpcCode = RpcCode[status as any] as any;\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code: number | undefined): Code {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    logError('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code: Code | undefined): number {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status?: number): Code {\n  if (status === undefined) {\n    logError('RPC_ERROR', 'HTTP error has no status');\n    return Code.UNKNOWN;\n  }\n\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200: // OK\n      return Code.OK;\n\n    case 400: // Bad Request\n      return Code.FAILED_PRECONDITION;\n    // Other possibilities based on the forward mapping\n    // return Code.INVALID_ARGUMENT;\n    // return Code.OUT_OF_RANGE;\n\n    case 401: // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403: // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404: // Not Found\n      return Code.NOT_FOUND;\n\n    case 409: // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416: // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429: // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499: // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500: // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501: // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503: // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504: // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) {\n        return Code.OK;\n      }\n      if (status >= 400 && status < 500) {\n        return Code.FAILED_PRECONDITION;\n      }\n      if (status >= 500 && status < 600) {\n        return Code.INTERNAL;\n      }\n      return Code.UNKNOWN;\n  }\n}\n\n/**\n * Converts an HTTP response's error status to the equivalent error code.\n *\n * @param status An HTTP error response status (\"FAILED_PRECONDITION\",\n * \"UNKNOWN\", etc.)\n * @returns The equivalent Code. Non-matching responses are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpResponseErrorStatus(status: string): Code {\n  const serverError = status.toLowerCase().replace('_', '-');\n  return Object.values(Code).indexOf(serverError as Code) >= 0\n    ? (serverError as Code)\n    : Code.UNKNOWN;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\n\n/*\n * Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\nexport interface Entry<K, V> {\n  key: K;\n  value: V;\n}\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nexport class SortedMap<K, V> {\n  // visible for testing\n  root: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  constructor(\n    public comparator: Comparator<K>,\n    root?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.root = root ? root : LLRBNode.EMPTY;\n  }\n\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .insert(key, value, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns a copy of the map, with the specified key removed.\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .remove(key, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns the value of the node with the given key, or null.\n  get(key: K): V | null {\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n  indexOf(key: K): number {\n    // Number of nodes that were pruned when descending right\n    let prunedNodes = 0;\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return prunedNodes + node.left.size;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        // Count all nodes left of the node plus the node itself\n        prunedNodes += node.left.size + 1;\n        node = node.right;\n      }\n    }\n    // Node not found\n    return -1;\n  }\n\n  isEmpty(): boolean {\n    return this.root.isEmpty();\n  }\n\n  // Returns the total number of nodes in the map.\n  get size(): number {\n    return this.root.size;\n  }\n\n  // Returns the minimum key in the map.\n  minKey(): K | null {\n    return this.root.minKey();\n  }\n\n  // Returns the maximum key in the map.\n  maxKey(): K | null {\n    return this.root.maxKey();\n  }\n\n  // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).inorderTraversal(action);\n  }\n\n  forEach(fn: (k: K, v: V) => void): void {\n    this.inorderTraversal((k, v) => {\n      fn(k, v);\n      return false;\n    });\n  }\n\n  toString(): string {\n    const descriptions: string[] = [];\n    this.inorderTraversal((k, v) => {\n      descriptions.push(`${k}:${v}`);\n      return false;\n    });\n    return `{${descriptions.join(', ')}}`;\n  }\n\n  // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).reverseTraversal(action);\n  }\n\n  // Returns an iterator over the SortedMap.\n  getIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, false);\n  }\n\n  getIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, false);\n  }\n\n  getReverseIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, true);\n  }\n\n  getReverseIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, true);\n  }\n} // end SortedMap\n\n// An iterator over an LLRBNode.\nexport class SortedMapIterator<K, V> {\n  private isReverse: boolean;\n  private nodeStack: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>>;\n\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    isReverse: boolean\n  ) {\n    this.isReverse = isReverse;\n    this.nodeStack = [];\n\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move\n        // to the next one\n        this.nodeStack.push(node);\n        if (this.isReverse) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): Entry<K, V> {\n    debugAssert(\n      this.nodeStack.length > 0,\n      'getNext() called on iterator when hasNext() is false.'\n    );\n\n    let node = this.nodeStack.pop()!;\n    const result = { key: node.key, value: node.value };\n\n    if (this.isReverse) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack.length > 0;\n  }\n\n  peek(): Entry<K, V> | null {\n    if (this.nodeStack.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack[this.nodeStack.length - 1];\n    return { key: node.key, value: node.value };\n  }\n} // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nexport class LLRBNode<K, V> {\n  readonly color: boolean;\n  readonly left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly size: number;\n\n  // Empty node is shared between all LLRB trees.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static EMPTY: LLRBEmptyNode<any, any> = null as any;\n\n  static RED = true;\n  static BLACK = false;\n\n  constructor(\n    public key: K,\n    public value: V,\n    color?: boolean,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : LLRBNode.EMPTY;\n    this.right = right != null ? right : LLRBNode.EMPTY;\n    this.size = this.left.size + 1 + this.right.size;\n  }\n\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.left as LLRBNode<K, V>).inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.right as LLRBNode<K, V>).inorderTraversal(action)\n    );\n  }\n\n  // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.right as LLRBNode<K, V>).reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.left as LLRBNode<K, V>).reverseTraversal(action)\n    );\n  }\n\n  // Returns the minimum node in the tree.\n  private min(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min();\n    }\n  }\n\n  // Returns the maximum key in the tree.\n  minKey(): K | null {\n    return this.min().key;\n  }\n\n  // Returns the maximum key in the tree.\n  maxKey(): K | null {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  // Returns new tree, with the key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp();\n  }\n\n  private removeMin(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return LLRBNode.EMPTY;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed() && !n.left.left.isRed()) {\n      n = n.moveRedLeft();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin(), null);\n    return n.fixUp();\n  }\n\n  // Returns new tree, with the specified item removed.\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let smallest: LLRBNode<K, V>;\n    let n: LLRBNode<K, V> = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n        n = n.moveRedLeft();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed()) {\n        n = n.rotateRight();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n        n = n.moveRedRight();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return LLRBNode.EMPTY;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp();\n  }\n\n  isRed(): boolean {\n    return this.color;\n  }\n\n  // Returns new tree after performing any needed rotations.\n  private fixUp(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed() && !n.left.isRed()) {\n      n = n.rotateLeft();\n    }\n    if (n.left.isRed() && n.left.left.isRed()) {\n      n = n.rotateRight();\n    }\n    if (n.left.isRed() && n.right.isRed()) {\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedLeft(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.right.left.isRed()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight()\n      );\n      n = n.rotateLeft();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedRight(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.left.left.isRed()) {\n      n = n.rotateRight();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private rotateLeft(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return (this.right as LLRBNode<K, V>).copy(\n      null,\n      null,\n      this.color,\n      nl,\n      null\n    );\n  }\n\n  private rotateRight(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return (this.left as LLRBNode<K, V>).copy(null, null, this.color, null, nr);\n  }\n\n  private colorFlip(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    const blackDepth = this.check();\n    if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n  protected check(): number {\n    if (this.isRed() && this.left.isRed()) {\n      throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed()) {\n      throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = (this.left as LLRBNode<K, V>).check();\n    if (blackDepth !== (this.right as LLRBNode<K, V>).check()) {\n      throw fail('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed() ? 0 : 1);\n    }\n  }\n} // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nexport class LLRBEmptyNode<K, V> {\n  get key(): never {\n    throw fail('LLRBEmptyNode has no key.');\n  }\n  get value(): never {\n    throw fail('LLRBEmptyNode has no value.');\n  }\n  get color(): never {\n    throw fail('LLRBEmptyNode has no color.');\n  }\n  get left(): never {\n    throw fail('LLRBEmptyNode has no left child.');\n  }\n  get right(): never {\n    throw fail('LLRBEmptyNode has no right child.');\n  }\n  size = 0;\n\n  // Returns a copy of the current node.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  // Returns a copy of the tree, with the specified key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(key, value);\n  }\n\n  // Returns a copy of the tree, with the specified key removed.\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  isEmpty(): boolean {\n    return true;\n  }\n\n  inorderTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  reverseTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  minKey(): K | null {\n    return null;\n  }\n\n  maxKey(): K | null {\n    return null;\n  }\n\n  isRed(): boolean {\n    return false;\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    return true;\n  }\n\n  protected check(): 0 {\n    return 0;\n  }\n} // end LLRBEmptyNode\n\nLLRBNode.EMPTY = new LLRBEmptyNode<unknown, unknown>();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap, SortedMapIterator } from './sorted_map';\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nexport class SortedSet<T> {\n  private data: SortedMap<T, boolean>;\n\n  constructor(private comparator: (left: T, right: T) => number) {\n    this.data = new SortedMap<T, boolean>(this.comparator);\n  }\n\n  has(elem: T): boolean {\n    return this.data.get(elem) !== null;\n  }\n\n  first(): T | null {\n    return this.data.minKey();\n  }\n\n  last(): T | null {\n    return this.data.maxKey();\n  }\n\n  get size(): number {\n    return this.data.size;\n  }\n\n  indexOf(elem: T): number {\n    return this.data.indexOf(elem);\n  }\n\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb: (elem: T) => void): void {\n    this.data.inorderTraversal((k: T, v: boolean) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n  forEachInRange(range: [T, T], cb: (elem: T) => void): void {\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) {\n        return;\n      }\n      cb(elem.key);\n    }\n  }\n\n  /**\n   * Iterates over `elem`s such that: start <= elem until false is returned.\n   */\n  forEachWhile(cb: (elem: T) => boolean, start?: T): void {\n    let iter: SortedMapIterator<T, boolean>;\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) {\n        return;\n      }\n    }\n  }\n\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem: T): T | null {\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  }\n\n  getIterator(): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIterator());\n  }\n\n  getIteratorFrom(key: T): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIteratorFrom(key));\n  }\n\n  /** Inserts or updates an element */\n  add(elem: T): SortedSet<T> {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  }\n\n  /** Deletes an element */\n  delete(elem: T): SortedSet<T> {\n    if (!this.has(elem)) {\n      return this;\n    }\n    return this.copy(this.data.remove(elem));\n  }\n\n  isEmpty(): boolean {\n    return this.data.isEmpty();\n  }\n\n  unionWith(other: SortedSet<T>): SortedSet<T> {\n    let result: SortedSet<T> = this;\n\n    // Make sure `result` always refers to the larger one of the two sets.\n    if (result.size < other.size) {\n      result = other;\n      other = this;\n    }\n\n    other.forEach(elem => {\n      result = result.add(elem);\n    });\n    return result;\n  }\n\n  isEqual(other: SortedSet<T>): boolean {\n    if (!(other instanceof SortedSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) {\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toArray(): T[] {\n    const res: T[] = [];\n    this.forEach(targetId => {\n      res.push(targetId);\n    });\n    return res;\n  }\n\n  toString(): string {\n    const result: T[] = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  }\n\n  private copy(data: SortedMap<T, boolean>): SortedSet<T> {\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  }\n}\n\nexport class SortedSetIterator<T> {\n  constructor(private iter: SortedMapIterator<T, boolean>) {}\n\n  getNext(): T {\n    return this.iter.getNext().key;\n  }\n\n  hasNext(): boolean {\n    return this.iter.hasNext();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { TargetId } from '../core/types';\nimport { primitiveComparator } from '../util/misc';\nimport { Document, MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\n\n/** Miscellaneous collection types / constants. */\nexport interface DocumentSizeEntry {\n  maybeDocument: MaybeDocument;\n  size: number;\n}\n\nexport type MaybeDocumentMap = SortedMap<DocumentKey, MaybeDocument>;\nconst EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap<DocumentKey, MaybeDocument>(\n  DocumentKey.comparator\n);\nexport function maybeDocumentMap(): MaybeDocumentMap {\n  return EMPTY_MAYBE_DOCUMENT_MAP;\n}\n\nexport type NullableMaybeDocumentMap = SortedMap<\n  DocumentKey,\n  MaybeDocument | null\n>;\n\nexport function nullableMaybeDocumentMap(): NullableMaybeDocumentMap {\n  return maybeDocumentMap();\n}\n\nexport interface DocumentSizeEntries {\n  maybeDocuments: NullableMaybeDocumentMap;\n  sizeMap: SortedMap<DocumentKey, number>;\n}\n\nexport type DocumentMap = SortedMap<DocumentKey, Document>;\nconst EMPTY_DOCUMENT_MAP = new SortedMap<DocumentKey, Document>(\n  DocumentKey.comparator\n);\nexport function documentMap(): DocumentMap {\n  return EMPTY_DOCUMENT_MAP;\n}\n\nexport type DocumentVersionMap = SortedMap<DocumentKey, SnapshotVersion>;\nconst EMPTY_DOCUMENT_VERSION_MAP = new SortedMap<DocumentKey, SnapshotVersion>(\n  DocumentKey.comparator\n);\nexport function documentVersionMap(): DocumentVersionMap {\n  return EMPTY_DOCUMENT_VERSION_MAP;\n}\n\nexport type DocumentKeySet = SortedSet<DocumentKey>;\nconst EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nexport function documentKeySet(...keys: DocumentKey[]): DocumentKeySet {\n  let set = EMPTY_DOCUMENT_KEY_SET;\n  for (const key of keys) {\n    set = set.add(key);\n  }\n  return set;\n}\n\nexport type TargetIdSet = SortedSet<TargetId>;\nconst EMPTY_TARGET_ID_SET = new SortedSet<TargetId>(primitiveComparator);\nexport function targetIdSet(): SortedSet<TargetId> {\n  return EMPTY_TARGET_ID_SET;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from '../util/sorted_map';\n\nimport { documentMap } from './collections';\nimport { Document } from './document';\nimport { DocumentComparator } from './document_comparator';\nimport { DocumentKey } from './document_key';\n\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\n\nexport class DocumentSet {\n  /**\n   * Returns an empty copy of the existing DocumentSet, using the same\n   * comparator.\n   */\n  static emptySet(oldSet: DocumentSet): DocumentSet {\n    return new DocumentSet(oldSet.comparator);\n  }\n\n  private comparator: DocumentComparator;\n  private keyedMap: SortedMap<DocumentKey, Document>;\n  private sortedSet: SortedMap<Document, null>;\n\n  /** The default ordering is by key if the comparator is omitted */\n  constructor(comp?: DocumentComparator) {\n    // We are adding document key comparator to the end as it's the only\n    // guaranteed unique property of a document.\n    if (comp) {\n      this.comparator = (d1: Document, d2: Document) =>\n        comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n    } else {\n      this.comparator = (d1: Document, d2: Document) =>\n        DocumentKey.comparator(d1.key, d2.key);\n    }\n\n    this.keyedMap = documentMap();\n    this.sortedSet = new SortedMap<Document, null>(this.comparator);\n  }\n\n  has(key: DocumentKey): boolean {\n    return this.keyedMap.get(key) != null;\n  }\n\n  get(key: DocumentKey): Document | null {\n    return this.keyedMap.get(key);\n  }\n\n  first(): Document | null {\n    return this.sortedSet.minKey();\n  }\n\n  last(): Document | null {\n    return this.sortedSet.maxKey();\n  }\n\n  isEmpty(): boolean {\n    return this.sortedSet.isEmpty();\n  }\n\n  /**\n   * Returns the index of the provided key in the document set, or -1 if the\n   * document key is not present in the set;\n   */\n  indexOf(key: DocumentKey): number {\n    const doc = this.keyedMap.get(key);\n    return doc ? this.sortedSet.indexOf(doc) : -1;\n  }\n\n  get size(): number {\n    return this.sortedSet.size;\n  }\n\n  /** Iterates documents in order defined by \"comparator\" */\n  forEach(cb: (doc: Document) => void): void {\n    this.sortedSet.inorderTraversal((k, v) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Inserts or updates a document with the same key */\n  add(doc: Document): DocumentSet {\n    // First remove the element if we have it.\n    const set = this.delete(doc.key);\n    return set.copy(\n      set.keyedMap.insert(doc.key, doc),\n      set.sortedSet.insert(doc, null)\n    );\n  }\n\n  /** Deletes a document with a given key */\n  delete(key: DocumentKey): DocumentSet {\n    const doc = this.get(key);\n    if (!doc) {\n      return this;\n    }\n\n    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n  }\n\n  isEqual(other: DocumentSet | null | undefined): boolean {\n    if (!(other instanceof DocumentSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.sortedSet.getIterator();\n    const otherIt = other.sortedSet.getIterator();\n    while (thisIt.hasNext()) {\n      const thisDoc = thisIt.getNext().key;\n      const otherDoc = otherIt.getNext().key;\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toString(): string {\n    const docStrings: string[] = [];\n    this.forEach(doc => {\n      docStrings.push(doc.toString());\n    });\n    if (docStrings.length === 0) {\n      return 'DocumentSet ()';\n    } else {\n      return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n    }\n  }\n\n  private copy(\n    keyedMap: SortedMap<DocumentKey, Document>,\n    sortedSet: SortedMap<Document, null>\n  ): DocumentSet {\n    const newSet = new DocumentSet();\n    newSet.comparator = this.comparator;\n    newSet.keyedMap = keyedMap;\n    newSet.sortedSet = sortedSet;\n    return newSet;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { DocumentKeySet } from '../model/collections';\nimport { Query, queryEquals } from './query';\n\nexport const enum ChangeType {\n  Added,\n  Removed,\n  Modified,\n  Metadata\n}\n\nexport interface DocumentViewChange {\n  type: ChangeType;\n  doc: Document;\n}\n\nexport const enum SyncState {\n  Local,\n  Synced\n}\n\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nexport class DocumentChangeSet {\n  private changeMap = new SortedMap<DocumentKey, DocumentViewChange>(\n    DocumentKey.comparator\n  );\n\n  track(change: DocumentViewChange): void {\n    const key = change.doc.key;\n    const oldChange = this.changeMap.get(key);\n    if (!oldChange) {\n      this.changeMap = this.changeMap.insert(key, change);\n      return;\n    }\n\n    // Merge the new change with the existing change.\n    if (\n      change.type !== ChangeType.Added &&\n      oldChange.type === ChangeType.Metadata\n    ) {\n      this.changeMap = this.changeMap.insert(key, change);\n    } else if (\n      change.type === ChangeType.Metadata &&\n      oldChange.type !== ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: oldChange.type,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Added,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.remove(key);\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Removed,\n        doc: oldChange.doc\n      });\n    } else if (\n      change.type === ChangeType.Added &&\n      oldChange.type === ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else {\n      // This includes these cases, which don't make sense:\n      // Added->Added\n      // Removed->Removed\n      // Modified->Added\n      // Removed->Modified\n      // Metadata->Added\n      // Removed->Metadata\n      fail(\n        'unsupported combination of changes: ' +\n          JSON.stringify(change) +\n          ' after ' +\n          JSON.stringify(oldChange)\n      );\n    }\n  }\n\n  getChanges(): DocumentViewChange[] {\n    const changes: DocumentViewChange[] = [];\n    this.changeMap.inorderTraversal(\n      (key: DocumentKey, change: DocumentViewChange) => {\n        changes.push(change);\n      }\n    );\n    return changes;\n  }\n}\n\nexport class ViewSnapshot {\n  constructor(\n    readonly query: Query,\n    readonly docs: DocumentSet,\n    readonly oldDocs: DocumentSet,\n    readonly docChanges: DocumentViewChange[],\n    readonly mutatedKeys: DocumentKeySet,\n    readonly fromCache: boolean,\n    readonly syncStateChanged: boolean,\n    readonly excludesMetadataChanges: boolean\n  ) {}\n\n  /** Returns a view snapshot as if all documents in the snapshot were added. */\n  static fromInitialDocuments(\n    query: Query,\n    documents: DocumentSet,\n    mutatedKeys: DocumentKeySet,\n    fromCache: boolean\n  ): ViewSnapshot {\n    const changes: DocumentViewChange[] = [];\n    documents.forEach(doc => {\n      changes.push({ type: ChangeType.Added, doc });\n    });\n\n    return new ViewSnapshot(\n      query,\n      documents,\n      DocumentSet.emptySet(documents),\n      changes,\n      mutatedKeys,\n      fromCache,\n      /* syncStateChanged= */ true,\n      /* excludesMetadataChanges= */ false\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return !this.mutatedKeys.isEmpty();\n  }\n\n  isEqual(other: ViewSnapshot): boolean {\n    if (\n      this.fromCache !== other.fromCache ||\n      this.syncStateChanged !== other.syncStateChanged ||\n      !this.mutatedKeys.isEqual(other.mutatedKeys) ||\n      !queryEquals(this.query, other.query) ||\n      !this.docs.isEqual(other.docs) ||\n      !this.oldDocs.isEqual(other.oldDocs)\n    ) {\n      return false;\n    }\n    const changes: DocumentViewChange[] = this.docChanges;\n    const otherChanges: DocumentViewChange[] = other.docChanges;\n    if (changes.length !== otherChanges.length) {\n      return false;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      if (\n        changes[i].type !== otherChanges[i].type ||\n        !changes[i].doc.isEqual(otherChanges[i].doc)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap,\n  MaybeDocumentMap,\n  targetIdSet\n} from '../model/collections';\nimport { SortedSet } from '../util/sorted_set';\nimport { ByteString } from '../util/byte_string';\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nexport class RemoteEvent {\n  constructor(\n    /**\n     * The snapshot version this event brings us up to, or MIN if not set.\n     */\n    readonly snapshotVersion: SnapshotVersion,\n    /**\n     * A map from target to changes to the target. See TargetChange.\n     */\n    readonly targetChanges: Map<TargetId, TargetChange>,\n    /**\n     * A set of targets that is known to be inconsistent. Listens for these\n     * targets should be re-established without resume tokens.\n     */\n    readonly targetMismatches: SortedSet<TargetId>,\n    /**\n     * A set of which documents have changed or been deleted, along with the\n     * doc's new values (if not deleted).\n     */\n    readonly documentUpdates: MaybeDocumentMap,\n    /**\n     * A set of which document updates are due only to limbo resolution targets.\n     */\n    readonly resolvedLimboDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * HACK: Views require RemoteEvents in order to determine whether the view is\n   * CURRENT, but secondary tabs don't receive remote events. So this method is\n   * used to create a synthesized RemoteEvent that can be used to apply a\n   * CURRENT status change to a View, for queries executed in a different tab.\n   */\n  // PORTING NOTE: Multi-tab only\n  static createSynthesizedRemoteEventForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n    targetChanges.set(\n      targetId,\n      TargetChange.createSynthesizedTargetChangeForCurrentChange(\n        targetId,\n        current\n      )\n    );\n    return new RemoteEvent(\n      SnapshotVersion.min(),\n      targetChanges,\n      targetIdSet(),\n      maybeDocumentMap(),\n      documentKeySet()\n    );\n  }\n}\n\n/**\n * A TargetChange specifies the set of changes for a specific target as part of\n * a RemoteEvent. These changes track which documents are added, modified or\n * removed, as well as the target's resume token and whether the target is\n * marked CURRENT.\n * The actual changes *to* documents are not part of the TargetChange since\n * documents may be part of multiple targets.\n */\nexport class TargetChange {\n  constructor(\n    /**\n     * An opaque, server-assigned token that allows watching a query to be resumed\n     * after disconnecting without retransmitting all the data that matches the\n     * query. The resume token essentially identifies a point in time from which\n     * the server should resume sending results.\n     */\n    readonly resumeToken: ByteString,\n    /**\n     * The \"current\" (synced) status of this target. Note that \"current\"\n     * has special meaning in the RPC protocol that implies that a target is\n     * both up-to-date and consistent with the rest of the watch stream.\n     */\n    readonly current: boolean,\n    /**\n     * The set of documents that were newly assigned to this target as part of\n     * this remote event.\n     */\n    readonly addedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were already assigned to this target but received\n     * an update during this remote event.\n     */\n    readonly modifiedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were removed from this target as part of this\n     * remote event.\n     */\n    readonly removedDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * This method is used to create a synthesized TargetChanges that can be used to\n   * apply a CURRENT status change to a View (for queries executed in a different\n   * tab) or for new queries (to raise snapshots with correct CURRENT status).\n   */\n  static createSynthesizedTargetChangeForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): TargetChange {\n    return new TargetChange(\n      ByteString.EMPTY_BYTE_STRING,\n      current,\n      documentKeySet(),\n      documentKeySet(),\n      documentKeySet()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { ChangeType } from '../core/view_snapshot';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ExistenceFilter } from './existence_filter';\nimport { RemoteEvent, TargetChange } from './remote_event';\nimport { ByteString } from '../util/byte_string';\nimport { isDocumentTarget } from '../core/target';\n\n/**\n * Internal representation of the watcher API protocol buffers.\n */\nexport type WatchChange =\n  | DocumentWatchChange\n  | WatchTargetChange\n  | ExistenceFilterChange;\n\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nexport class DocumentWatchChange {\n  constructor(\n    /** The new document applies to all of these targets. */\n    public updatedTargetIds: TargetId[],\n    /** The new document is removed from all of these targets. */\n    public removedTargetIds: TargetId[],\n    /** The key of the document for this change. */\n    public key: DocumentKey,\n    /**\n     * The new document or NoDocument if it was deleted. Is null if the\n     * document went out of view without the server sending a new document.\n     */\n    public newDoc: MaybeDocument | null\n  ) {}\n}\n\nexport class ExistenceFilterChange {\n  constructor(\n    public targetId: TargetId,\n    public existenceFilter: ExistenceFilter\n  ) {}\n}\n\nexport const enum WatchTargetChangeState {\n  NoChange,\n  Added,\n  Removed,\n  Current,\n  Reset\n}\n\nexport class WatchTargetChange {\n  constructor(\n    /** What kind of change occurred to the watch target. */\n    public state: WatchTargetChangeState,\n    /** The target IDs that were added/removed/set. */\n    public targetIds: TargetId[],\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    public resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING,\n    /** An RPC error indicating why the watch failed. */\n    public cause: FirestoreError | null = null\n  ) {}\n}\n\n/** Tracks the internal state of a Watch target. */\nclass TargetState {\n  /**\n   * The number of pending responses (adds or removes) that we are waiting on.\n   * We only consider targets active that have no pending responses.\n   */\n  private pendingResponses = 0;\n\n  /**\n   * Keeps track of the document changes since the last raised snapshot.\n   *\n   * These changes are continuously updated as we receive document updates and\n   * always reflect the current set of changes against the last issued snapshot.\n   */\n  private documentChanges: SortedMap<\n    DocumentKey,\n    ChangeType\n  > = snapshotChangesMap();\n\n  /** See public getters for explanations of these fields. */\n  private _resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n  private _current = false;\n\n  /**\n   * Whether this target state should be included in the next snapshot. We\n   * initialize to true so that newly-added targets are included in the next\n   * RemoteEvent.\n   */\n  private _hasPendingChanges = true;\n\n  /**\n   * Whether this target has been marked 'current'.\n   *\n   * 'Current' has special meaning in the RPC protocol: It implies that the\n   * Watch backend has sent us all changes up to the point at which the target\n   * was added and that the target is consistent with the rest of the watch\n   * stream.\n   */\n  get current(): boolean {\n    return this._current;\n  }\n\n  /** The last resume token sent to us for this target. */\n  get resumeToken(): ByteString {\n    return this._resumeToken;\n  }\n\n  /** Whether this target has pending target adds or target removes. */\n  get isPending(): boolean {\n    return this.pendingResponses !== 0;\n  }\n\n  /** Whether we have modified any state that should trigger a snapshot. */\n  get hasPendingChanges(): boolean {\n    return this._hasPendingChanges;\n  }\n\n  /**\n   * Applies the resume token to the TargetChange, but only when it has a new\n   * value. Empty resumeTokens are discarded.\n   */\n  updateResumeToken(resumeToken: ByteString): void {\n    if (resumeToken.approximateByteSize() > 0) {\n      this._hasPendingChanges = true;\n      this._resumeToken = resumeToken;\n    }\n  }\n\n  /**\n   * Creates a target change from the current set of changes.\n   *\n   * To reset the document changes after raising this snapshot, call\n   * `clearPendingChanges()`.\n   */\n  toTargetChange(): TargetChange {\n    let addedDocuments = documentKeySet();\n    let modifiedDocuments = documentKeySet();\n    let removedDocuments = documentKeySet();\n\n    this.documentChanges.forEach((key, changeType) => {\n      switch (changeType) {\n        case ChangeType.Added:\n          addedDocuments = addedDocuments.add(key);\n          break;\n        case ChangeType.Modified:\n          modifiedDocuments = modifiedDocuments.add(key);\n          break;\n        case ChangeType.Removed:\n          removedDocuments = removedDocuments.add(key);\n          break;\n        default:\n          fail('Encountered invalid change type: ' + changeType);\n      }\n    });\n\n    return new TargetChange(\n      this._resumeToken,\n      this._current,\n      addedDocuments,\n      modifiedDocuments,\n      removedDocuments\n    );\n  }\n\n  /**\n   * Resets the document changes and sets `hasPendingChanges` to false.\n   */\n  clearPendingChanges(): void {\n    this._hasPendingChanges = false;\n    this.documentChanges = snapshotChangesMap();\n  }\n\n  addDocumentChange(key: DocumentKey, changeType: ChangeType): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.insert(key, changeType);\n  }\n\n  removeDocumentChange(key: DocumentKey): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.remove(key);\n  }\n\n  recordPendingTargetRequest(): void {\n    this.pendingResponses += 1;\n  }\n\n  recordTargetResponse(): void {\n    this.pendingResponses -= 1;\n  }\n\n  markCurrent(): void {\n    this._hasPendingChanges = true;\n    this._current = true;\n  }\n}\n\n/**\n * Interface implemented by RemoteStore to expose target metadata to the\n * WatchChangeAggregator.\n */\nexport interface TargetMetadataProvider {\n  /**\n   * Returns the set of remote document keys for the given target ID as of the\n   * last raised snapshot.\n   */\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet;\n\n  /**\n   * Returns the TargetData for an active target ID or 'null' if this target\n   * has become inactive\n   */\n  getTargetDataForTarget(targetId: TargetId): TargetData | null;\n}\n\nconst LOG_TAG = 'WatchChangeAggregator';\n\n/**\n * A helper class to accumulate watch changes into a RemoteEvent.\n */\nexport class WatchChangeAggregator {\n  constructor(private metadataProvider: TargetMetadataProvider) {}\n\n  /** The internal state of all tracked targets. */\n  private targetStates = new Map<TargetId, TargetState>();\n\n  /** Keeps track of the documents to update since the last raised snapshot. */\n  private pendingDocumentUpdates = maybeDocumentMap();\n\n  /** A mapping of document keys to their set of target IDs. */\n  private pendingDocumentTargetMapping = documentTargetMap();\n\n  /**\n   * A list of targets with existence filter mismatches. These targets are\n   * known to be inconsistent and their listens needs to be re-established by\n   * RemoteStore.\n   */\n  private pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n  /**\n   * Processes and adds the DocumentWatchChange to the current set of changes.\n   */\n  handleDocumentChange(docChange: DocumentWatchChange): void {\n    for (const targetId of docChange.updatedTargetIds) {\n      if (docChange.newDoc instanceof Document) {\n        this.addDocumentToTarget(targetId, docChange.newDoc);\n      } else if (docChange.newDoc instanceof NoDocument) {\n        this.removeDocumentFromTarget(\n          targetId,\n          docChange.key,\n          docChange.newDoc\n        );\n      }\n    }\n\n    for (const targetId of docChange.removedTargetIds) {\n      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n    }\n  }\n\n  /** Processes and adds the WatchTargetChange to the current set of changes. */\n  handleTargetChange(targetChange: WatchTargetChange): void {\n    this.forEachTarget(targetChange, targetId => {\n      const targetState = this.ensureTargetState(targetId);\n      switch (targetChange.state) {\n        case WatchTargetChangeState.NoChange:\n          if (this.isActiveTarget(targetId)) {\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Added:\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            // We have a freshly added target, so we need to reset any state\n            // that we had previously. This can happen e.g. when remove and add\n            // back a target for existence filter mismatches.\n            targetState.clearPendingChanges();\n          }\n          targetState.updateResumeToken(targetChange.resumeToken);\n          break;\n        case WatchTargetChangeState.Removed:\n          // We need to keep track of removed targets to we can post-filter and\n          // remove any target changes.\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            this.removeTarget(targetId);\n          }\n          debugAssert(\n            !targetChange.cause,\n            'WatchChangeAggregator does not handle errored targets'\n          );\n          break;\n        case WatchTargetChangeState.Current:\n          if (this.isActiveTarget(targetId)) {\n            targetState.markCurrent();\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Reset:\n          if (this.isActiveTarget(targetId)) {\n            // Reset the target and synthesizes removes for all existing\n            // documents. The backend will re-add any documents that still\n            // match the target before it sends the next global snapshot.\n            this.resetTarget(targetId);\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        default:\n          fail('Unknown target watch change state: ' + targetChange.state);\n      }\n    });\n  }\n\n  /**\n   * Iterates over all targetIds that the watch change applies to: either the\n   * targetIds explicitly listed in the change or the targetIds of all currently\n   * active targets.\n   */\n  forEachTarget(\n    targetChange: WatchTargetChange,\n    fn: (targetId: TargetId) => void\n  ): void {\n    if (targetChange.targetIds.length > 0) {\n      targetChange.targetIds.forEach(fn);\n    } else {\n      this.targetStates.forEach((_, targetId) => {\n        if (this.isActiveTarget(targetId)) {\n          fn(targetId);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handles existence filters and synthesizes deletes for filter mismatches.\n   * Targets that are invalidated by filter mismatches are added to\n   * `pendingTargetResets`.\n   */\n  handleExistenceFilter(watchChange: ExistenceFilterChange): void {\n    const targetId = watchChange.targetId;\n    const expectedCount = watchChange.existenceFilter.count;\n\n    const targetData = this.targetDataForActiveTarget(targetId);\n    if (targetData) {\n      const target = targetData.target;\n      if (isDocumentTarget(target)) {\n        if (expectedCount === 0) {\n          // The existence filter told us the document does not exist. We deduce\n          // that this document does not exist and apply a deleted document to\n          // our updates. Without applying this deleted document there might be\n          // another query that will raise this document as part of a snapshot\n          // until it is resolved, essentially exposing inconsistency between\n          // queries.\n          const key = new DocumentKey(target.path);\n          this.removeDocumentFromTarget(\n            targetId,\n            key,\n            new NoDocument(key, SnapshotVersion.min())\n          );\n        } else {\n          hardAssert(\n            expectedCount === 1,\n            'Single document existence filter with count: ' + expectedCount\n          );\n        }\n      } else {\n        const currentSize = this.getCurrentDocumentCountForTarget(targetId);\n        if (currentSize !== expectedCount) {\n          // Existence filter mismatch: We reset the mapping and raise a new\n          // snapshot with `isFromCache:true`.\n          this.resetTarget(targetId);\n          this.pendingTargetResets = this.pendingTargetResets.add(targetId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Converts the currently accumulated state into a remote event at the\n   * provided snapshot version. Resets the accumulated changes before returning.\n   */\n  createRemoteEvent(snapshotVersion: SnapshotVersion): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n\n    this.targetStates.forEach((targetState, targetId) => {\n      const targetData = this.targetDataForActiveTarget(targetId);\n      if (targetData) {\n        if (targetState.current && isDocumentTarget(targetData.target)) {\n          // Document queries for document that don't exist can produce an empty\n          // result set. To update our local cache, we synthesize a document\n          // delete if we have not previously received the document. This\n          // resolves the limbo state of the document, removing it from\n          // limboDocumentRefs.\n          //\n          // TODO(dimond): Ideally we would have an explicit lookup target\n          // instead resulting in an explicit delete message and we could\n          // remove this special logic.\n          const key = new DocumentKey(targetData.target.path);\n          if (\n            this.pendingDocumentUpdates.get(key) === null &&\n            !this.targetContainsDocument(targetId, key)\n          ) {\n            this.removeDocumentFromTarget(\n              targetId,\n              key,\n              new NoDocument(key, snapshotVersion)\n            );\n          }\n        }\n\n        if (targetState.hasPendingChanges) {\n          targetChanges.set(targetId, targetState.toTargetChange());\n          targetState.clearPendingChanges();\n        }\n      }\n    });\n\n    let resolvedLimboDocuments = documentKeySet();\n\n    // We extract the set of limbo-only document updates as the GC logic\n    // special-cases documents that do not appear in the target cache.\n    //\n    // TODO(gsoltis): Expand on this comment once GC is available in the JS\n    // client.\n    this.pendingDocumentTargetMapping.forEach((key, targets) => {\n      let isOnlyLimboTarget = true;\n\n      targets.forEachWhile(targetId => {\n        const targetData = this.targetDataForActiveTarget(targetId);\n        if (\n          targetData &&\n          targetData.purpose !== TargetPurpose.LimboResolution\n        ) {\n          isOnlyLimboTarget = false;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (isOnlyLimboTarget) {\n        resolvedLimboDocuments = resolvedLimboDocuments.add(key);\n      }\n    });\n\n    const remoteEvent = new RemoteEvent(\n      snapshotVersion,\n      targetChanges,\n      this.pendingTargetResets,\n      this.pendingDocumentUpdates,\n      resolvedLimboDocuments\n    );\n\n    this.pendingDocumentUpdates = maybeDocumentMap();\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    this.pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n    return remoteEvent;\n  }\n\n  /**\n   * Adds the provided document to the internal list of document updates and\n   * its document key to the given target's mapping.\n   */\n  // Visible for testing.\n  addDocumentToTarget(targetId: TargetId, document: MaybeDocument): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const changeType = this.targetContainsDocument(targetId, document.key)\n      ? ChangeType.Modified\n      : ChangeType.Added;\n\n    const targetState = this.ensureTargetState(targetId);\n    targetState.addDocumentChange(document.key, changeType);\n\n    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n      document.key,\n      document\n    );\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      document.key,\n      this.ensureDocumentTargetMapping(document.key).add(targetId)\n    );\n  }\n\n  /**\n   * Removes the provided document from the target mapping. If the\n   * document no longer matches the target, but the document's state is still\n   * known (e.g. we know that the document was deleted or we received the change\n   * that caused the filter mismatch), the new document can be provided\n   * to update the remote document cache.\n   */\n  // Visible for testing.\n  removeDocumentFromTarget(\n    targetId: TargetId,\n    key: DocumentKey,\n    updatedDocument: MaybeDocument | null\n  ): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const targetState = this.ensureTargetState(targetId);\n    if (this.targetContainsDocument(targetId, key)) {\n      targetState.addDocumentChange(key, ChangeType.Removed);\n    } else {\n      // The document may have entered and left the target before we raised a\n      // snapshot, so we can just ignore the change.\n      targetState.removeDocumentChange(key);\n    }\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      key,\n      this.ensureDocumentTargetMapping(key).delete(targetId)\n    );\n\n    if (updatedDocument) {\n      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n        key,\n        updatedDocument\n      );\n    }\n  }\n\n  removeTarget(targetId: TargetId): void {\n    this.targetStates.delete(targetId);\n  }\n\n  /**\n   * Returns the current count of documents in the target. This includes both\n   * the number of documents that the LocalStore considers to be part of the\n   * target as well as any accumulated changes.\n   */\n  private getCurrentDocumentCountForTarget(targetId: TargetId): number {\n    const targetState = this.ensureTargetState(targetId);\n    const targetChange = targetState.toTargetChange();\n    return (\n      this.metadataProvider.getRemoteKeysForTarget(targetId).size +\n      targetChange.addedDocuments.size -\n      targetChange.removedDocuments.size\n    );\n  }\n\n  /**\n   * Increment the number of acks needed from watch before we can consider the\n   * server to be 'in-sync' with the client's active targets.\n   */\n  recordPendingTargetRequest(targetId: TargetId): void {\n    // For each request we get we need to record we need a response for it.\n    const targetState = this.ensureTargetState(targetId);\n    targetState.recordPendingTargetRequest();\n  }\n\n  private ensureTargetState(targetId: TargetId): TargetState {\n    let result = this.targetStates.get(targetId);\n    if (!result) {\n      result = new TargetState();\n      this.targetStates.set(targetId, result);\n    }\n    return result;\n  }\n\n  private ensureDocumentTargetMapping(key: DocumentKey): SortedSet<TargetId> {\n    let targetMapping = this.pendingDocumentTargetMapping.get(key);\n\n    if (!targetMapping) {\n      targetMapping = new SortedSet<TargetId>(primitiveComparator);\n      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n        key,\n        targetMapping\n      );\n    }\n\n    return targetMapping;\n  }\n\n  /**\n   * Verifies that the user is still interested in this target (by calling\n   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs\n   * from watch.\n   */\n  protected isActiveTarget(targetId: TargetId): boolean {\n    const targetActive = this.targetDataForActiveTarget(targetId) !== null;\n    if (!targetActive) {\n      logDebug(LOG_TAG, 'Detected inactive target', targetId);\n    }\n    return targetActive;\n  }\n\n  /**\n   * Returns the TargetData for an active target (i.e. a target that the user\n   * is still interested in that has no outstanding target change requests).\n   */\n  protected targetDataForActiveTarget(targetId: TargetId): TargetData | null {\n    const targetState = this.targetStates.get(targetId);\n    return targetState && targetState.isPending\n      ? null\n      : this.metadataProvider.getTargetDataForTarget(targetId);\n  }\n\n  /**\n   * Resets the state of a Watch target to its initial state (e.g. sets\n   * 'current' to false, clears the resume token and removes its target mapping\n   * from all documents).\n   */\n  private resetTarget(targetId: TargetId): void {\n    debugAssert(\n      !this.targetStates.get(targetId)!.isPending,\n      'Should only reset active targets'\n    );\n    this.targetStates.set(targetId, new TargetState());\n\n    // Trigger removal for any documents currently mapped to this target.\n    // These removals will be part of the initial snapshot if Watch does not\n    // resend these documents.\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    existingKeys.forEach(key => {\n      this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/ null);\n    });\n  }\n  /**\n   * Returns whether the LocalStore considers the document to be part of the\n   * specified target.\n   */\n  private targetContainsDocument(\n    targetId: TargetId,\n    key: DocumentKey\n  ): boolean {\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    return existingKeys.has(key);\n  }\n}\n\nfunction documentTargetMap(): SortedMap<DocumentKey, SortedSet<TargetId>> {\n  return new SortedMap<DocumentKey, SortedSet<TargetId>>(\n    DocumentKey.comparator\n  );\n}\n\nfunction snapshotChangesMap(): SortedMap<DocumentKey, ChangeType> {\n  return new SortedMap<DocumentKey, ChangeType>(DocumentKey.comparator);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Value as ProtoValue,\n  MapValue as ProtoMapValue\n} from '../protos/firestore_proto_api';\nimport { Timestamp } from '../api/timestamp';\nimport { normalizeTimestamp } from './values';\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\n\nconst SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\nconst TYPE_KEY = '__type__';\nconst PREVIOUS_VALUE_KEY = '__previous_value__';\nconst LOCAL_WRITE_TIME_KEY = '__local_write_time__';\n\nexport function isServerTimestamp(value: ProtoValue | null): boolean {\n  const type = (value?.mapValue?.fields || {})[TYPE_KEY]?.stringValue;\n  return type === SERVER_TIMESTAMP_SENTINEL;\n}\n\n/**\n * Creates a new ServerTimestamp proto value (using the internal format).\n */\nexport function serverTimestamp(\n  localWriteTime: Timestamp,\n  previousValue: ProtoValue | null\n): ProtoValue {\n  const mapValue: ProtoMapValue = {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: SERVER_TIMESTAMP_SENTINEL\n      },\n      [LOCAL_WRITE_TIME_KEY]: {\n        timestampValue: {\n          seconds: localWriteTime.seconds,\n          nanos: localWriteTime.nanoseconds\n        }\n      }\n    }\n  };\n\n  if (previousValue) {\n    mapValue.fields![PREVIOUS_VALUE_KEY] = previousValue;\n  }\n\n  return { mapValue };\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nexport function getPreviousValue(value: ProtoValue): ProtoValue | null {\n  const previousValue = value.mapValue!.fields![PREVIOUS_VALUE_KEY];\n\n  if (isServerTimestamp(previousValue)) {\n    return getPreviousValue(previousValue);\n  }\n  return previousValue;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */\nexport function getLocalWriteTime(value: ProtoValue): Timestamp {\n  const localWriteTime = normalizeTimestamp(\n    value.mapValue!.fields![LOCAL_WRITE_TIME_KEY].timestampValue!\n  );\n  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ArrayValue,\n  LatLng,\n  MapValue,\n  Timestamp,\n  Value\n} from '../protos/firestore_proto_api';\n\nimport { TypeOrder } from './object_value';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach, objectSize } from '../util/obj';\nimport { ByteString } from '../util/byte_string';\nimport { isNegativeZero } from '../util/types';\nimport { DocumentKey } from './document_key';\nimport { arrayEquals, primitiveComparator } from '../util/misc';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  getLocalWriteTime,\n  getPreviousValue,\n  isServerTimestamp\n} from './server_timestamps';\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nconst ISO_TIMESTAMP_REG_EXP = new RegExp(\n  /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/\n);\n\n/** Extracts the backend's type order for the provided value. */\nexport function typeOrder(value: Value): TypeOrder {\n  if ('nullValue' in value) {\n    return TypeOrder.NullValue;\n  } else if ('booleanValue' in value) {\n    return TypeOrder.BooleanValue;\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return TypeOrder.NumberValue;\n  } else if ('timestampValue' in value) {\n    return TypeOrder.TimestampValue;\n  } else if ('stringValue' in value) {\n    return TypeOrder.StringValue;\n  } else if ('bytesValue' in value) {\n    return TypeOrder.BlobValue;\n  } else if ('referenceValue' in value) {\n    return TypeOrder.RefValue;\n  } else if ('geoPointValue' in value) {\n    return TypeOrder.GeoPointValue;\n  } else if ('arrayValue' in value) {\n    return TypeOrder.ArrayValue;\n  } else if ('mapValue' in value) {\n    if (isServerTimestamp(value)) {\n      return TypeOrder.ServerTimestampValue;\n    }\n    return TypeOrder.ObjectValue;\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */\nexport function valueEquals(left: Value, right: Value): boolean {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return false;\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return true;\n    case TypeOrder.BooleanValue:\n      return left.booleanValue === right.booleanValue;\n    case TypeOrder.ServerTimestampValue:\n      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\n    case TypeOrder.TimestampValue:\n      return timestampEquals(left, right);\n    case TypeOrder.StringValue:\n      return left.stringValue === right.stringValue;\n    case TypeOrder.BlobValue:\n      return blobEquals(left, right);\n    case TypeOrder.RefValue:\n      return left.referenceValue === right.referenceValue;\n    case TypeOrder.GeoPointValue:\n      return geoPointEquals(left, right);\n    case TypeOrder.NumberValue:\n      return numberEquals(left, right);\n    case TypeOrder.ArrayValue:\n      return arrayEquals(\n        left.arrayValue!.values || [],\n        right.arrayValue!.values || [],\n        valueEquals\n      );\n    case TypeOrder.ObjectValue:\n      return objectEquals(left, right);\n    default:\n      return fail('Unexpected value type: ' + JSON.stringify(left));\n  }\n}\n\nfunction timestampEquals(left: Value, right: Value): boolean {\n  if (\n    typeof left.timestampValue === 'string' &&\n    typeof right.timestampValue === 'string' &&\n    left.timestampValue.length === right.timestampValue.length\n  ) {\n    // Use string equality for ISO 8601 timestamps\n    return left.timestampValue === right.timestampValue;\n  }\n\n  const leftTimestamp = normalizeTimestamp(left.timestampValue!);\n  const rightTimestamp = normalizeTimestamp(right.timestampValue!);\n  return (\n    leftTimestamp.seconds === rightTimestamp.seconds &&\n    leftTimestamp.nanos === rightTimestamp.nanos\n  );\n}\n\nfunction geoPointEquals(left: Value, right: Value): boolean {\n  return (\n    normalizeNumber(left.geoPointValue!.latitude) ===\n      normalizeNumber(right.geoPointValue!.latitude) &&\n    normalizeNumber(left.geoPointValue!.longitude) ===\n      normalizeNumber(right.geoPointValue!.longitude)\n  );\n}\n\nfunction blobEquals(left: Value, right: Value): boolean {\n  return normalizeByteString(left.bytesValue!).isEqual(\n    normalizeByteString(right.bytesValue!)\n  );\n}\n\nexport function numberEquals(left: Value, right: Value): boolean {\n  if ('integerValue' in left && 'integerValue' in right) {\n    return (\n      normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue)\n    );\n  } else if ('doubleValue' in left && 'doubleValue' in right) {\n    const n1 = normalizeNumber(left.doubleValue!);\n    const n2 = normalizeNumber(right.doubleValue!);\n\n    if (n1 === n2) {\n      return isNegativeZero(n1) === isNegativeZero(n2);\n    } else {\n      return isNaN(n1) && isNaN(n2);\n    }\n  }\n\n  return false;\n}\n\nfunction objectEquals(left: Value, right: Value): boolean {\n  const leftMap = left.mapValue!.fields || {};\n  const rightMap = right.mapValue!.fields || {};\n\n  if (objectSize(leftMap) !== objectSize(rightMap)) {\n    return false;\n  }\n\n  for (const key in leftMap) {\n    if (leftMap.hasOwnProperty(key)) {\n      if (\n        rightMap[key] === undefined ||\n        !valueEquals(leftMap[key], rightMap[key])\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/** Returns true if the ArrayValue contains the specified element. */\nexport function arrayValueContains(\n  haystack: ArrayValue,\n  needle: Value\n): boolean {\n  return (\n    (haystack.values || []).find(v => valueEquals(v, needle)) !== undefined\n  );\n}\n\nexport function valueCompare(left: Value, right: Value): number {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n\n  if (leftType !== rightType) {\n    return primitiveComparator(leftType, rightType);\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return 0;\n    case TypeOrder.BooleanValue:\n      return primitiveComparator(left.booleanValue!, right.booleanValue!);\n    case TypeOrder.NumberValue:\n      return compareNumbers(left, right);\n    case TypeOrder.TimestampValue:\n      return compareTimestamps(left.timestampValue!, right.timestampValue!);\n    case TypeOrder.ServerTimestampValue:\n      return compareTimestamps(\n        getLocalWriteTime(left),\n        getLocalWriteTime(right)\n      );\n    case TypeOrder.StringValue:\n      return primitiveComparator(left.stringValue!, right.stringValue!);\n    case TypeOrder.BlobValue:\n      return compareBlobs(left.bytesValue!, right.bytesValue!);\n    case TypeOrder.RefValue:\n      return compareReferences(left.referenceValue!, right.referenceValue!);\n    case TypeOrder.GeoPointValue:\n      return compareGeoPoints(left.geoPointValue!, right.geoPointValue!);\n    case TypeOrder.ArrayValue:\n      return compareArrays(left.arrayValue!, right.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return compareMaps(left.mapValue!, right.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + leftType);\n  }\n}\n\nfunction compareNumbers(left: Value, right: Value): number {\n  const leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\n  const rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\n\n  if (leftNumber < rightNumber) {\n    return -1;\n  } else if (leftNumber > rightNumber) {\n    return 1;\n  } else if (leftNumber === rightNumber) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(leftNumber)) {\n      return isNaN(rightNumber) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\nfunction compareTimestamps(left: Timestamp, right: Timestamp): number {\n  if (\n    typeof left === 'string' &&\n    typeof right === 'string' &&\n    left.length === right.length\n  ) {\n    return primitiveComparator(left, right);\n  }\n\n  const leftTimestamp = normalizeTimestamp(left);\n  const rightTimestamp = normalizeTimestamp(right);\n\n  const comparison = primitiveComparator(\n    leftTimestamp.seconds,\n    rightTimestamp.seconds\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\n}\n\nfunction compareReferences(leftPath: string, rightPath: string): number {\n  const leftSegments = leftPath.split('/');\n  const rightSegments = rightPath.split('/');\n  for (let i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\n    const comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return primitiveComparator(leftSegments.length, rightSegments.length);\n}\n\nfunction compareGeoPoints(left: LatLng, right: LatLng): number {\n  const comparison = primitiveComparator(\n    normalizeNumber(left.latitude),\n    normalizeNumber(right.latitude)\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(\n    normalizeNumber(left.longitude),\n    normalizeNumber(right.longitude)\n  );\n}\n\nfunction compareBlobs(\n  left: string | Uint8Array,\n  right: string | Uint8Array\n): number {\n  const leftBytes = normalizeByteString(left);\n  const rightBytes = normalizeByteString(right);\n  return leftBytes.compareTo(rightBytes);\n}\n\nfunction compareArrays(left: ArrayValue, right: ArrayValue): number {\n  const leftArray = left.values || [];\n  const rightArray = right.values || [];\n\n  for (let i = 0; i < leftArray.length && i < rightArray.length; ++i) {\n    const compare = valueCompare(leftArray[i], rightArray[i]);\n    if (compare) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftArray.length, rightArray.length);\n}\n\nfunction compareMaps(left: MapValue, right: MapValue): number {\n  const leftMap = left.fields || {};\n  const leftKeys = Object.keys(leftMap);\n  const rightMap = right.fields || {};\n  const rightKeys = Object.keys(rightMap);\n\n  // Even though MapValues are likely sorted correctly based on their insertion\n  // order (e.g. when received from the backend), local modifications can bring\n  // elements out of order. We need to re-sort the elements to ensure that\n  // canonical IDs are independent of insertion order.\n  leftKeys.sort();\n  rightKeys.sort();\n\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\n    const keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\n    if (keyCompare !== 0) {\n      return keyCompare;\n    }\n    const compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n\n  return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n\n/**\n * Generates the canonical ID for the provided field value (as used in Target\n * serialization).\n */\nexport function canonicalId(value: Value): string {\n  return canonifyValue(value);\n}\n\nfunction canonifyValue(value: Value): string {\n  if ('nullValue' in value) {\n    return 'null';\n  } else if ('booleanValue' in value) {\n    return '' + value.booleanValue!;\n  } else if ('integerValue' in value) {\n    return '' + value.integerValue!;\n  } else if ('doubleValue' in value) {\n    return '' + value.doubleValue!;\n  } else if ('timestampValue' in value) {\n    return canonifyTimestamp(value.timestampValue!);\n  } else if ('stringValue' in value) {\n    return value.stringValue!;\n  } else if ('bytesValue' in value) {\n    return canonifyByteString(value.bytesValue!);\n  } else if ('referenceValue' in value) {\n    return canonifyReference(value.referenceValue!);\n  } else if ('geoPointValue' in value) {\n    return canonifyGeoPoint(value.geoPointValue!);\n  } else if ('arrayValue' in value) {\n    return canonifyArray(value.arrayValue!);\n  } else if ('mapValue' in value) {\n    return canonifyMap(value.mapValue!);\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction canonifyByteString(byteString: string | Uint8Array): string {\n  return normalizeByteString(byteString).toBase64();\n}\n\nfunction canonifyTimestamp(timestamp: Timestamp): string {\n  const normalizedTimestamp = normalizeTimestamp(timestamp);\n  return `time(${normalizedTimestamp.seconds},${normalizedTimestamp.nanos})`;\n}\n\nfunction canonifyGeoPoint(geoPoint: LatLng): string {\n  return `geo(${geoPoint.latitude},${geoPoint.longitude})`;\n}\n\nfunction canonifyReference(referenceValue: string): string {\n  return DocumentKey.fromName(referenceValue).toString();\n}\n\nfunction canonifyMap(mapValue: MapValue): string {\n  // Iteration order in JavaScript is not guaranteed. To ensure that we generate\n  // matching canonical IDs for identical maps, we need to sort the keys.\n  const sortedKeys = Object.keys(mapValue.fields || {}).sort();\n\n  let result = '{';\n  let first = true;\n  for (const key of sortedKeys) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += `${key}:${canonifyValue(mapValue.fields![key])}`;\n  }\n  return result + '}';\n}\n\nfunction canonifyArray(arrayValue: ArrayValue): string {\n  let result = '[';\n  let first = true;\n  for (const value of arrayValue.values || []) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += canonifyValue(value);\n  }\n  return result + ']';\n}\n\n/**\n * Returns an approximate (and wildly inaccurate) in-memory size for the field\n * value.\n *\n * The memory size takes into account only the actual user data as it resides\n * in memory and ignores object overhead.\n */\nexport function estimateByteSize(value: Value): number {\n  switch (typeOrder(value)) {\n    case TypeOrder.NullValue:\n      return 4;\n    case TypeOrder.BooleanValue:\n      return 4;\n    case TypeOrder.NumberValue:\n      return 8;\n    case TypeOrder.TimestampValue:\n      // Timestamps are made up of two distinct numbers (seconds + nanoseconds)\n      return 16;\n    case TypeOrder.ServerTimestampValue:\n      const previousValue = getPreviousValue(value);\n      return previousValue ? 16 + estimateByteSize(previousValue) : 16;\n    case TypeOrder.StringValue:\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:\n      // \"JavaScript's String type is [...] a set of elements of 16-bit unsigned\n      // integer values\"\n      return value.stringValue!.length * 2;\n    case TypeOrder.BlobValue:\n      return normalizeByteString(value.bytesValue!).approximateByteSize();\n    case TypeOrder.RefValue:\n      return value.referenceValue!.length;\n    case TypeOrder.GeoPointValue:\n      // GeoPoints are made up of two distinct numbers (latitude + longitude)\n      return 16;\n    case TypeOrder.ArrayValue:\n      return estimateArrayByteSize(value.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return estimateMapByteSize(value.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction estimateMapByteSize(mapValue: MapValue): number {\n  let size = 0;\n  forEach(mapValue.fields || {}, (key, val) => {\n    size += key.length + estimateByteSize(val);\n  });\n  return size;\n}\n\nfunction estimateArrayByteSize(arrayValue: ArrayValue): number {\n  return (arrayValue.values || []).reduce(\n    (previousSize, value) => previousSize + estimateByteSize(value),\n    0\n  );\n}\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nexport function normalizeTimestamp(\n  date: Timestamp\n): { seconds: number; nanos: number } {\n  hardAssert(!!date, 'Cannot normalize null or undefined timestamp.');\n\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (typeof date === 'string') {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n\n    // Parse the nanos right out of the string.\n    let nanos = 0;\n    const fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\n    hardAssert(!!fraction, 'invalid timestamp: ' + date);\n    if (fraction[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let nanoStr = fraction[1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = Number(nanoStr);\n    }\n\n    // Parse the date to get the seconds.\n    const parsedDate = new Date(date);\n    const seconds = Math.floor(parsedDate.getTime() / 1000);\n\n    return { seconds, nanos };\n  } else {\n    // TODO(b/37282237): Use strings for Proto3 timestamps\n    // assert(!this.options.useProto3Json,\n    //   'The timestamp instance format requires Proto JS.');\n    const seconds = normalizeNumber(date.seconds);\n    const nanos = normalizeNumber(date.nanos);\n    return { seconds, nanos };\n  }\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nexport function normalizeNumber(value: number | string | undefined): number {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return Number(value);\n  } else {\n    return 0;\n  }\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */\nexport function normalizeByteString(blob: string | Uint8Array): ByteString {\n  if (typeof blob === 'string') {\n    return ByteString.fromBase64String(blob);\n  } else {\n    return ByteString.fromUint8Array(blob);\n  }\n}\n\n/** Returns a reference value for the provided database and key. */\nexport function refValue(databaseId: DatabaseId, key: DocumentKey): Value {\n  return {\n    referenceValue: `projects/${databaseId.projectId}/databases/${\n      databaseId.database\n    }/documents/${key.path.canonicalString()}`\n  };\n}\n\n/** Returns true if `value` is an IntegerValue . */\nexport function isInteger(\n  value?: Value | null\n): value is { integerValue: string | number } {\n  return !!value && 'integerValue' in value;\n}\n\n/** Returns true if `value` is a DoubleValue. */\nexport function isDouble(\n  value?: Value | null\n): value is { doubleValue: string | number } {\n  return !!value && 'doubleValue' in value;\n}\n\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\nexport function isNumber(value?: Value | null): boolean {\n  return isInteger(value) || isDouble(value);\n}\n\n/** Returns true if `value` is an ArrayValue. */\nexport function isArray(\n  value?: Value | null\n): value is { arrayValue: ArrayValue } {\n  return !!value && 'arrayValue' in value;\n}\n\n/** Returns true if `value` is a ReferenceValue. */\nexport function isReferenceValue(\n  value?: Value | null\n): value is { referenceValue: string } {\n  return !!value && 'referenceValue' in value;\n}\n\n/** Returns true if `value` is a NullValue. */\nexport function isNullValue(\n  value?: Value | null\n): value is { nullValue: 'NULL_VALUE' } {\n  return !!value && 'nullValue' in value;\n}\n\n/** Returns true if `value` is NaN. */\nexport function isNanValue(\n  value?: Value | null\n): value is { doubleValue: 'NaN' | number } {\n  return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */\nexport function isMapValue(\n  value?: Value | null\n): value is { mapValue: MapValue } {\n  return !!value && 'mapValue' in value;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  LimitType,\n  newQuery,\n  newQueryForPath,\n  Operator,\n  OrderBy,\n  queryToTarget\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { isDocumentTarget, Target } from '../core/target';\nimport { TargetId } from '../core/types';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ObjectValue } from '../model/object_value';\nimport {\n  DeleteMutation,\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  MutationResult,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation,\n  VerifyMutation\n} from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport {\n  ApiClientObjectMap as ProtoApiClientObjectMap,\n  BatchGetDocumentsResponse as ProtoBatchGetDocumentsResponse,\n  Cursor as ProtoCursor,\n  Document as ProtoDocument,\n  DocumentMask as ProtoDocumentMask,\n  DocumentsTarget as ProtoDocumentsTarget,\n  FieldFilterOp as ProtoFieldFilterOp,\n  FieldReference as ProtoFieldReference,\n  FieldTransform as ProtoFieldTransform,\n  Filter as ProtoFilter,\n  ListenResponse as ProtoListenResponse,\n  Order as ProtoOrder,\n  OrderDirection as ProtoOrderDirection,\n  Precondition as ProtoPrecondition,\n  QueryTarget as ProtoQueryTarget,\n  Status as ProtoStatus,\n  Target as ProtoTarget,\n  Timestamp as ProtoTimestamp,\n  Value as ProtoValue,\n  Write as ProtoWrite,\n  TargetChangeTargetChangeType as ProtoTargetChangeTargetChangeType,\n  WriteResult as ProtoWriteResult\n} from '../protos/firestore_proto_api';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { ByteString } from '../util/byte_string';\nimport {\n  isNegativeZero,\n  isNullOrUndefined,\n  isSafeInteger\n} from '../util/types';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform,\n  TransformOperation\n} from '../model/transform_operation';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  WatchChange,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { isNanValue, isNullValue, normalizeTimestamp } from '../model/values';\n\nconst DIRECTIONS = (() => {\n  const dirs: { [dir: string]: ProtoOrderDirection } = {};\n  dirs[Direction.ASCENDING] = 'ASCENDING';\n  dirs[Direction.DESCENDING] = 'DESCENDING';\n  return dirs;\n})();\n\nconst OPERATORS = (() => {\n  const ops: { [op: string]: ProtoFieldFilterOp } = {};\n  ops[Operator.LESS_THAN] = 'LESS_THAN';\n  ops[Operator.LESS_THAN_OR_EQUAL] = 'LESS_THAN_OR_EQUAL';\n  ops[Operator.GREATER_THAN] = 'GREATER_THAN';\n  ops[Operator.GREATER_THAN_OR_EQUAL] = 'GREATER_THAN_OR_EQUAL';\n  ops[Operator.EQUAL] = 'EQUAL';\n  ops[Operator.NOT_EQUAL] = 'NOT_EQUAL';\n  ops[Operator.ARRAY_CONTAINS] = 'ARRAY_CONTAINS';\n  ops[Operator.IN] = 'IN';\n  ops[Operator.NOT_IN] = 'NOT_IN';\n  ops[Operator.ARRAY_CONTAINS_ANY] = 'ARRAY_CONTAINS_ANY';\n  return ops;\n})();\n\nfunction assertPresent(value: unknown, description: string): asserts value {\n  debugAssert(!isNullOrUndefined(value), description + ' is missing');\n}\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nexport class JsonProtoSerializer {\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly useProto3Json: boolean\n  ) {}\n}\n\nfunction fromRpcStatus(status: ProtoStatus): FirestoreError {\n  const code =\n    status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);\n  return new FirestoreError(code, status.message || '');\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\nfunction toInt32Proto(\n  serializer: JsonProtoSerializer,\n  val: number | null\n): number | { value: number } | null {\n  if (serializer.useProto3Json || isNullOrUndefined(val)) {\n    return val;\n  } else {\n    return { value: val };\n  }\n}\n\n/**\n * Returns a number (or null) from a google.protobuf.Int32Value proto.\n */\nfunction fromInt32Proto(\n  val: number | { value: number } | undefined\n): number | null {\n  let result;\n  if (typeof val === 'object') {\n    result = val.value;\n  } else {\n    result = val;\n  }\n  return isNullOrUndefined(result) ? null : result;\n}\n\n/**\n * Returns an IntegerValue for `value`.\n */\nexport function toInteger(value: number): ProtoValue {\n  return { integerValue: '' + value };\n}\n\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\nexport function toDouble(\n  serializer: JsonProtoSerializer,\n  value: number\n): ProtoValue {\n  if (serializer.useProto3Json) {\n    if (isNaN(value)) {\n      return { doubleValue: 'NaN' };\n    } else if (value === Infinity) {\n      return { doubleValue: 'Infinity' };\n    } else if (value === -Infinity) {\n      return { doubleValue: '-Infinity' };\n    }\n  }\n  return { doubleValue: isNegativeZero(value) ? '-0' : value };\n}\n\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nexport function toNumber(\n  serializer: JsonProtoSerializer,\n  value: number\n): ProtoValue {\n  return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);\n}\n\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nexport function toTimestamp(\n  serializer: JsonProtoSerializer,\n  timestamp: Timestamp\n): ProtoTimestamp {\n  if (serializer.useProto3Json) {\n    // Serialize to ISO-8601 date format, but with full nano resolution.\n    // Since JS Date has only millis, let's only use it for the seconds and\n    // then manually add the fractions to the end.\n    const jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\n    // Remove .xxx frac part and Z in the end.\n    const strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\n    // Pad the fraction out to 9 digits (nanos).\n    const nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\n\n    return `${strUntilSeconds}.${nanoStr}Z`;\n  } else {\n    return {\n      seconds: '' + timestamp.seconds,\n      nanos: timestamp.nanoseconds\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n  }\n}\n\nfunction fromTimestamp(date: ProtoTimestamp): Timestamp {\n  const timestamp = normalizeTimestamp(date);\n  return new Timestamp(timestamp.seconds, timestamp.nanos);\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nexport function toBytes(\n  serializer: JsonProtoSerializer,\n  bytes: ByteString\n): string | Uint8Array {\n  if (serializer.useProto3Json) {\n    return bytes.toBase64();\n  } else {\n    return bytes.toUint8Array();\n  }\n}\n\n/**\n * Returns a ByteString based on the proto string value.\n */\nexport function fromBytes(\n  serializer: JsonProtoSerializer,\n  value: string | Uint8Array | undefined\n): ByteString {\n  if (serializer.useProto3Json) {\n    hardAssert(\n      value === undefined || typeof value === 'string',\n      'value must be undefined or a string when using proto3 Json'\n    );\n    return ByteString.fromBase64String(value ? value : '');\n  } else {\n    hardAssert(\n      value === undefined || value instanceof Uint8Array,\n      'value must be undefined or Uint8Array'\n    );\n    return ByteString.fromUint8Array(value ? value : new Uint8Array());\n  }\n}\n\nexport function toVersion(\n  serializer: JsonProtoSerializer,\n  version: SnapshotVersion\n): ProtoTimestamp {\n  return toTimestamp(serializer, version.toTimestamp());\n}\n\nexport function fromVersion(version: ProtoTimestamp): SnapshotVersion {\n  hardAssert(!!version, \"Trying to deserialize version that isn't set\");\n  return SnapshotVersion.fromTimestamp(fromTimestamp(version));\n}\n\nexport function toResourceName(\n  databaseId: DatabaseId,\n  path: ResourcePath\n): string {\n  return fullyQualifiedPrefixPath(databaseId)\n    .child('documents')\n    .child(path)\n    .canonicalString();\n}\n\nfunction fromResourceName(name: string): ResourcePath {\n  const resource = ResourcePath.fromString(name);\n  hardAssert(\n    isValidResourceName(resource),\n    'Tried to deserialize invalid key ' + resource.toString()\n  );\n  return resource;\n}\n\nexport function toName(\n  serializer: JsonProtoSerializer,\n  key: DocumentKey\n): string {\n  return toResourceName(serializer.databaseId, key.path);\n}\n\nexport function fromName(\n  serializer: JsonProtoSerializer,\n  name: string\n): DocumentKey {\n  const resource = fromResourceName(name);\n  hardAssert(\n    resource.get(1) === serializer.databaseId.projectId,\n    'Tried to deserialize key from different project: ' +\n      resource.get(1) +\n      ' vs ' +\n      serializer.databaseId.projectId\n  );\n  hardAssert(\n    (!resource.get(3) && !serializer.databaseId.database) ||\n      resource.get(3) === serializer.databaseId.database,\n    'Tried to deserialize key from different database: ' +\n      resource.get(3) +\n      ' vs ' +\n      serializer.databaseId.database\n  );\n  return new DocumentKey(extractLocalPathFromResourceName(resource));\n}\n\nfunction toQueryPath(\n  serializer: JsonProtoSerializer,\n  path: ResourcePath\n): string {\n  return toResourceName(serializer.databaseId, path);\n}\n\nfunction fromQueryPath(name: string): ResourcePath {\n  const resourceName = fromResourceName(name);\n  // In v1beta1 queries for collections at the root did not have a trailing\n  // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\n  // ability to read the v1beta1 form for compatibility with queries persisted\n  // in the local target cache.\n  if (resourceName.length === 4) {\n    return ResourcePath.emptyPath();\n  }\n  return extractLocalPathFromResourceName(resourceName);\n}\n\nexport function getEncodedDatabaseId(serializer: JsonProtoSerializer): string {\n  const path = new ResourcePath([\n    'projects',\n    serializer.databaseId.projectId,\n    'databases',\n    serializer.databaseId.database\n  ]);\n  return path.canonicalString();\n}\n\nfunction fullyQualifiedPrefixPath(databaseId: DatabaseId): ResourcePath {\n  return new ResourcePath([\n    'projects',\n    databaseId.projectId,\n    'databases',\n    databaseId.database\n  ]);\n}\n\nfunction extractLocalPathFromResourceName(\n  resourceName: ResourcePath\n): ResourcePath {\n  hardAssert(\n    resourceName.length > 4 && resourceName.get(4) === 'documents',\n    'tried to deserialize invalid key ' + resourceName.toString()\n  );\n  return resourceName.popFirst(5);\n}\n\n/** Creates a Document proto from key and fields (but no create/update time) */\nexport function toMutationDocument(\n  serializer: JsonProtoSerializer,\n  key: DocumentKey,\n  fields: ObjectValue\n): ProtoDocument {\n  return {\n    name: toName(serializer, key),\n    fields: fields.proto.mapValue.fields\n  };\n}\n\nexport function toDocument(\n  serializer: JsonProtoSerializer,\n  document: Document\n): ProtoDocument {\n  debugAssert(\n    !document.hasLocalMutations,\n    \"Can't serialize documents with mutations.\"\n  );\n  return {\n    name: toName(serializer, document.key),\n    fields: document.toProto().mapValue.fields,\n    updateTime: toTimestamp(serializer, document.version.toTimestamp())\n  };\n}\n\nexport function fromDocument(\n  serializer: JsonProtoSerializer,\n  document: ProtoDocument,\n  hasCommittedMutations?: boolean\n): Document {\n  const key = fromName(serializer, document.name!);\n  const version = fromVersion(document.updateTime!);\n  const data = new ObjectValue({ mapValue: { fields: document.fields } });\n  return new Document(key, version, data, {\n    hasCommittedMutations: !!hasCommittedMutations\n  });\n}\n\nfunction fromFound(\n  serializer: JsonProtoSerializer,\n  doc: ProtoBatchGetDocumentsResponse\n): Document {\n  hardAssert(\n    !!doc.found,\n    'Tried to deserialize a found document from a missing document.'\n  );\n  assertPresent(doc.found.name, 'doc.found.name');\n  assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n  const key = fromName(serializer, doc.found.name);\n  const version = fromVersion(doc.found.updateTime);\n  const data = new ObjectValue({ mapValue: { fields: doc.found.fields } });\n  return new Document(key, version, data, {});\n}\n\nfunction fromMissing(\n  serializer: JsonProtoSerializer,\n  result: ProtoBatchGetDocumentsResponse\n): NoDocument {\n  hardAssert(\n    !!result.missing,\n    'Tried to deserialize a missing document from a found document.'\n  );\n  hardAssert(\n    !!result.readTime,\n    'Tried to deserialize a missing document without a read time.'\n  );\n  const key = fromName(serializer, result.missing);\n  const version = fromVersion(result.readTime);\n  return new NoDocument(key, version);\n}\n\nexport function fromMaybeDocument(\n  serializer: JsonProtoSerializer,\n  result: ProtoBatchGetDocumentsResponse\n): MaybeDocument {\n  if ('found' in result) {\n    return fromFound(serializer, result);\n  } else if ('missing' in result) {\n    return fromMissing(serializer, result);\n  }\n  return fail('invalid batch get response: ' + JSON.stringify(result));\n}\n\nexport function fromWatchChange(\n  serializer: JsonProtoSerializer,\n  change: ProtoListenResponse\n): WatchChange {\n  let watchChange: WatchChange;\n  if ('targetChange' in change) {\n    assertPresent(change.targetChange, 'targetChange');\n    // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n    // if unset\n    const state = fromWatchTargetChangeState(\n      change.targetChange.targetChangeType || 'NO_CHANGE'\n    );\n    const targetIds: TargetId[] = change.targetChange.targetIds || [];\n\n    const resumeToken = fromBytes(serializer, change.targetChange.resumeToken);\n    const causeProto = change.targetChange!.cause;\n    const cause = causeProto && fromRpcStatus(causeProto);\n    watchChange = new WatchTargetChange(\n      state,\n      targetIds,\n      resumeToken,\n      cause || null\n    );\n  } else if ('documentChange' in change) {\n    assertPresent(change.documentChange, 'documentChange');\n    const entityChange = change.documentChange;\n    assertPresent(entityChange.document, 'documentChange.name');\n    assertPresent(entityChange.document.name, 'documentChange.document.name');\n    assertPresent(\n      entityChange.document.updateTime,\n      'documentChange.document.updateTime'\n    );\n    const key = fromName(serializer, entityChange.document.name);\n    const version = fromVersion(entityChange.document.updateTime);\n    const data = new ObjectValue({\n      mapValue: { fields: entityChange.document.fields }\n    });\n    const doc = new Document(key, version, data, {});\n    const updatedTargetIds = entityChange.targetIds || [];\n    const removedTargetIds = entityChange.removedTargetIds || [];\n    watchChange = new DocumentWatchChange(\n      updatedTargetIds,\n      removedTargetIds,\n      doc.key,\n      doc\n    );\n  } else if ('documentDelete' in change) {\n    assertPresent(change.documentDelete, 'documentDelete');\n    const docDelete = change.documentDelete;\n    assertPresent(docDelete.document, 'documentDelete.document');\n    const key = fromName(serializer, docDelete.document);\n    const version = docDelete.readTime\n      ? fromVersion(docDelete.readTime)\n      : SnapshotVersion.min();\n    const doc = new NoDocument(key, version);\n    const removedTargetIds = docDelete.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n  } else if ('documentRemove' in change) {\n    assertPresent(change.documentRemove, 'documentRemove');\n    const docRemove = change.documentRemove;\n    assertPresent(docRemove.document, 'documentRemove');\n    const key = fromName(serializer, docRemove.document);\n    const removedTargetIds = docRemove.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n  } else if ('filter' in change) {\n    // TODO(dimond): implement existence filter parsing with strategy.\n    assertPresent(change.filter, 'filter');\n    const filter = change.filter;\n    assertPresent(filter.targetId, 'filter.targetId');\n    const count = filter.count || 0;\n    const existenceFilter = new ExistenceFilter(count);\n    const targetId = filter.targetId;\n    watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n  } else {\n    return fail('Unknown change type ' + JSON.stringify(change));\n  }\n  return watchChange;\n}\n\nfunction fromWatchTargetChangeState(\n  state: ProtoTargetChangeTargetChangeType\n): WatchTargetChangeState {\n  if (state === 'NO_CHANGE') {\n    return WatchTargetChangeState.NoChange;\n  } else if (state === 'ADD') {\n    return WatchTargetChangeState.Added;\n  } else if (state === 'REMOVE') {\n    return WatchTargetChangeState.Removed;\n  } else if (state === 'CURRENT') {\n    return WatchTargetChangeState.Current;\n  } else if (state === 'RESET') {\n    return WatchTargetChangeState.Reset;\n  } else {\n    return fail('Got unexpected TargetChange.state: ' + state);\n  }\n}\n\nexport function versionFromListenResponse(\n  change: ProtoListenResponse\n): SnapshotVersion {\n  // We have only reached a consistent snapshot for the entire stream if there\n  // is a read_time set and it applies to all targets (i.e. the list of\n  // targets is empty). The backend is guaranteed to send such responses.\n  if (!('targetChange' in change)) {\n    return SnapshotVersion.min();\n  }\n  const targetChange = change.targetChange!;\n  if (targetChange.targetIds && targetChange.targetIds.length) {\n    return SnapshotVersion.min();\n  }\n  if (!targetChange.readTime) {\n    return SnapshotVersion.min();\n  }\n  return fromVersion(targetChange.readTime);\n}\n\nexport function toMutation(\n  serializer: JsonProtoSerializer,\n  mutation: Mutation\n): ProtoWrite {\n  let result: ProtoWrite;\n  if (mutation instanceof SetMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.value)\n    };\n  } else if (mutation instanceof DeleteMutation) {\n    result = { delete: toName(serializer, mutation.key) };\n  } else if (mutation instanceof PatchMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.data),\n      updateMask: toDocumentMask(mutation.fieldMask)\n    };\n  } else if (mutation instanceof TransformMutation) {\n    result = {\n      transform: {\n        document: toName(serializer, mutation.key),\n        fieldTransforms: mutation.fieldTransforms.map(transform =>\n          toFieldTransform(serializer, transform)\n        )\n      }\n    };\n  } else if (mutation instanceof VerifyMutation) {\n    result = {\n      verify: toName(serializer, mutation.key)\n    };\n  } else {\n    return fail('Unknown mutation type ' + mutation.type);\n  }\n\n  if (!mutation.precondition.isNone) {\n    result.currentDocument = toPrecondition(serializer, mutation.precondition);\n  }\n\n  return result;\n}\n\nexport function fromMutation(\n  serializer: JsonProtoSerializer,\n  proto: ProtoWrite\n): Mutation {\n  const precondition = proto.currentDocument\n    ? fromPrecondition(proto.currentDocument)\n    : Precondition.none();\n\n  if (proto.update) {\n    assertPresent(proto.update.name, 'name');\n    const key = fromName(serializer, proto.update.name);\n    const value = new ObjectValue({\n      mapValue: { fields: proto.update.fields }\n    });\n    if (proto.updateMask) {\n      const fieldMask = fromDocumentMask(proto.updateMask);\n      return new PatchMutation(key, value, fieldMask, precondition);\n    } else {\n      return new SetMutation(key, value, precondition);\n    }\n  } else if (proto.delete) {\n    const key = fromName(serializer, proto.delete);\n    return new DeleteMutation(key, precondition);\n  } else if (proto.transform) {\n    const key = fromName(serializer, proto.transform.document!);\n    const fieldTransforms = proto.transform.fieldTransforms!.map(transform =>\n      fromFieldTransform(serializer, transform)\n    );\n    hardAssert(\n      precondition.exists === true,\n      'Transforms only support precondition \"exists == true\"'\n    );\n    return new TransformMutation(key, fieldTransforms);\n  } else if (proto.verify) {\n    const key = fromName(serializer, proto.verify);\n    return new VerifyMutation(key, precondition);\n  } else {\n    return fail('unknown mutation proto: ' + JSON.stringify(proto));\n  }\n}\n\nfunction toPrecondition(\n  serializer: JsonProtoSerializer,\n  precondition: Precondition\n): ProtoPrecondition {\n  debugAssert(!precondition.isNone, \"Can't serialize an empty precondition\");\n  if (precondition.updateTime !== undefined) {\n    return {\n      updateTime: toVersion(serializer, precondition.updateTime)\n    };\n  } else if (precondition.exists !== undefined) {\n    return { exists: precondition.exists };\n  } else {\n    return fail('Unknown precondition');\n  }\n}\n\nfunction fromPrecondition(precondition: ProtoPrecondition): Precondition {\n  if (precondition.updateTime !== undefined) {\n    return Precondition.updateTime(fromVersion(precondition.updateTime));\n  } else if (precondition.exists !== undefined) {\n    return Precondition.exists(precondition.exists);\n  } else {\n    return Precondition.none();\n  }\n}\n\nfunction fromWriteResult(\n  proto: ProtoWriteResult,\n  commitTime: ProtoTimestamp\n): MutationResult {\n  // NOTE: Deletes don't have an updateTime.\n  let version = proto.updateTime\n    ? fromVersion(proto.updateTime)\n    : fromVersion(commitTime);\n\n  if (version.isEqual(SnapshotVersion.min())) {\n    // The Firestore Emulator currently returns an update time of 0 for\n    // deletes of non-existing documents (rather than null). This breaks the\n    // test \"get deleted doc while offline with source=cache\" as NoDocuments\n    // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\n    // TODO(#2149): Remove this when Emulator is fixed\n    version = fromVersion(commitTime);\n  }\n\n  let transformResults: ProtoValue[] | null = null;\n  if (proto.transformResults && proto.transformResults.length > 0) {\n    transformResults = proto.transformResults;\n  }\n  return new MutationResult(version, transformResults);\n}\n\nexport function fromWriteResults(\n  protos: ProtoWriteResult[] | undefined,\n  commitTime?: ProtoTimestamp\n): MutationResult[] {\n  if (protos && protos.length > 0) {\n    hardAssert(\n      commitTime !== undefined,\n      'Received a write result without a commit time'\n    );\n    return protos.map(proto => fromWriteResult(proto, commitTime));\n  } else {\n    return [];\n  }\n}\n\nfunction toFieldTransform(\n  serializer: JsonProtoSerializer,\n  fieldTransform: FieldTransform\n): ProtoFieldTransform {\n  const transform = fieldTransform.transform;\n  if (transform instanceof ServerTimestampTransform) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      setToServerValue: 'REQUEST_TIME'\n    };\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      appendMissingElements: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      removeAllFromArray: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof NumericIncrementTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      increment: transform.operand\n    };\n  } else {\n    throw fail('Unknown transform: ' + fieldTransform.transform);\n  }\n}\n\nfunction fromFieldTransform(\n  serializer: JsonProtoSerializer,\n  proto: ProtoFieldTransform\n): FieldTransform {\n  let transform: TransformOperation | null = null;\n  if ('setToServerValue' in proto) {\n    hardAssert(\n      proto.setToServerValue === 'REQUEST_TIME',\n      'Unknown server value transform proto: ' + JSON.stringify(proto)\n    );\n    transform = new ServerTimestampTransform();\n  } else if ('appendMissingElements' in proto) {\n    const values = proto.appendMissingElements!.values || [];\n    transform = new ArrayUnionTransformOperation(values);\n  } else if ('removeAllFromArray' in proto) {\n    const values = proto.removeAllFromArray!.values || [];\n    transform = new ArrayRemoveTransformOperation(values);\n  } else if ('increment' in proto) {\n    transform = new NumericIncrementTransformOperation(\n      serializer,\n      proto.increment!\n    );\n  } else {\n    fail('Unknown transform proto: ' + JSON.stringify(proto));\n  }\n  const fieldPath = FieldPath.fromServerFormat(proto.fieldPath!);\n  return new FieldTransform(fieldPath, transform!);\n}\n\nexport function toDocumentsTarget(\n  serializer: JsonProtoSerializer,\n  target: Target\n): ProtoDocumentsTarget {\n  return { documents: [toQueryPath(serializer, target.path)] };\n}\n\nexport function fromDocumentsTarget(\n  documentsTarget: ProtoDocumentsTarget\n): Target {\n  const count = documentsTarget.documents!.length;\n  hardAssert(\n    count === 1,\n    'DocumentsTarget contained other than 1 document: ' + count\n  );\n  const name = documentsTarget.documents![0];\n  return queryToTarget(newQueryForPath(fromQueryPath(name)));\n}\n\nexport function toQueryTarget(\n  serializer: JsonProtoSerializer,\n  target: Target\n): ProtoQueryTarget {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  const result: ProtoQueryTarget = { structuredQuery: {} };\n  const path = target.path;\n  if (target.collectionGroup !== null) {\n    debugAssert(\n      path.length % 2 === 0,\n      'Collection Group queries should be within a document path or root.'\n    );\n    result.parent = toQueryPath(serializer, path);\n    result.structuredQuery!.from = [\n      {\n        collectionId: target.collectionGroup,\n        allDescendants: true\n      }\n    ];\n  } else {\n    debugAssert(\n      path.length % 2 !== 0,\n      'Document queries with filters are not supported.'\n    );\n    result.parent = toQueryPath(serializer, path.popLast());\n    result.structuredQuery!.from = [{ collectionId: path.lastSegment() }];\n  }\n\n  const where = toFilter(target.filters);\n  if (where) {\n    result.structuredQuery!.where = where;\n  }\n\n  const orderBy = toOrder(target.orderBy);\n  if (orderBy) {\n    result.structuredQuery!.orderBy = orderBy;\n  }\n\n  const limit = toInt32Proto(serializer, target.limit);\n  if (limit !== null) {\n    result.structuredQuery!.limit = limit;\n  }\n\n  if (target.startAt) {\n    result.structuredQuery!.startAt = toCursor(target.startAt);\n  }\n  if (target.endAt) {\n    result.structuredQuery!.endAt = toCursor(target.endAt);\n  }\n\n  return result;\n}\n\nexport function fromQueryTarget(target: ProtoQueryTarget): Target {\n  let path = fromQueryPath(target.parent!);\n\n  const query = target.structuredQuery!;\n  const fromCount = query.from ? query.from.length : 0;\n  let collectionGroup: string | null = null;\n  if (fromCount > 0) {\n    hardAssert(\n      fromCount === 1,\n      'StructuredQuery.from with more than one collection is not supported.'\n    );\n    const from = query.from![0];\n    if (from.allDescendants) {\n      collectionGroup = from.collectionId!;\n    } else {\n      path = path.child(from.collectionId!);\n    }\n  }\n\n  let filterBy: Filter[] = [];\n  if (query.where) {\n    filterBy = fromFilter(query.where);\n  }\n\n  let orderBy: OrderBy[] = [];\n  if (query.orderBy) {\n    orderBy = fromOrder(query.orderBy);\n  }\n\n  let limit: number | null = null;\n  if (query.limit) {\n    limit = fromInt32Proto(query.limit);\n  }\n\n  let startAt: Bound | null = null;\n  if (query.startAt) {\n    startAt = fromCursor(query.startAt);\n  }\n\n  let endAt: Bound | null = null;\n  if (query.endAt) {\n    endAt = fromCursor(query.endAt);\n  }\n\n  return queryToTarget(\n    newQuery(\n      path,\n      collectionGroup,\n      orderBy,\n      filterBy,\n      limit,\n      LimitType.First,\n      startAt,\n      endAt\n    )\n  );\n}\n\nexport function toListenRequestLabels(\n  serializer: JsonProtoSerializer,\n  targetData: TargetData\n): ProtoApiClientObjectMap<string> | null {\n  const value = toLabel(serializer, targetData.purpose);\n  if (value == null) {\n    return null;\n  } else {\n    return {\n      'goog-listen-tags': value\n    };\n  }\n}\n\nfunction toLabel(\n  serializer: JsonProtoSerializer,\n  purpose: TargetPurpose\n): string | null {\n  switch (purpose) {\n    case TargetPurpose.Listen:\n      return null;\n    case TargetPurpose.ExistenceFilterMismatch:\n      return 'existence-filter-mismatch';\n    case TargetPurpose.LimboResolution:\n      return 'limbo-document';\n    default:\n      return fail('Unrecognized query purpose: ' + purpose);\n  }\n}\n\nexport function toTarget(\n  serializer: JsonProtoSerializer,\n  targetData: TargetData\n): ProtoTarget {\n  let result: ProtoTarget;\n  const target = targetData.target;\n\n  if (isDocumentTarget(target)) {\n    result = { documents: toDocumentsTarget(serializer, target) };\n  } else {\n    result = { query: toQueryTarget(serializer, target) };\n  }\n\n  result.targetId = targetData.targetId;\n\n  if (targetData.resumeToken.approximateByteSize() > 0) {\n    result.resumeToken = toBytes(serializer, targetData.resumeToken);\n  }\n\n  return result;\n}\n\nfunction toFilter(filters: Filter[]): ProtoFilter | undefined {\n  if (filters.length === 0) {\n    return;\n  }\n  const protos = filters.map(filter => {\n    debugAssert(\n      filter instanceof FieldFilter,\n      'Only FieldFilters are supported'\n    );\n    return toUnaryOrFieldFilter(filter);\n  });\n  if (protos.length === 1) {\n    return protos[0];\n  }\n  return { compositeFilter: { op: 'AND', filters: protos } };\n}\n\nfunction fromFilter(filter: ProtoFilter | undefined): Filter[] {\n  if (!filter) {\n    return [];\n  } else if (filter.unaryFilter !== undefined) {\n    return [fromUnaryFilter(filter)];\n  } else if (filter.fieldFilter !== undefined) {\n    return [fromFieldFilter(filter)];\n  } else if (filter.compositeFilter !== undefined) {\n    return filter.compositeFilter\n      .filters!.map(f => fromFilter(f))\n      .reduce((accum, current) => accum.concat(current));\n  } else {\n    return fail('Unknown filter: ' + JSON.stringify(filter));\n  }\n}\n\nfunction toOrder(orderBys: OrderBy[]): ProtoOrder[] | undefined {\n  if (orderBys.length === 0) {\n    return;\n  }\n  return orderBys.map(order => toPropertyOrder(order));\n}\n\nfunction fromOrder(orderBys: ProtoOrder[]): OrderBy[] {\n  return orderBys.map(order => fromPropertyOrder(order));\n}\n\nfunction toCursor(cursor: Bound): ProtoCursor {\n  return {\n    before: cursor.before,\n    values: cursor.position\n  };\n}\n\nfunction fromCursor(cursor: ProtoCursor): Bound {\n  const before = !!cursor.before;\n  const position = cursor.values || [];\n  return new Bound(position, before);\n}\n\n// visible for testing\nexport function toDirection(dir: Direction): ProtoOrderDirection {\n  return DIRECTIONS[dir];\n}\n\n// visible for testing\nexport function fromDirection(\n  dir: ProtoOrderDirection | undefined\n): Direction | undefined {\n  switch (dir) {\n    case 'ASCENDING':\n      return Direction.ASCENDING;\n    case 'DESCENDING':\n      return Direction.DESCENDING;\n    default:\n      return undefined;\n  }\n}\n\n// visible for testing\nexport function toOperatorName(op: Operator): ProtoFieldFilterOp {\n  return OPERATORS[op];\n}\n\nexport function fromOperatorName(op: ProtoFieldFilterOp): Operator {\n  switch (op) {\n    case 'EQUAL':\n      return Operator.EQUAL;\n    case 'NOT_EQUAL':\n      return Operator.NOT_EQUAL;\n    case 'GREATER_THAN':\n      return Operator.GREATER_THAN;\n    case 'GREATER_THAN_OR_EQUAL':\n      return Operator.GREATER_THAN_OR_EQUAL;\n    case 'LESS_THAN':\n      return Operator.LESS_THAN;\n    case 'LESS_THAN_OR_EQUAL':\n      return Operator.LESS_THAN_OR_EQUAL;\n    case 'ARRAY_CONTAINS':\n      return Operator.ARRAY_CONTAINS;\n    case 'IN':\n      return Operator.IN;\n    case 'NOT_IN':\n      return Operator.NOT_IN;\n    case 'ARRAY_CONTAINS_ANY':\n      return Operator.ARRAY_CONTAINS_ANY;\n    case 'OPERATOR_UNSPECIFIED':\n      return fail('Unspecified operator');\n    default:\n      return fail('Unknown operator');\n  }\n}\n\nexport function toFieldPathReference(path: FieldPath): ProtoFieldReference {\n  return { fieldPath: path.canonicalString() };\n}\n\nexport function fromFieldPathReference(\n  fieldReference: ProtoFieldReference\n): FieldPath {\n  return FieldPath.fromServerFormat(fieldReference.fieldPath!);\n}\n\n// visible for testing\nexport function toPropertyOrder(orderBy: OrderBy): ProtoOrder {\n  return {\n    field: toFieldPathReference(orderBy.field),\n    direction: toDirection(orderBy.dir)\n  };\n}\n\nexport function fromPropertyOrder(orderBy: ProtoOrder): OrderBy {\n  return new OrderBy(\n    fromFieldPathReference(orderBy.field!),\n    fromDirection(orderBy.direction)\n  );\n}\n\nexport function fromFieldFilter(filter: ProtoFilter): Filter {\n  return FieldFilter.create(\n    fromFieldPathReference(filter.fieldFilter!.field!),\n    fromOperatorName(filter.fieldFilter!.op!),\n    filter.fieldFilter!.value!\n  );\n}\n\n// visible for testing\nexport function toUnaryOrFieldFilter(filter: FieldFilter): ProtoFilter {\n  if (filter.op === Operator.EQUAL) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NULL'\n        }\n      };\n    }\n  } else if (filter.op === Operator.NOT_EQUAL) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NOT_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NOT_NULL'\n        }\n      };\n    }\n  }\n  return {\n    fieldFilter: {\n      field: toFieldPathReference(filter.field),\n      op: toOperatorName(filter.op),\n      value: filter.value\n    }\n  };\n}\n\nexport function fromUnaryFilter(filter: ProtoFilter): Filter {\n  switch (filter.unaryFilter!.op!) {\n    case 'IS_NAN':\n      const nanField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(nanField, Operator.EQUAL, {\n        doubleValue: NaN\n      });\n    case 'IS_NULL':\n      const nullField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(nullField, Operator.EQUAL, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'IS_NOT_NAN':\n      const notNanField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(notNanField, Operator.NOT_EQUAL, {\n        doubleValue: NaN\n      });\n    case 'IS_NOT_NULL':\n      const notNullField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(notNullField, Operator.NOT_EQUAL, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'OPERATOR_UNSPECIFIED':\n      return fail('Unspecified filter');\n    default:\n      return fail('Unknown filter');\n  }\n}\n\nexport function toDocumentMask(fieldMask: FieldMask): ProtoDocumentMask {\n  const canonicalFields: string[] = [];\n  fieldMask.fields.forEach(field =>\n    canonicalFields.push(field.canonicalString())\n  );\n  return {\n    fieldPaths: canonicalFields\n  };\n}\n\nexport function fromDocumentMask(proto: ProtoDocumentMask): FieldMask {\n  const paths = proto.fieldPaths || [];\n  return new FieldMask(paths.map(path => FieldPath.fromServerFormat(path)));\n}\n\nexport function isValidResourceName(path: ResourcePath): boolean {\n  // Resource names have at least 4 components (project ID, database ID)\n  return (\n    path.length >= 4 &&\n    path.get(0) === 'projects' &&\n    path.get(2) === 'databases'\n  );\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ProtoValue } from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { debugAssert } from '../util/assert';\nimport { JsonProtoSerializer, toDouble, toInteger } from '../remote/serializer';\nimport {\n  isArray,\n  isInteger,\n  isNumber,\n  normalizeNumber,\n  valueEquals\n} from './values';\nimport { serverTimestamp } from './server_timestamps';\nimport { arrayEquals } from '../util/misc';\n\n/** Represents a transform within a TransformMutation. */\nexport class TransformOperation {\n  // Make sure that the structural type of `TransformOperation` is unique.\n  // See https://github.com/microsoft/TypeScript/issues/5451\n  private _ = undefined;\n}\n\n/**\n * Computes the local transform result against the provided `previousValue`,\n * optionally using the provided localWriteTime.\n */\nexport function applyTransformOperationToLocalView(\n  transform: TransformOperation,\n  previousValue: ProtoValue | null,\n  localWriteTime: Timestamp\n): ProtoValue {\n  if (transform instanceof ServerTimestampTransform) {\n    return serverTimestamp(localWriteTime, previousValue);\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  } else {\n    debugAssert(\n      transform instanceof NumericIncrementTransformOperation,\n      'Expected NumericIncrementTransformOperation but was: ' + transform\n    );\n    return applyNumericIncrementTransformOperationToLocalView(\n      transform,\n      previousValue\n    );\n  }\n}\n\n/**\n * Computes a final transform result after the transform has been acknowledged\n * by the server, potentially using the server-provided transformResult.\n */\nexport function applyTransformOperationToRemoteDocument(\n  transform: TransformOperation,\n  previousValue: ProtoValue | null,\n  transformResult: ProtoValue | null\n): ProtoValue {\n  // The server just sends null as the transform result for array operations,\n  // so we have to calculate a result the same as we do for local\n  // applications.\n  if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  }\n\n  debugAssert(\n    transformResult !== null,\n    \"Didn't receive transformResult for non-array transform\"\n  );\n  return transformResult;\n}\n\n/**\n * If this transform operation is not idempotent, returns the base value to\n * persist for this transform. If a base value is returned, the transform\n * operation is always applied to this base value, even if document has\n * already been updated.\n *\n * Base values provide consistent behavior for non-idempotent transforms and\n * allow us to return the same latency-compensated value even if the backend\n * has already applied the transform operation. The base value is null for\n * idempotent transforms, as they can be re-played even if the backend has\n * already applied them.\n *\n * @return a base value to store along with the mutation, or null for\n * idempotent transforms.\n */\nexport function computeTransformOperationBaseValue(\n  transform: TransformOperation,\n  previousValue: ProtoValue | null\n): ProtoValue | null {\n  if (transform instanceof NumericIncrementTransformOperation) {\n    return isNumber(previousValue) ? previousValue! : { integerValue: 0 };\n  }\n  return null;\n}\n\nexport function transformOperationEquals(\n  left: TransformOperation,\n  right: TransformOperation\n): boolean {\n  if (\n    left instanceof ArrayUnionTransformOperation &&\n    right instanceof ArrayUnionTransformOperation\n  ) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (\n    left instanceof ArrayRemoveTransformOperation &&\n    right instanceof ArrayRemoveTransformOperation\n  ) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (\n    left instanceof NumericIncrementTransformOperation &&\n    right instanceof NumericIncrementTransformOperation\n  ) {\n    return valueEquals(left.operand, right.operand);\n  }\n\n  return (\n    left instanceof ServerTimestampTransform &&\n    right instanceof ServerTimestampTransform\n  );\n}\n\n/** Transforms a value into a server-generated timestamp. */\nexport class ServerTimestampTransform extends TransformOperation {}\n\n/** Transforms an array value via a union operation. */\nexport class ArrayUnionTransformOperation extends TransformOperation {\n  constructor(readonly elements: ProtoValue[]) {\n    super();\n  }\n}\n\nfunction applyArrayUnionTransformOperation(\n  transform: ArrayUnionTransformOperation,\n  previousValue: ProtoValue | null\n): ProtoValue {\n  const values = coercedFieldValuesArray(previousValue);\n  for (const toUnion of transform.elements) {\n    if (!values.some(element => valueEquals(element, toUnion))) {\n      values.push(toUnion);\n    }\n  }\n  return { arrayValue: { values } };\n}\n\n/** Transforms an array value via a remove operation. */\nexport class ArrayRemoveTransformOperation extends TransformOperation {\n  constructor(readonly elements: ProtoValue[]) {\n    super();\n  }\n}\n\nfunction applyArrayRemoveTransformOperation(\n  transform: ArrayRemoveTransformOperation,\n  previousValue: ProtoValue | null\n): ProtoValue {\n  let values = coercedFieldValuesArray(previousValue);\n  for (const toRemove of transform.elements) {\n    values = values.filter(element => !valueEquals(element, toRemove));\n  }\n  return { arrayValue: { values } };\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nexport class NumericIncrementTransformOperation extends TransformOperation {\n  constructor(\n    readonly serializer: JsonProtoSerializer,\n    readonly operand: ProtoValue\n  ) {\n    super();\n    debugAssert(\n      isNumber(operand),\n      'NumericIncrementTransform transform requires a NumberValue'\n    );\n  }\n}\n\nexport function applyNumericIncrementTransformOperationToLocalView(\n  transform: NumericIncrementTransformOperation,\n  previousValue: ProtoValue | null\n): ProtoValue {\n  // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\n  // precision and resolves overflows by reducing precision, we do not\n  // manually cap overflows at 2^63.\n  const baseValue = computeTransformOperationBaseValue(\n    transform,\n    previousValue\n  )!;\n  const sum = asNumber(baseValue) + asNumber(transform.operand);\n  if (isInteger(baseValue) && isInteger(transform.operand)) {\n    return toInteger(sum);\n  } else {\n    return toDouble(transform.serializer, sum);\n  }\n}\n\nfunction asNumber(value: ProtoValue): number {\n  return normalizeNumber(value.integerValue || value.doubleValue);\n}\n\nfunction coercedFieldValuesArray(value: ProtoValue | null): ProtoValue[] {\n  return isArray(value) && value.arrayValue.values\n    ? value.arrayValue.values.slice()\n    : [];\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ProtoValue } from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert, hardAssert } from '../util/assert';\n\nimport {\n  Document,\n  MaybeDocument,\n  NoDocument,\n  UnknownDocument\n} from './document';\nimport { DocumentKey } from './document_key';\nimport { ObjectValue, ObjectValueBuilder } from './object_value';\nimport { FieldPath } from './path';\nimport {\n  applyTransformOperationToLocalView,\n  applyTransformOperationToRemoteDocument,\n  computeTransformOperationBaseValue,\n  TransformOperation,\n  transformOperationEquals\n} from './transform_operation';\nimport { arrayEquals } from '../util/misc';\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nexport class FieldMask {\n  constructor(readonly fields: FieldPath[]) {\n    // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    fields.sort(FieldPath.comparator);\n    debugAssert(\n      !fields.some((v, i) => i !== 0 && v.isEqual(fields[i - 1])),\n      'FieldMask contains field that is not unique: ' +\n        fields.find((v, i) => i !== 0 && v.isEqual(fields[i - 1]))!\n    );\n  }\n\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n  covers(fieldPath: FieldPath): boolean {\n    for (const fieldMaskPath of this.fields) {\n      if (fieldMaskPath.isPrefixOf(fieldPath)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isEqual(other: FieldMask): boolean {\n    return arrayEquals(this.fields, other.fields, (l, r) => l.isEqual(r));\n  }\n}\n\n/** A field path and the TransformOperation to perform upon it. */\nexport class FieldTransform {\n  constructor(\n    readonly field: FieldPath,\n    readonly transform: TransformOperation\n  ) {}\n}\n\nexport function fieldTransformEquals(\n  left: FieldTransform,\n  right: FieldTransform\n): boolean {\n  return (\n    left.field.isEqual(right.field) &&\n    transformOperationEquals(left.transform, right.transform)\n  );\n}\n\n/** The result of successfully applying a mutation to the backend. */\nexport class MutationResult {\n  constructor(\n    /**\n     * The version at which the mutation was committed:\n     *\n     * - For most operations, this is the updateTime in the WriteResult.\n     * - For deletes, the commitTime of the WriteResponse (because deletes are\n     *   not stored and have no updateTime).\n     *\n     * Note that these versions can be different: No-op writes will not change\n     * the updateTime even though the commitTime advances.\n     */\n    readonly version: SnapshotVersion,\n    /**\n     * The resulting fields returned from the backend after a\n     * TransformMutation has been committed. Contains one FieldValue for each\n     * FieldTransform that was in the mutation.\n     *\n     * Will be null if the mutation was not a TransformMutation.\n     */\n    readonly transformResults: Array<ProtoValue | null> | null\n  ) {}\n}\n\nexport const enum MutationType {\n  Set,\n  Patch,\n  Transform,\n  Delete,\n  Verify\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nexport class Precondition {\n  private constructor(\n    readonly updateTime?: SnapshotVersion,\n    readonly exists?: boolean\n  ) {\n    debugAssert(\n      updateTime === undefined || exists === undefined,\n      'Precondition can specify \"exists\" or \"updateTime\" but not both'\n    );\n  }\n\n  /** Creates a new empty Precondition. */\n  static none(): Precondition {\n    return new Precondition();\n  }\n\n  /** Creates a new Precondition with an exists flag. */\n  static exists(exists: boolean): Precondition {\n    return new Precondition(undefined, exists);\n  }\n\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(version: SnapshotVersion): Precondition {\n    return new Precondition(version);\n  }\n\n  /** Returns whether this Precondition is empty. */\n  get isNone(): boolean {\n    return this.updateTime === undefined && this.exists === undefined;\n  }\n\n  isEqual(other: Precondition): boolean {\n    return (\n      this.exists === other.exists &&\n      (this.updateTime\n        ? !!other.updateTime && this.updateTime.isEqual(other.updateTime)\n        : !other.updateTime)\n    );\n  }\n}\n\n/**\n * Returns true if the preconditions is valid for the given document\n * (or null if no document is available).\n */\nexport function preconditionIsValidForDocument(\n  precondition: Precondition,\n  maybeDoc: MaybeDocument | null\n): boolean {\n  if (precondition.updateTime !== undefined) {\n    return (\n      maybeDoc instanceof Document &&\n      maybeDoc.version.isEqual(precondition.updateTime)\n    );\n  } else if (precondition.exists !== undefined) {\n    return precondition.exists === maybeDoc instanceof Document;\n  } else {\n    debugAssert(precondition.isNone, 'Precondition should be empty');\n    return true;\n  }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set, Patch, and Transform mutations. For Delete\n * mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set, Patch, and Transform mutations. As deletes\n * have no explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we return an `UnknownDocument` and rely on Watch to send us the\n * updated version.\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nexport abstract class Mutation {\n  abstract readonly type: MutationType;\n  abstract readonly key: DocumentKey;\n  abstract readonly precondition: Precondition;\n}\n\n/**\n * Applies this mutation to the given MaybeDocument or null for the purposes\n * of computing a new remote document. If the input document doesn't match the\n * expected state (e.g. it is null or outdated), an `UnknownDocument` can be\n * returned.\n *\n * @param mutation The mutation to apply.\n * @param maybeDoc The document to mutate. The input document can be null if\n *     the client has no knowledge of the pre-mutation state of the document.\n * @param mutationResult The result of applying the mutation from the backend.\n * @return The mutated document. The returned document may be an\n *     UnknownDocument if the mutation could not be applied to the locally\n *     cached base document.\n */\nexport function applyMutationToRemoteDocument(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): MaybeDocument {\n  verifyMutationKeyMatches(mutation, maybeDoc);\n  if (mutation instanceof SetMutation) {\n    return applySetMutationToRemoteDocument(mutation, maybeDoc, mutationResult);\n  } else if (mutation instanceof PatchMutation) {\n    return applyPatchMutationToRemoteDocument(\n      mutation,\n      maybeDoc,\n      mutationResult\n    );\n  } else if (mutation instanceof TransformMutation) {\n    return applyTransformMutationToRemoteDocument(\n      mutation,\n      maybeDoc,\n      mutationResult\n    );\n  } else {\n    debugAssert(\n      mutation instanceof DeleteMutation,\n      'Unexpected mutation type: ' + mutation\n    );\n    return applyDeleteMutationToRemoteDocument(\n      mutation,\n      maybeDoc,\n      mutationResult\n    );\n  }\n}\n\n/**\n * Applies this mutation to the given MaybeDocument or null for the purposes\n * of computing the new local view of a document. Both the input and returned\n * documents can be null.\n *\n * @param mutation The mutation to apply.\n * @param maybeDoc The document to mutate. The input document can be null if\n *     the client has no knowledge of the pre-mutation state of the document.\n * @param baseDoc The state of the document prior to this mutation batch. The\n *     input document can be null if the client has no knowledge of the\n *     pre-mutation state of the document.\n * @param localWriteTime A timestamp indicating the local write time of the\n *     batch this mutation is a part of.\n * @return The mutated document. The returned document may be null, but only\n *     if maybeDoc was null and the mutation would not create a new document.\n */\nexport function applyMutationToLocalView(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null,\n  baseDoc: MaybeDocument | null,\n  localWriteTime: Timestamp\n): MaybeDocument | null {\n  verifyMutationKeyMatches(mutation, maybeDoc);\n\n  if (mutation instanceof SetMutation) {\n    return applySetMutationToLocalView(mutation, maybeDoc);\n  } else if (mutation instanceof PatchMutation) {\n    return applyPatchMutationToLocalView(mutation, maybeDoc);\n  } else if (mutation instanceof TransformMutation) {\n    return applyTransformMutationToLocalView(\n      mutation,\n      maybeDoc,\n      localWriteTime,\n      baseDoc\n    );\n  } else {\n    debugAssert(\n      mutation instanceof DeleteMutation,\n      'Unexpected mutation type: ' + mutation\n    );\n    return applyDeleteMutationToLocalView(mutation, maybeDoc);\n  }\n}\n\n/**\n * If this mutation is not idempotent, returns the base value to persist with\n * this mutation. If a base value is returned, the mutation is always applied\n * to this base value, even if document has already been updated.\n *\n * The base value is a sparse object that consists of only the document\n * fields for which this mutation contains a non-idempotent transformation\n * (e.g. a numeric increment). The provided value guarantees consistent\n * behavior for non-idempotent transforms and allow us to return the same\n * latency-compensated value even if the backend has already applied the\n * mutation. The base value is null for idempotent mutations, as they can be\n * re-played even if the backend has already applied them.\n *\n * @return a base value to store along with the mutation, or null for\n * idempotent mutations.\n */\nexport function extractMutationBaseValue(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null\n): ObjectValue | null {\n  if (mutation instanceof TransformMutation) {\n    return extractTransformMutationBaseValue(mutation, maybeDoc);\n  }\n  return null;\n}\n\nexport function mutationEquals(left: Mutation, right: Mutation): boolean {\n  if (left.type !== right.type) {\n    return false;\n  }\n\n  if (!left.key.isEqual(right.key)) {\n    return false;\n  }\n\n  if (!left.precondition.isEqual(right.precondition)) {\n    return false;\n  }\n\n  if (left.type === MutationType.Set) {\n    return (left as SetMutation).value.isEqual((right as SetMutation).value);\n  }\n\n  if (left.type === MutationType.Patch) {\n    return (\n      (left as PatchMutation).data.isEqual((right as PatchMutation).data) &&\n      (left as PatchMutation).fieldMask.isEqual(\n        (right as PatchMutation).fieldMask\n      )\n    );\n  }\n\n  if (left.type === MutationType.Transform) {\n    return arrayEquals(\n      (left as TransformMutation).fieldTransforms,\n      (left as TransformMutation).fieldTransforms,\n      (l, r) => fieldTransformEquals(l, r)\n    );\n  }\n\n  return true;\n}\n\nfunction verifyMutationKeyMatches(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null\n): void {\n  if (maybeDoc != null) {\n    debugAssert(\n      maybeDoc.key.isEqual(mutation.key),\n      'Can only apply a mutation to a document with the same key'\n    );\n  }\n}\n\n/**\n * Returns the version from the given document for use as the result of a\n * mutation. Mutations are defined to return the version of the base document\n * only if it is an existing document. Deleted and unknown documents have a\n * post-mutation version of SnapshotVersion.min().\n */\nfunction getPostMutationVersion(\n  maybeDoc: MaybeDocument | null\n): SnapshotVersion {\n  if (maybeDoc instanceof Document) {\n    return maybeDoc.version;\n  } else {\n    return SnapshotVersion.min();\n  }\n}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nexport class SetMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly value: ObjectValue,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Set;\n}\n\nfunction applySetMutationToRemoteDocument(\n  mutation: SetMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): Document {\n  debugAssert(\n    mutationResult.transformResults == null,\n    'Transform results received by SetMutation.'\n  );\n\n  // Unlike applySetMutationToLocalView, if we're applying a mutation to a\n  // remote document the server has accepted the mutation so the precondition\n  // must have held.\n  return new Document(mutation.key, mutationResult.version, mutation.value, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applySetMutationToLocalView(\n  mutation: SetMutation,\n  maybeDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  const version = getPostMutationVersion(maybeDoc);\n  return new Document(mutation.key, version, mutation.value, {\n    hasLocalMutations: true\n  });\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nexport class PatchMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Patch;\n}\n\nfunction applyPatchMutationToRemoteDocument(\n  mutation: PatchMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): MaybeDocument {\n  debugAssert(\n    mutationResult.transformResults == null,\n    'Transform results received by PatchMutation.'\n  );\n\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    // Since the mutation was not rejected, we know that the  precondition\n    // matched on the backend. We therefore must not have the expected version\n    // of the document in our cache and return an UnknownDocument with the\n    // known updateTime.\n    return new UnknownDocument(mutation.key, mutationResult.version);\n  }\n\n  const newData = patchDocument(mutation, maybeDoc);\n  return new Document(mutation.key, mutationResult.version, newData, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applyPatchMutationToLocalView(\n  mutation: PatchMutation,\n  maybeDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  const version = getPostMutationVersion(maybeDoc);\n  const newData = patchDocument(mutation, maybeDoc);\n  return new Document(mutation.key, version, newData, {\n    hasLocalMutations: true\n  });\n}\n\n/**\n * Patches the data of document if available or creates a new document. Note\n * that this does not check whether or not the precondition of this patch\n * holds.\n */\nfunction patchDocument(\n  mutation: PatchMutation,\n  maybeDoc: MaybeDocument | null\n): ObjectValue {\n  let data: ObjectValue;\n  if (maybeDoc instanceof Document) {\n    data = maybeDoc.data();\n  } else {\n    data = ObjectValue.empty();\n  }\n  return patchObject(mutation, data);\n}\n\nfunction patchObject(mutation: PatchMutation, data: ObjectValue): ObjectValue {\n  const builder = new ObjectValueBuilder(data);\n  mutation.fieldMask.fields.forEach(fieldPath => {\n    if (!fieldPath.isEmpty()) {\n      const newValue = mutation.data.field(fieldPath);\n      if (newValue !== null) {\n        builder.set(fieldPath, newValue);\n      } else {\n        builder.delete(fieldPath);\n      }\n    }\n  });\n  return builder.build();\n}\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nexport class TransformMutation extends Mutation {\n  readonly type: MutationType = MutationType.Transform;\n\n  // NOTE: We set a precondition of exists: true as a safety-check, since we\n  // always combine TransformMutations with a SetMutation or PatchMutation which\n  // (if successful) should end up with an existing document.\n  readonly precondition = Precondition.exists(true);\n\n  constructor(\n    readonly key: DocumentKey,\n    readonly fieldTransforms: FieldTransform[]\n  ) {\n    super();\n  }\n}\n\nfunction applyTransformMutationToRemoteDocument(\n  mutation: TransformMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): Document | UnknownDocument {\n  hardAssert(\n    mutationResult.transformResults != null,\n    'Transform results missing for TransformMutation.'\n  );\n\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    // Since the mutation was not rejected, we know that the  precondition\n    // matched on the backend. We therefore must not have the expected version\n    // of the document in our cache and return an UnknownDocument with the\n    // known updateTime.\n    return new UnknownDocument(mutation.key, mutationResult.version);\n  }\n\n  const doc = requireDocument(mutation, maybeDoc);\n  const transformResults = serverTransformResults(\n    mutation.fieldTransforms,\n    maybeDoc,\n    mutationResult.transformResults!\n  );\n\n  const version = mutationResult.version;\n  const newData = transformObject(mutation, doc.data(), transformResults);\n  return new Document(mutation.key, version, newData, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applyTransformMutationToLocalView(\n  mutation: TransformMutation,\n  maybeDoc: MaybeDocument | null,\n  localWriteTime: Timestamp,\n  baseDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  const doc = requireDocument(mutation, maybeDoc);\n  const transformResults = localTransformResults(\n    mutation.fieldTransforms,\n    localWriteTime,\n    maybeDoc,\n    baseDoc\n  );\n  const newData = transformObject(mutation, doc.data(), transformResults);\n  return new Document(mutation.key, doc.version, newData, {\n    hasLocalMutations: true\n  });\n}\n\nfunction extractTransformMutationBaseValue(\n  mutation: TransformMutation,\n  maybeDoc: MaybeDocument | null | Document\n): ObjectValue | null {\n  let baseObject: ObjectValueBuilder | null = null;\n  for (const fieldTransform of mutation.fieldTransforms) {\n    const existingValue =\n      maybeDoc instanceof Document\n        ? maybeDoc.field(fieldTransform.field)\n        : undefined;\n    const coercedValue = computeTransformOperationBaseValue(\n      fieldTransform.transform,\n      existingValue || null\n    );\n\n    if (coercedValue != null) {\n      if (baseObject == null) {\n        baseObject = new ObjectValueBuilder().set(\n          fieldTransform.field,\n          coercedValue\n        );\n      } else {\n        baseObject = baseObject.set(fieldTransform.field, coercedValue);\n      }\n    }\n  }\n  return baseObject ? baseObject.build() : null;\n}\n\n/**\n * Asserts that the given MaybeDocument is actually a Document and verifies\n * that it matches the key for this mutation. Since we only support\n * transformations with precondition exists this method is guaranteed to be\n * safe.\n */\nfunction requireDocument(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null\n): Document {\n  debugAssert(\n    maybeDoc instanceof Document,\n    'Unknown MaybeDocument type ' + maybeDoc\n  );\n  debugAssert(\n    maybeDoc.key.isEqual(mutation.key),\n    'Can only transform a document with the same key'\n  );\n  return maybeDoc;\n}\n\n/**\n * Creates a list of \"transform results\" (a transform result is a field value\n * representing the result of applying a transform) for use after a\n * TransformMutation has been acknowledged by the server.\n *\n * @param fieldTransforms The field transforms to apply the result to.\n * @param baseDoc The document prior to applying this mutation batch.\n * @param serverTransformResults The transform results received by the server.\n * @return The transform results list.\n */\nfunction serverTransformResults(\n  fieldTransforms: FieldTransform[],\n  baseDoc: MaybeDocument | null,\n  serverTransformResults: Array<ProtoValue | null>\n): ProtoValue[] {\n  const transformResults: ProtoValue[] = [];\n  hardAssert(\n    fieldTransforms.length === serverTransformResults.length,\n    `server transform result count (${serverTransformResults.length}) ` +\n      `should match field transform count (${fieldTransforms.length})`\n  );\n\n  for (let i = 0; i < serverTransformResults.length; i++) {\n    const fieldTransform = fieldTransforms[i];\n    const transform = fieldTransform.transform;\n    let previousValue: ProtoValue | null = null;\n    if (baseDoc instanceof Document) {\n      previousValue = baseDoc.field(fieldTransform.field);\n    }\n    transformResults.push(\n      applyTransformOperationToRemoteDocument(\n        transform,\n        previousValue,\n        serverTransformResults[i]\n      )\n    );\n  }\n  return transformResults;\n}\n\n/**\n * Creates a list of \"transform results\" (a transform result is a field value\n * representing the result of applying a transform) for use when applying a\n * TransformMutation locally.\n *\n * @param fieldTransforms The field transforms to apply the result to.\n * @param localWriteTime The local time of the transform mutation (used to\n *     generate ServerTimestampValues).\n * @param maybeDoc The current state of the document after applying all\n *     previous mutations.\n * @param baseDoc The document prior to applying this mutation batch.\n * @return The transform results list.\n */\nfunction localTransformResults(\n  fieldTransforms: FieldTransform[],\n  localWriteTime: Timestamp,\n  maybeDoc: MaybeDocument | null,\n  baseDoc: MaybeDocument | null\n): ProtoValue[] {\n  const transformResults: ProtoValue[] = [];\n  for (const fieldTransform of fieldTransforms) {\n    const transform = fieldTransform.transform;\n\n    let previousValue: ProtoValue | null = null;\n    if (maybeDoc instanceof Document) {\n      previousValue = maybeDoc.field(fieldTransform.field);\n    }\n\n    if (previousValue === null && baseDoc instanceof Document) {\n      // If the current document does not contain a value for the mutated\n      // field, use the value that existed before applying this mutation\n      // batch. This solves an edge case where a PatchMutation clears the\n      // values in a nested map before the TransformMutation is applied.\n      previousValue = baseDoc.field(fieldTransform.field);\n    }\n\n    transformResults.push(\n      applyTransformOperationToLocalView(\n        transform,\n        previousValue,\n        localWriteTime\n      )\n    );\n  }\n  return transformResults;\n}\n\nfunction transformObject(\n  mutation: TransformMutation,\n  data: ObjectValue,\n  transformResults: ProtoValue[]\n): ObjectValue {\n  debugAssert(\n    transformResults.length === mutation.fieldTransforms.length,\n    'TransformResults length mismatch.'\n  );\n\n  const builder = new ObjectValueBuilder(data);\n  for (let i = 0; i < mutation.fieldTransforms.length; i++) {\n    const fieldTransform = mutation.fieldTransforms[i];\n    builder.set(fieldTransform.field, transformResults[i]);\n  }\n  return builder.build();\n}\n\n/** A mutation that deletes the document at the given key. */\nexport class DeleteMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Delete;\n}\n\nfunction applyDeleteMutationToRemoteDocument(\n  mutation: DeleteMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): NoDocument {\n  debugAssert(\n    mutationResult.transformResults == null,\n    'Transform results received by DeleteMutation.'\n  );\n\n  // Unlike applyToLocalView, if we're applying a mutation to a remote\n  // document the server has accepted the mutation so the precondition must\n  // have held.\n\n  return new NoDocument(mutation.key, mutationResult.version, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applyDeleteMutationToLocalView(\n  mutation: DeleteMutation,\n  maybeDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  if (maybeDoc) {\n    debugAssert(\n      maybeDoc.key.isEqual(mutation.key),\n      'Can only apply mutation to document with same key'\n    );\n  }\n  return new NoDocument(mutation.key, SnapshotVersion.min());\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nexport class VerifyMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Verify;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Value as ProtoValue,\n  MapValue as ProtoMapValue\n} from '../protos/firestore_proto_api';\n\nimport { debugAssert } from '../util/assert';\nimport { FieldMask } from './mutation';\nimport { FieldPath } from './path';\nimport { isServerTimestamp } from './server_timestamps';\nimport { valueEquals, isMapValue, typeOrder } from './values';\nimport { forEach } from '../util/obj';\n\nexport interface JsonObject<T> {\n  [name: string]: T;\n}\n\nexport const enum TypeOrder {\n  // This order is based on the backend's ordering, but modified to support\n  // server timestamps.\n  NullValue = 0,\n  BooleanValue = 1,\n  NumberValue = 2,\n  TimestampValue = 3,\n  ServerTimestampValue = 4,\n  StringValue = 5,\n  BlobValue = 6,\n  RefValue = 7,\n  GeoPointValue = 8,\n  ArrayValue = 9,\n  ObjectValue = 10\n}\n\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nexport class ObjectValue {\n  constructor(readonly proto: { mapValue: ProtoMapValue }) {\n    debugAssert(\n      !isServerTimestamp(proto),\n      'ServerTimestamps should be converted to ServerTimestampValue'\n    );\n  }\n\n  static empty(): ObjectValue {\n    return new ObjectValue({ mapValue: {} });\n  }\n\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path the path to search\n   * @return The value at the path or if there it doesn't exist.\n   */\n  field(path: FieldPath): ProtoValue | null {\n    if (path.isEmpty()) {\n      return this.proto;\n    } else {\n      let value: ProtoValue = this.proto;\n      for (let i = 0; i < path.length - 1; ++i) {\n        if (!value.mapValue!.fields) {\n          return null;\n        }\n        value = value.mapValue!.fields[path.get(i)];\n        if (!isMapValue(value)) {\n          return null;\n        }\n      }\n\n      value = (value.mapValue!.fields || {})[path.lastSegment()];\n      return value || null;\n    }\n  }\n\n  isEqual(other: ObjectValue): boolean {\n    return valueEquals(this.proto, other.proto);\n  }\n}\n\n/**\n * An Overlay, which contains an update to apply. Can either be Value proto, a\n * map of Overlay values (to represent additional nesting at the given key) or\n * `null` (to represent field deletes).\n */\ntype Overlay = Map<string, Overlay> | ProtoValue | null;\n\n/**\n * An ObjectValueBuilder provides APIs to set and delete fields from an\n * ObjectValue.\n */\nexport class ObjectValueBuilder {\n  /** A map that contains the accumulated changes in this builder. */\n  private overlayMap = new Map<string, Overlay>();\n\n  /**\n   * @param baseObject The object to mutate.\n   */\n  constructor(private readonly baseObject: ObjectValue = ObjectValue.empty()) {}\n\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path The field path to set.\n   * @param value The value to set.\n   * @return The current Builder instance.\n   */\n  set(path: FieldPath, value: ProtoValue): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot set field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, value);\n    return this;\n  }\n\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path The field path to remove.\n   * @return The current Builder instance.\n   */\n  delete(path: FieldPath): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot delete field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, null);\n    return this;\n  }\n\n  /**\n   * Adds `value` to the overlay map at `path`. Creates nested map entries if\n   * needed.\n   */\n  private setOverlay(path: FieldPath, value: ProtoValue | null): void {\n    let currentLevel = this.overlayMap;\n\n    for (let i = 0; i < path.length - 1; ++i) {\n      const currentSegment = path.get(i);\n      let currentValue = currentLevel.get(currentSegment);\n\n      if (currentValue instanceof Map) {\n        // Re-use a previously created map\n        currentLevel = currentValue;\n      } else if (\n        currentValue &&\n        typeOrder(currentValue) === TypeOrder.ObjectValue\n      ) {\n        // Convert the existing Protobuf MapValue into a map\n        currentValue = new Map<string, Overlay>(\n          Object.entries(currentValue.mapValue!.fields || {})\n        );\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      } else {\n        // Create an empty map to represent the current nesting level\n        currentValue = new Map<string, Overlay>();\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      }\n    }\n\n    currentLevel.set(path.lastSegment(), value);\n  }\n\n  /** Returns an ObjectValue with all mutations applied. */\n  build(): ObjectValue {\n    const mergedResult = this.applyOverlay(\n      FieldPath.emptyPath(),\n      this.overlayMap\n    );\n    if (mergedResult != null) {\n      return new ObjectValue(mergedResult);\n    } else {\n      return this.baseObject;\n    }\n  }\n\n  /**\n   * Applies any overlays from `currentOverlays` that exist at `currentPath`\n   * and returns the merged data at `currentPath` (or null if there were no\n   * changes).\n   *\n   * @param currentPath The path at the current nesting level. Can be set to\n   * FieldValue.emptyPath() to represent the root.\n   * @param currentOverlays The overlays at the current nesting level in the\n   * same format as `overlayMap`.\n   * @return The merged data at `currentPath` or null if no modifications\n   * were applied.\n   */\n  private applyOverlay(\n    currentPath: FieldPath,\n    currentOverlays: Map<string, Overlay>\n  ): { mapValue: ProtoMapValue } | null {\n    let modified = false;\n\n    const existingValue = this.baseObject.field(currentPath);\n    const resultAtPath = isMapValue(existingValue)\n      ? // If there is already data at the current path, base our\n        // modifications on top of the existing data.\n        { ...existingValue.mapValue.fields }\n      : {};\n\n    currentOverlays.forEach((value, pathSegment) => {\n      if (value instanceof Map) {\n        const nested = this.applyOverlay(currentPath.child(pathSegment), value);\n        if (nested != null) {\n          resultAtPath[pathSegment] = nested;\n          modified = true;\n        }\n      } else if (value !== null) {\n        resultAtPath[pathSegment] = value;\n        modified = true;\n      } else if (resultAtPath.hasOwnProperty(pathSegment)) {\n        delete resultAtPath[pathSegment];\n        modified = true;\n      }\n    });\n\n    return modified ? { mapValue: { fields: resultAtPath } } : null;\n  }\n}\n\n/**\n * Returns a FieldMask built from all fields in a MapValue.\n */\nexport function extractFieldMask(value: ProtoMapValue): FieldMask {\n  const fields: FieldPath[] = [];\n  forEach(value!.fields || {}, (key, value) => {\n    const currentPath = new FieldPath([key]);\n    if (isMapValue(value)) {\n      const nestedMask = extractFieldMask(value.mapValue!);\n      const nestedFields = nestedMask.fields;\n      if (nestedFields.length === 0) {\n        // Preserve the empty map by adding it to the FieldMask.\n        fields.push(currentPath);\n      } else {\n        // For nested and non-empty ObjectValues, add the FieldPath of the\n        // leaf nodes.\n        for (const nestedPath of nestedFields) {\n          fields.push(currentPath.child(nestedPath));\n        }\n      }\n    } else {\n      // For nested and non-empty ObjectValues, add the FieldPath of the leaf\n      // nodes.\n      fields.push(currentPath);\n    }\n  });\n  return new FieldMask(fields);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Value as ProtoValue,\n  MapValue as ProtoMapValue\n} from '../protos/firestore_proto_api';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { fail } from '../util/assert';\n\nimport { DocumentKey } from './document_key';\nimport { ObjectValue } from './object_value';\nimport { FieldPath } from './path';\nimport { valueCompare } from './values';\n\nexport interface DocumentOptions {\n  hasLocalMutations?: boolean;\n  hasCommittedMutations?: boolean;\n}\n\n/**\n * The result of a lookup for a given path may be an existing document or a\n * marker that this document does not exist at a given version.\n */\nexport abstract class MaybeDocument {\n  constructor(readonly key: DocumentKey, readonly version: SnapshotVersion) {}\n\n  /**\n   * Whether this document had a local mutation applied that has not yet been\n   * acknowledged by Watch.\n   */\n  abstract get hasPendingWrites(): boolean;\n\n  abstract isEqual(other: MaybeDocument | null | undefined): boolean;\n\n  abstract toString(): string;\n}\n\n/**\n * Represents a document in Firestore with a key, version, data and whether the\n * data has local mutations applied to it.\n */\nexport class Document extends MaybeDocument {\n  readonly hasLocalMutations: boolean;\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    private readonly objectValue: ObjectValue,\n    options: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasLocalMutations = !!options.hasLocalMutations;\n    this.hasCommittedMutations = !!options.hasCommittedMutations;\n  }\n\n  field(path: FieldPath): ProtoValue | null {\n    return this.objectValue.field(path);\n  }\n\n  data(): ObjectValue {\n    return this.objectValue;\n  }\n\n  toProto(): { mapValue: ProtoMapValue } {\n    return this.objectValue.proto;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof Document &&\n      this.key.isEqual(other.key) &&\n      this.version.isEqual(other.version) &&\n      this.hasLocalMutations === other.hasLocalMutations &&\n      this.hasCommittedMutations === other.hasCommittedMutations &&\n      this.objectValue.isEqual(other.objectValue)\n    );\n  }\n\n  toString(): string {\n    return (\n      `Document(${this.key}, ${\n        this.version\n      }, ${this.objectValue.toString()}, ` +\n      `{hasLocalMutations: ${this.hasLocalMutations}}), ` +\n      `{hasCommittedMutations: ${this.hasCommittedMutations}})`\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n}\n\n/**\n * Compares the value for field `field` in the provided documents. Throws if\n * the field does not exist in both documents.\n */\nexport function compareDocumentsByField(\n  field: FieldPath,\n  d1: Document,\n  d2: Document\n): number {\n  const v1 = d1.field(field);\n  const v2 = d2.field(field);\n  if (v1 !== null && v2 !== null) {\n    return valueCompare(v1, v2);\n  } else {\n    return fail(\"Trying to compare documents on fields that don't exist\");\n  }\n}\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nexport class NoDocument extends MaybeDocument {\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    options?: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasCommittedMutations = !!(options && options.hasCommittedMutations);\n  }\n\n  toString(): string {\n    return `NoDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasCommittedMutations;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof NoDocument &&\n      other.hasCommittedMutations === this.hasCommittedMutations &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n\n/**\n * A class representing an existing document whose data is unknown (e.g. a\n * document that was updated without a known base document).\n */\nexport class UnknownDocument extends MaybeDocument {\n  toString(): string {\n    return `UnknownDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return true;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof UnknownDocument &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Resolver<R> {\n  (value?: R | Promise<R>): void;\n}\n\nexport interface Rejecter {\n  (reason?: Error): void;\n}\n\nexport class Deferred<R = void> {\n  promise: Promise<R>;\n  // Assigned synchronously in constructor by Promise constructor callback.\n  resolve!: Resolver<R>;\n  reject!: Rejecter;\n\n  constructor() {\n    this.promise = new Promise((resolve: Resolver<R>, reject: Rejecter) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * Takes an array of values and a function from a value to a Promise. The function is run on each\n * value sequentially, waiting for the previous promise to resolve before starting the next one.\n * The returned promise resolves once the function has been run on all values.\n */\nexport function sequence<T>(\n  values: T[],\n  fn: (value: T) => Promise<void>\n): Promise<void> {\n  let p = Promise.resolve();\n  for (const value of values) {\n    p = p.then(() => fn(value));\n  }\n  return p;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { logDebug } from '../util/log';\n\nconst LOG_TAG = 'ExponentialBackoff';\n\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\n\n/** Maximum backoff time in milliseconds */\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nexport class ExponentialBackoff {\n  private currentBaseMs: number = 0;\n  private timerPromise: DelayedOperation<void> | null = null;\n  /** The last backoff attempt, as epoch milliseconds. */\n  private lastAttemptTime = Date.now();\n\n  constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    private readonly queue: AsyncQueue,\n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    private readonly timerId: TimerId,\n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    private readonly initialDelayMs: number = DEFAULT_BACKOFF_INITIAL_DELAY_MS,\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */\n    private readonly backoffFactor: number = DEFAULT_BACKOFF_FACTOR,\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */\n    private readonly maxDelayMs: number = DEFAULT_BACKOFF_MAX_DELAY_MS\n  ) {\n    this.reset();\n  }\n\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  reset(): void {\n    this.currentBaseMs = 0;\n  }\n\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n  resetToMax(): void {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n  backoffAndRun(op: () => Promise<void>): void {\n    // Cancel any pending backoff operation.\n    this.cancel();\n\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const desiredDelayWithJitterMs = Math.floor(\n      this.currentBaseMs + this.jitterDelayMs()\n    );\n\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    const delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\n\n    // Guard against the backoff delay already being past.\n    const remainingDelayMs = Math.max(\n      0,\n      desiredDelayWithJitterMs - delaySoFarMs\n    );\n\n    if (remainingDelayMs > 0) {\n      logDebug(\n        LOG_TAG,\n        `Backing off for ${remainingDelayMs} ms ` +\n          `(base delay: ${this.currentBaseMs} ms, ` +\n          `delay with jitter: ${desiredDelayWithJitterMs} ms, ` +\n          `last attempt: ${delaySoFarMs} ms ago)`\n      );\n    }\n\n    this.timerPromise = this.queue.enqueueAfterDelay(\n      this.timerId,\n      remainingDelayMs,\n      () => {\n        this.lastAttemptTime = Date.now();\n        return op();\n      }\n    );\n\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.currentBaseMs *= this.backoffFactor;\n    if (this.currentBaseMs < this.initialDelayMs) {\n      this.currentBaseMs = this.initialDelayMs;\n    }\n    if (this.currentBaseMs > this.maxDelayMs) {\n      this.currentBaseMs = this.maxDelayMs;\n    }\n  }\n\n  skipBackoff(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.skipDelay();\n      this.timerPromise = null;\n    }\n  }\n\n  cancel(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.cancel();\n      this.timerPromise = null;\n    }\n  }\n\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  private jitterDelayMs(): number {\n    return (Math.random() - 0.5) * this.currentBaseMs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\n\nexport type FulfilledHandler<T, R> =\n  | ((result: T) => R | PersistencePromise<R>)\n  | null;\nexport type RejectedHandler<R> =\n  | ((reason: Error) => R | PersistencePromise<R>)\n  | null;\nexport type Resolver<T> = (value?: T) => void;\nexport type Rejector = (error: Error) => void;\n\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nexport class PersistencePromise<T> {\n  // NOTE: next/catchCallback will always point to our own wrapper functions,\n  // not the user's raw next() or catch() callbacks.\n  private nextCallback: FulfilledHandler<T, unknown> = null;\n  private catchCallback: RejectedHandler<unknown> = null;\n\n  // When the operation resolves, we'll set result or error and mark isDone.\n  private result: T | undefined = undefined;\n  private error: Error | undefined = undefined;\n  private isDone = false;\n\n  // Set to true when .then() or .catch() are called and prevents additional\n  // chaining.\n  private callbackAttached = false;\n\n  constructor(callback: (resolve: Resolver<T>, reject: Rejector) => void) {\n    callback(\n      value => {\n        this.isDone = true;\n        this.result = value;\n        if (this.nextCallback) {\n          // value should be defined unless T is Void, but we can't express\n          // that in the type system.\n          this.nextCallback(value!);\n        }\n      },\n      error => {\n        this.isDone = true;\n        this.error = error;\n        if (this.catchCallback) {\n          this.catchCallback(error);\n        }\n      }\n    );\n  }\n\n  catch<R>(\n    fn: (error: Error) => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    return this.next(undefined, fn);\n  }\n\n  next<R>(\n    nextFn?: FulfilledHandler<T, R>,\n    catchFn?: RejectedHandler<R>\n  ): PersistencePromise<R> {\n    if (this.callbackAttached) {\n      fail('Called next() or catch() twice for PersistencePromise');\n    }\n    this.callbackAttached = true;\n    if (this.isDone) {\n      if (!this.error) {\n        return this.wrapSuccess(nextFn, this.result!);\n      } else {\n        return this.wrapFailure(catchFn, this.error);\n      }\n    } else {\n      return new PersistencePromise<R>((resolve, reject) => {\n        this.nextCallback = (value: T) => {\n          this.wrapSuccess(nextFn, value).next(resolve, reject);\n        };\n        this.catchCallback = (error: Error) => {\n          this.wrapFailure(catchFn, error).next(resolve, reject);\n        };\n      });\n    }\n  }\n\n  toPromise(): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.next(resolve, reject);\n    });\n  }\n\n  private wrapUserFunction<R>(\n    fn: () => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    try {\n      const result = fn();\n      if (result instanceof PersistencePromise) {\n        return result;\n      } else {\n        return PersistencePromise.resolve(result);\n      }\n    } catch (e) {\n      return PersistencePromise.reject<R>(e);\n    }\n  }\n\n  private wrapSuccess<R>(\n    nextFn: FulfilledHandler<T, R> | undefined,\n    value: T\n  ): PersistencePromise<R> {\n    if (nextFn) {\n      return this.wrapUserFunction(() => nextFn(value));\n    } else {\n      // If there's no nextFn, then R must be the same as T\n      return PersistencePromise.resolve<R>((value as unknown) as R);\n    }\n  }\n\n  private wrapFailure<R>(\n    catchFn: RejectedHandler<R> | undefined,\n    error: Error\n  ): PersistencePromise<R> {\n    if (catchFn) {\n      return this.wrapUserFunction(() => catchFn(error));\n    } else {\n      return PersistencePromise.reject<R>(error);\n    }\n  }\n\n  static resolve(): PersistencePromise<void>;\n  static resolve<R>(result: R): PersistencePromise<R>;\n  static resolve<R>(result?: R): PersistencePromise<R | void> {\n    return new PersistencePromise<R | void>((resolve, reject) => {\n      resolve(result);\n    });\n  }\n\n  static reject<R>(error: Error): PersistencePromise<R> {\n    return new PersistencePromise<R>((resolve, reject) => {\n      reject(error);\n    });\n  }\n\n  static waitFor(\n    // Accept all Promise types in waitFor().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    all: { forEach: (cb: (el: PersistencePromise<any>) => void) => void }\n  ): PersistencePromise<void> {\n    return new PersistencePromise<void>((resolve, reject) => {\n      let expectedCount = 0;\n      let resolvedCount = 0;\n      let done = false;\n\n      all.forEach(element => {\n        ++expectedCount;\n        element.next(\n          () => {\n            ++resolvedCount;\n            if (done && resolvedCount === expectedCount) {\n              resolve();\n            }\n          },\n          err => reject(err)\n        );\n      });\n\n      done = true;\n      if (resolvedCount === expectedCount) {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Given an array of predicate functions that asynchronously evaluate to a\n   * boolean, implements a short-circuiting `or` between the results. Predicates\n   * will be evaluated until one of them returns `true`, then stop. The final\n   * result will be whether any of them returned `true`.\n   */\n  static or(\n    predicates: Array<() => PersistencePromise<boolean>>\n  ): PersistencePromise<boolean> {\n    let p: PersistencePromise<boolean> = PersistencePromise.resolve<boolean>(\n      false\n    );\n    for (const predicate of predicates) {\n      p = p.next(isTrue => {\n        if (isTrue) {\n          return PersistencePromise.resolve<boolean>(isTrue);\n        } else {\n          return predicate();\n        }\n      });\n    }\n    return p;\n  }\n\n  /**\n   * Given an iterable, call the given function on each element in the\n   * collection and wait for all of the resulting concurrent PersistencePromises\n   * to resolve.\n   */\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s: S) => void) => void },\n    f:\n      | ((r: R, s: S) => PersistencePromise<void>)\n      | ((r: R) => PersistencePromise<void>)\n  ): PersistencePromise<void>;\n  static forEach<R>(\n    collection: { forEach: (cb: (r: R) => void) => void },\n    f: (r: R) => PersistencePromise<void>\n  ): PersistencePromise<void>;\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s?: S) => void) => void },\n    f: (r: R, s?: S) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    const promises: Array<PersistencePromise<void>> = [];\n    collection.forEach((r, s) => {\n      promises.push(f.call(this, r, s));\n    });\n    return this.waitFor(promises);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getUA } from '@firebase/util';\nimport { debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\nimport { Deferred } from '../util/promise';\nimport { PersistencePromise } from './persistence_promise';\n\n// References to `window` are guarded by SimpleDb.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'SimpleDb';\n\n/**\n * The maximum number of retry attempts for an IndexedDb transaction that fails\n * with a DOMException.\n */\nconst TRANSACTION_RETRY_COUNT = 3;\n\n// The different modes supported by `SimpleDb.runTransaction()`\ntype SimpleDbTransactionMode = 'readonly' | 'readwrite';\n\nexport interface SimpleDbSchemaConverter {\n  createOrUpgrade(\n    db: IDBDatabase,\n    txn: IDBTransaction,\n    fromVersion: number,\n    toVersion: number\n  ): PersistencePromise<void>;\n}\n\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nexport class SimpleDb {\n  private db?: IDBDatabase;\n  private versionchangelistener?: (event: IDBVersionChangeEvent) => void;\n\n  /** Deletes the specified database. */\n  static delete(name: string): Promise<void> {\n    logDebug(LOG_TAG, 'Removing database:', name);\n    return wrapRequest<void>(window.indexedDB.deleteDatabase(name)).toPromise();\n  }\n\n  /** Returns true if IndexedDB is available in the current environment. */\n  static isAvailable(): boolean {\n    if (typeof indexedDB === 'undefined') {\n      return false;\n    }\n\n    if (SimpleDb.isMockPersistence()) {\n      return true;\n    }\n\n    // We extensively use indexed array values and compound keys,\n    // which IE and Edge do not support. However, they still have indexedDB\n    // defined on the window, so we need to check for them here and make sure\n    // to return that persistence is not enabled for those browsers.\n    // For tracking support of this feature, see here:\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n\n    // Check the UA string to find out the browser.\n    const ua = getUA();\n\n    // IE 10\n    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n    // IE 11\n    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n    // Edge\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n    // iOS Safari: Disable for users running iOS version < 10.\n    const iOSVersion = SimpleDb.getIOSVersion(ua);\n    const isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;\n\n    // Android browser: Disable for userse running version < 4.5.\n    const androidVersion = SimpleDb.getAndroidVersion(ua);\n    const isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;\n\n    if (\n      ua.indexOf('MSIE ') > 0 ||\n      ua.indexOf('Trident/') > 0 ||\n      ua.indexOf('Edge/') > 0 ||\n      isUnsupportedIOS ||\n      isUnsupportedAndroid\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Returns true if the backing IndexedDB store is the Node IndexedDBShim\n   * (see https://github.com/axemclion/IndexedDBShim).\n   */\n  static isMockPersistence(): boolean {\n    return (\n      typeof process !== 'undefined' &&\n      process.env?.USE_MOCK_PERSISTENCE === 'YES'\n    );\n  }\n\n  /** Helper to get a typed SimpleDbStore from a transaction. */\n  static getStore<KeyType extends IDBValidKey, ValueType extends unknown>(\n    txn: SimpleDbTransaction,\n    store: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    return txn.store<KeyType, ValueType>(store);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine iOS version. Returns -1 if not found. */\n  static getIOSVersion(ua: string): number {\n    const iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\\d_]+)/i);\n    const version = iOSVersionRegex\n      ? iOSVersionRegex[1].split('_').slice(0, 2).join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine Android version. Returns -1 if not found. */\n  static getAndroidVersion(ua: string): number {\n    const androidVersionRegex = ua.match(/Android ([\\d.]+)/i);\n    const version = androidVersionRegex\n      ? androidVersionRegex[1].split('.').slice(0, 2).join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  /*\n   * Creates a new SimpleDb wrapper for IndexedDb database `name`.\n   *\n   * Note that `version` must not be a downgrade. IndexedDB does not support\n   * downgrading the schema version. We currently do not support any way to do\n   * versioning outside of IndexedDB's versioning mechanism, as only\n   * version-upgrade transactions are allowed to do things like create\n   * objectstores.\n   */\n  constructor(\n    private readonly name: string,\n    private readonly version: number,\n    private readonly schemaConverter: SimpleDbSchemaConverter\n  ) {\n    debugAssert(\n      SimpleDb.isAvailable(),\n      'IndexedDB not supported in current environment.'\n    );\n\n    const iOSVersion = SimpleDb.getIOSVersion(getUA());\n    // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the\n    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for\n    // whatever reason it's much harder to hit after 12.2 so we only proactively\n    // log on 12.2.\n    if (iOSVersion === 12.2) {\n      logError(\n        'Firestore persistence suffers from a bug in iOS 12.2 ' +\n          'Safari that may cause your app to stop working. See ' +\n          'https://stackoverflow.com/q/56496296/110915 for details ' +\n          'and a potential workaround.'\n      );\n    }\n  }\n\n  /**\n   * Opens the specified database, creating or upgrading it if necessary.\n   */\n  async ensureDb(action: string): Promise<IDBDatabase> {\n    if (!this.db) {\n      logDebug(LOG_TAG, 'Opening database:', this.name);\n      this.db = await new Promise<IDBDatabase>((resolve, reject) => {\n        // TODO(mikelehen): Investigate browser compatibility.\n        // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n        // suggests IE9 and older WebKit browsers handle upgrade\n        // differently. They expect setVersion, as described here:\n        // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion\n        const request = indexedDB.open(this.name, this.version);\n\n        request.onsuccess = (event: Event) => {\n          const db = (event.target as IDBOpenDBRequest).result;\n          resolve(db);\n        };\n\n        request.onblocked = () => {\n          reject(\n            new IndexedDbTransactionError(\n              action,\n              'Cannot upgrade IndexedDB schema while another tab is open. ' +\n                'Close all tabs that access Firestore and reload this page to proceed.'\n            )\n          );\n        };\n\n        request.onerror = (event: Event) => {\n          const error: DOMException = (event.target as IDBOpenDBRequest).error!;\n          if (error.name === 'VersionError') {\n            reject(\n              new FirestoreError(\n                Code.FAILED_PRECONDITION,\n                'A newer version of the Firestore SDK was previously used and so the persisted ' +\n                  'data is not compatible with the version of the SDK you are now using. The SDK ' +\n                  'will operate with persistence disabled. If you need persistence, please ' +\n                  're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' +\n                  'data for your app to start fresh.'\n              )\n            );\n          } else {\n            reject(new IndexedDbTransactionError(action, error));\n          }\n        };\n\n        request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n          logDebug(\n            LOG_TAG,\n            'Database \"' + this.name + '\" requires upgrade from version:',\n            event.oldVersion\n          );\n          const db = (event.target as IDBOpenDBRequest).result;\n          this.schemaConverter\n            .createOrUpgrade(\n              db,\n              request.transaction!,\n              event.oldVersion,\n              this.version\n            )\n            .next(() => {\n              logDebug(\n                LOG_TAG,\n                'Database upgrade to version ' + this.version + ' complete'\n              );\n            });\n        };\n      });\n    }\n\n    if (this.versionchangelistener) {\n      this.db.onversionchange = event => this.versionchangelistener!(event);\n    }\n    return this.db;\n  }\n\n  setVersionChangeListener(\n    versionChangeListener: (event: IDBVersionChangeEvent) => void\n  ): void {\n    this.versionchangelistener = versionChangeListener;\n    if (this.db) {\n      this.db.onversionchange = (event: IDBVersionChangeEvent) => {\n        return versionChangeListener(event);\n      };\n    }\n  }\n\n  async runTransaction<T>(\n    action: string,\n    mode: SimpleDbTransactionMode,\n    objectStores: string[],\n    transactionFn: (transaction: SimpleDbTransaction) => PersistencePromise<T>\n  ): Promise<T> {\n    const readonly = mode === 'readonly';\n    let attemptNumber = 0;\n\n    while (true) {\n      ++attemptNumber;\n\n      try {\n        this.db = await this.ensureDb(action);\n\n        const transaction = SimpleDbTransaction.open(\n          this.db,\n          action,\n          readonly ? 'readonly' : 'readwrite',\n          objectStores\n        );\n        const transactionFnResult = transactionFn(transaction)\n          .catch(error => {\n            // Abort the transaction if there was an error.\n            transaction.abort(error);\n            // We cannot actually recover, and calling `abort()` will cause the transaction's\n            // completion promise to be rejected. This in turn means that we won't use\n            // `transactionFnResult` below. We return a rejection here so that we don't add the\n            // possibility of returning `void` to the type of `transactionFnResult`.\n            return PersistencePromise.reject<T>(error);\n          })\n          .toPromise();\n\n        // As noted above, errors are propagated by aborting the transaction. So\n        // we swallow any error here to avoid the browser logging it as unhandled.\n        transactionFnResult.catch(() => {});\n\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        await transaction.completionPromise;\n        return transactionFnResult;\n      } catch (error) {\n        // TODO(schmidt-sebastian): We could probably be smarter about this and\n        // not retry exceptions that are likely unrecoverable (such as quota\n        // exceeded errors).\n\n        // Note: We cannot use an instanceof check for FirestoreException, since the\n        // exception is wrapped in a generic error by our async/await handling.\n        const retryable =\n          error.name !== 'FirebaseError' &&\n          attemptNumber < TRANSACTION_RETRY_COUNT;\n        logDebug(\n          LOG_TAG,\n          'Transaction failed with error:',\n          error.message,\n          'Retrying:',\n          retryable\n        );\n\n        this.close();\n\n        if (!retryable) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  }\n\n  close(): void {\n    if (this.db) {\n      this.db.close();\n    }\n    this.db = undefined;\n  }\n}\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nexport class IterationController {\n  private shouldStop = false;\n  private nextKey: IDBValidKey | null = null;\n\n  constructor(private dbCursor: IDBCursorWithValue) {}\n\n  get isDone(): boolean {\n    return this.shouldStop;\n  }\n\n  get skipToKey(): IDBValidKey | null {\n    return this.nextKey;\n  }\n\n  set cursor(value: IDBCursorWithValue) {\n    this.dbCursor = value;\n  }\n\n  /**\n   * This function can be called to stop iteration at any point.\n   */\n  done(): void {\n    this.shouldStop = true;\n  }\n\n  /**\n   * This function can be called to skip to that next key, which could be\n   * an index or a primary key.\n   */\n  skip(key: IDBValidKey): void {\n    this.nextKey = key;\n  }\n\n  /**\n   * Delete the current cursor value from the object store.\n   *\n   * NOTE: You CANNOT do this with a keysOnly query.\n   */\n  delete(): PersistencePromise<void> {\n    return wrapRequest<void>(this.dbCursor.delete());\n  }\n}\n\n/**\n * Callback used with iterate() method.\n */\nexport type IterateCallback<KeyType, ValueType> = (\n  key: KeyType,\n  value: ValueType,\n  control: IterationController\n) => void | PersistencePromise<void>;\n\n/** Options available to the iterate() method. */\nexport interface IterateOptions {\n  /** Index to iterate over (else primary keys will be iterated) */\n  index?: string;\n\n  /** IndxedDB Range to iterate over (else entire store will be iterated) */\n  range?: IDBKeyRange;\n\n  /** If true, values aren't read while iterating. */\n  keysOnly?: boolean;\n\n  /** If true, iterate over the store in reverse. */\n  reverse?: boolean;\n}\n\n/** An error that wraps exceptions that thrown during IndexedDB execution. */\nexport class IndexedDbTransactionError extends FirestoreError {\n  name = 'IndexedDbTransactionError';\n\n  constructor(actionName: string, cause: Error | string) {\n    super(\n      Code.UNAVAILABLE,\n      `IndexedDB transaction '${actionName}' failed: ${cause}`\n    );\n  }\n}\n\n/** Verifies whether `e` is an IndexedDbTransactionError. */\nexport function isIndexedDbTransactionError(e: Error): boolean {\n  // Use name equality, as instanceof checks on errors don't work with errors\n  // that wrap other errors.\n  return e.name === 'IndexedDbTransactionError';\n}\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nexport class SimpleDbTransaction {\n  private aborted = false;\n\n  /**\n   * A promise that resolves with the result of the IndexedDb transaction.\n   */\n  private readonly completionDeferred = new Deferred<void>();\n\n  static open(\n    db: IDBDatabase,\n    action: string,\n    mode: IDBTransactionMode,\n    objectStoreNames: string[]\n  ): SimpleDbTransaction {\n    try {\n      return new SimpleDbTransaction(\n        action,\n        db.transaction(objectStoreNames, mode)\n      );\n    } catch (e) {\n      throw new IndexedDbTransactionError(action, e);\n    }\n  }\n\n  constructor(\n    private readonly action: string,\n    private readonly transaction: IDBTransaction\n  ) {\n    this.transaction.oncomplete = () => {\n      this.completionDeferred.resolve();\n    };\n    this.transaction.onabort = () => {\n      if (transaction.error) {\n        this.completionDeferred.reject(\n          new IndexedDbTransactionError(action, transaction.error)\n        );\n      } else {\n        this.completionDeferred.resolve();\n      }\n    };\n    this.transaction.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      this.completionDeferred.reject(\n        new IndexedDbTransactionError(action, error)\n      );\n    };\n  }\n\n  get completionPromise(): Promise<void> {\n    return this.completionDeferred.promise;\n  }\n\n  abort(error?: Error): void {\n    if (error) {\n      this.completionDeferred.reject(error);\n    }\n\n    if (!this.aborted) {\n      logDebug(\n        LOG_TAG,\n        'Aborting transaction:',\n        error ? error.message : 'Client-initiated abort'\n      );\n      this.aborted = true;\n      this.transaction.abort();\n    }\n  }\n\n  /**\n   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n   * operations performed on the SimpleDbStore happen within the context of this\n   * transaction and it cannot be used anymore once the transaction is\n   * completed.\n   *\n   * Note that we can't actually enforce that the KeyType and ValueType are\n   * correct, but they allow type safety through the rest of the consuming code.\n   */\n  store<KeyType extends IDBValidKey, ValueType extends unknown>(\n    storeName: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    const store = this.transaction.objectStore(storeName);\n    debugAssert(!!store, 'Object store not part of transaction: ' + storeName);\n    return new SimpleDbStore<KeyType, ValueType>(store);\n  }\n}\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nexport class SimpleDbStore<\n  KeyType extends IDBValidKey,\n  ValueType extends unknown\n> {\n  constructor(private store: IDBObjectStore) {}\n\n  /**\n   * Writes a value into the Object Store.\n   *\n   * @param key Optional explicit key to use when writing the object, else the\n   * key will be auto-assigned (e.g. via the defined keyPath for the store).\n   * @param value The object to write.\n   */\n  put(value: ValueType): PersistencePromise<void>;\n  put(key: KeyType, value: ValueType): PersistencePromise<void>;\n  put(\n    keyOrValue: KeyType | ValueType,\n    value?: ValueType\n  ): PersistencePromise<void> {\n    let request;\n    if (value !== undefined) {\n      logDebug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n      request = this.store.put(value, keyOrValue as KeyType);\n    } else {\n      logDebug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n      request = this.store.put(keyOrValue as ValueType);\n    }\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * Adds a new value into an Object Store and returns the new key. Similar to\n   * IndexedDb's `add()`, this method will fail on primary key collisions.\n   *\n   * @param value The object to write.\n   * @return The key of the value to add.\n   */\n  add(value: ValueType): PersistencePromise<KeyType> {\n    logDebug(LOG_TAG, 'ADD', this.store.name, value, value);\n    const request = this.store.add(value as ValueType);\n    return wrapRequest<KeyType>(request);\n  }\n\n  /**\n   * Gets the object with the specified key from the specified store, or null\n   * if no object exists with the specified key.\n   *\n   * @key The key of the object to get.\n   * @return The object with the specified key or null if no object exists.\n   */\n  get(key: KeyType): PersistencePromise<ValueType | null> {\n    const request = this.store.get(key);\n    // We're doing an unsafe cast to ValueType.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return wrapRequest<any>(request).next(result => {\n      // Normalize nonexistence to null.\n      if (result === undefined) {\n        result = null;\n      }\n      logDebug(LOG_TAG, 'GET', this.store.name, key, result);\n      return result;\n    });\n  }\n\n  delete(key: KeyType | IDBKeyRange): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE', this.store.name, key);\n    const request = this.store.delete(key);\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * If we ever need more of the count variants, we can add overloads. For now,\n   * all we need is to count everything in a store.\n   *\n   * Returns the number of rows in the store.\n   */\n  count(): PersistencePromise<number> {\n    logDebug(LOG_TAG, 'COUNT', this.store.name);\n    const request = this.store.count();\n    return wrapRequest<number>(request);\n  }\n\n  loadAll(): PersistencePromise<ValueType[]>;\n  loadAll(range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(index: string, range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<ValueType[]> {\n    const cursor = this.cursor(this.options(indexOrRange, range));\n    const results: ValueType[] = [];\n    return this.iterateCursor(cursor, (key, value) => {\n      results.push(value);\n    }).next(() => {\n      return results;\n    });\n  }\n\n  deleteAll(): PersistencePromise<void>;\n  deleteAll(range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(index: string, range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE ALL', this.store.name);\n    const options = this.options(indexOrRange, range);\n    options.keysOnly = false;\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, (key, value, control) => {\n      // NOTE: Calling delete() on a cursor is documented as more efficient than\n      // calling delete() on an object store with a single key\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n      // however, this requires us *not* to use a keysOnly cursor\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n      // may want to compare the performance of each method.\n      return control.delete();\n    });\n  }\n\n  /**\n   * Iterates over keys and values in an object store.\n   *\n   * @param options Options specifying how to iterate the objects in the store.\n   * @param callback will be called for each iterated object. Iteration can be\n   * canceled at any point by calling the doneFn passed to the callback.\n   * The callback can return a PersistencePromise if it performs async\n   * operations but note that iteration will continue without waiting for them\n   * to complete.\n   * @returns A PersistencePromise that resolves once all PersistencePromises\n   * returned by callbacks resolve.\n   */\n  iterate(\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    options: IterateOptions,\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    optionsOrCallback: IterateOptions | IterateCallback<KeyType, ValueType>,\n    callback?: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    let options;\n    if (!callback) {\n      options = {};\n      callback = optionsOrCallback as IterateCallback<KeyType, ValueType>;\n    } else {\n      options = optionsOrCallback as IterateOptions;\n    }\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, callback);\n  }\n\n  /**\n   * Iterates over a store, but waits for the given callback to complete for\n   * each entry before iterating the next entry. This allows the callback to do\n   * asynchronous work to determine if this iteration should continue.\n   *\n   * The provided callback should return `true` to continue iteration, and\n   * `false` otherwise.\n   */\n  iterateSerial(\n    callback: (k: KeyType, v: ValueType) => PersistencePromise<boolean>\n  ): PersistencePromise<void> {\n    const cursorRequest = this.cursor({});\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        const error = checkForAndReportiOSError(\n          (event.target as IDBRequest).error!\n        );\n        reject(error);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n\n        callback(cursor.primaryKey as KeyType, cursor.value).next(\n          shouldContinue => {\n            if (shouldContinue) {\n              cursor.continue();\n            } else {\n              resolve();\n            }\n          }\n        );\n      };\n    });\n  }\n\n  private iterateCursor(\n    cursorRequest: IDBRequest,\n    fn: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    const results: Array<PersistencePromise<void>> = [];\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        reject((event.target as IDBRequest).error!);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const controller = new IterationController(cursor);\n        const userResult = fn(\n          cursor.primaryKey as KeyType,\n          cursor.value,\n          controller\n        );\n        if (userResult instanceof PersistencePromise) {\n          const userPromise: PersistencePromise<void> = userResult.catch(\n            err => {\n              controller.done();\n              return PersistencePromise.reject(err);\n            }\n          );\n          results.push(userPromise);\n        }\n        if (controller.isDone) {\n          resolve();\n        } else if (controller.skipToKey === null) {\n          cursor.continue();\n        } else {\n          cursor.continue(controller.skipToKey);\n        }\n      };\n    }).next(() => {\n      return PersistencePromise.waitFor(results);\n    });\n  }\n\n  private options(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): IterateOptions {\n    let indexName: string | undefined = undefined;\n    if (indexOrRange !== undefined) {\n      if (typeof indexOrRange === 'string') {\n        indexName = indexOrRange;\n      } else {\n        debugAssert(\n          range === undefined,\n          '3rd argument must not be defined if 2nd is a range.'\n        );\n        range = indexOrRange;\n      }\n    }\n    return { index: indexName, range };\n  }\n\n  private cursor(options: IterateOptions): IDBRequest {\n    let direction: IDBCursorDirection = 'next';\n    if (options.reverse) {\n      direction = 'prev';\n    }\n    if (options.index) {\n      const index = this.store.index(options.index);\n      if (options.keysOnly) {\n        return index.openKeyCursor(options.range, direction);\n      } else {\n        return index.openCursor(options.range, direction);\n      }\n    } else {\n      return this.store.openCursor(options.range, direction);\n    }\n  }\n}\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest<R>(request: IDBRequest): PersistencePromise<R> {\n  return new PersistencePromise<R>((resolve, reject) => {\n    request.onsuccess = (event: Event) => {\n      const result = (event.target as IDBRequest).result;\n      resolve(result);\n    };\n\n    request.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      reject(error);\n    };\n  });\n}\n\n// Guard so we only report the error once.\nlet reportedIOSError = false;\nfunction checkForAndReportiOSError(error: DOMException): Error {\n  const iOSVersion = SimpleDb.getIOSVersion(getUA());\n  if (iOSVersion >= 12.2 && iOSVersion < 13) {\n    const IOS_ERROR =\n      'An internal error was encountered in the Indexed Database server';\n    if (error.message.indexOf(IOS_ERROR) >= 0) {\n      // Wrap error in a more descriptive one.\n      const newError = new FirestoreError(\n        'internal',\n        `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${IOS_ERROR}'. This is likely ` +\n          `due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 ` +\n          `for details and a potential workaround.`\n      );\n      if (!reportedIOSError) {\n        reportedIOSError = true;\n        // Throw a global exception outside of this promise chain, for the user to\n        // potentially catch.\n        setTimeout(() => {\n          throw newError;\n        }, 0);\n      }\n      return newError;\n    }\n  }\n  return error;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The Platform's 'window' implementation or null if not available. */\nexport function getWindow(): Window | null {\n  // `window` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' ? window : null;\n}\n\n/** The Platform's 'document' implementation or null if not available. */\nexport function getDocument(): Document | null {\n  // `document` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return typeof document !== 'undefined' ? document : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { logDebug, logError } from './log';\nimport { Deferred } from './promise';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { isIndexedDbTransactionError } from '../local/simple_db';\nimport { getDocument } from '../platform/dom';\n\nconst LOG_TAG = 'AsyncQueue';\n\n// Accept any return type from setTimeout().\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype TimerHandle = any;\n\n/**\n * Wellknown \"timer\" IDs used when scheduling delayed operations on the\n * AsyncQueue. These IDs can then be used from tests to check for the presence\n * of operations or to run them early.\n *\n * The string values are used when encoding these timer IDs in JSON spec tests.\n */\nexport const enum TimerId {\n  /** All can be used with runDelayedOperationsEarly() to run all timers. */\n  All = 'all',\n\n  /**\n   * The following 4 timers are used in persistent_stream.ts for the listen and\n   * write streams. The \"Idle\" timer is used to close the stream due to\n   * inactivity. The \"ConnectionBackoff\" timer is used to restart a stream once\n   * the appropriate backoff delay has elapsed.\n   */\n  ListenStreamIdle = 'listen_stream_idle',\n  ListenStreamConnectionBackoff = 'listen_stream_connection_backoff',\n  WriteStreamIdle = 'write_stream_idle',\n  WriteStreamConnectionBackoff = 'write_stream_connection_backoff',\n\n  /**\n   * A timer used in online_state_tracker.ts to transition from\n   * OnlineState.Unknown to Offline after a set timeout, rather than waiting\n   * indefinitely for success or failure.\n   */\n  OnlineStateTimeout = 'online_state_timeout',\n\n  /**\n   * A timer used to update the client metadata in IndexedDb, which is used\n   * to determine the primary leaseholder.\n   */\n  ClientMetadataRefresh = 'client_metadata_refresh',\n\n  /** A timer used to periodically attempt LRU Garbage collection */\n  LruGarbageCollection = 'lru_garbage_collection',\n\n  /**\n   * A timer used to retry transactions. Since there can be multiple concurrent\n   * transactions, multiple of these may be in the queue at a given time.\n   */\n  TransactionRetry = 'transaction_retry',\n\n  /**\n   * A timer used to retry operations scheduled via retryable AsyncQueue\n   * operations.\n   */\n  AsyncQueueRetry = 'async_queue_retry'\n}\n\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\nexport class DelayedOperation<T extends unknown> implements PromiseLike<T> {\n  // handle for use with clearTimeout(), or null if the operation has been\n  // executed or canceled already.\n  private timerHandle: TimerHandle | null;\n\n  private readonly deferred = new Deferred<T>();\n\n  private constructor(\n    private readonly asyncQueue: AsyncQueue,\n    readonly timerId: TimerId,\n    readonly targetTimeMs: number,\n    private readonly op: () => Promise<T>,\n    private readonly removalCallback: (op: DelayedOperation<T>) => void\n  ) {\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(err => {});\n  }\n\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue The queue to schedule the operation on.\n   * @param id A Timer ID identifying the type of operation this is.\n   * @param delayMs The delay (ms) before the operation should be scheduled.\n   * @param op The operation to run.\n   * @param removalCallback A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  static createAndSchedule<R extends unknown>(\n    asyncQueue: AsyncQueue,\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<R>,\n    removalCallback: (op: DelayedOperation<R>) => void\n  ): DelayedOperation<R> {\n    const targetTime = Date.now() + delayMs;\n    const delayedOp = new DelayedOperation(\n      asyncQueue,\n      timerId,\n      targetTime,\n      op,\n      removalCallback\n    );\n    delayedOp.start(delayMs);\n    return delayedOp;\n  }\n\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n  private start(delayMs: number): void {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), delayMs);\n  }\n\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n  skipDelay(): void {\n    return this.handleDelayElapsed();\n  }\n\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n  cancel(reason?: string): void {\n    if (this.timerHandle !== null) {\n      this.clearTimeout();\n      this.deferred.reject(\n        new FirestoreError(\n          Code.CANCELLED,\n          'Operation cancelled' + (reason ? ': ' + reason : '')\n        )\n      );\n    }\n  }\n\n  then = this.deferred.promise.then.bind(this.deferred.promise);\n\n  private handleDelayElapsed(): void {\n    this.asyncQueue.enqueueAndForget(() => {\n      if (this.timerHandle !== null) {\n        this.clearTimeout();\n        return this.op().then(result => {\n          return this.deferred.resolve(result);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n\n  private clearTimeout(): void {\n    if (this.timerHandle !== null) {\n      this.removalCallback(this);\n      clearTimeout(this.timerHandle);\n      this.timerHandle = null;\n    }\n  }\n}\n\nexport class AsyncQueue {\n  // The last promise in the queue.\n  private tail: Promise<unknown> = Promise.resolve();\n\n  // A list of retryable operations. Retryable operations are run in order and\n  // retried with backoff.\n  private retryableOps: Array<() => Promise<void>> = [];\n\n  // Is this AsyncQueue being shut down? Once it is set to true, it will not\n  // be changed again.\n  private _isShuttingDown: boolean = false;\n\n  // Operations scheduled to be queued in the future. Operations are\n  // automatically removed after they are run or canceled.\n  private delayedOperations: Array<DelayedOperation<unknown>> = [];\n\n  // visible for testing\n  failure: FirestoreError | null = null;\n\n  // Flag set while there's an outstanding AsyncQueue operation, used for\n  // assertion sanity-checks.\n  private operationInProgress = false;\n\n  // List of TimerIds to fast-forward delays for.\n  private timerIdsToSkip: TimerId[] = [];\n\n  // Backoff timer used to schedule retries for retryable operations\n  private backoff = new ExponentialBackoff(this, TimerId.AsyncQueueRetry);\n\n  // Visibility handler that triggers an immediate retry of all retryable\n  // operations. Meant to speed up recovery when we regain file system access\n  // after page comes into foreground.\n  private visibilityHandler: () => void = () => {\n    const document = getDocument();\n    if (document) {\n      logDebug(\n        LOG_TAG,\n        'Visibility state changed to ' + document.visibilityState\n      );\n    }\n    this.backoff.skipBackoff();\n  };\n\n  constructor() {\n    const document = getDocument();\n    if (document && typeof document.addEventListener === 'function') {\n      document.addEventListener('visibilitychange', this.visibilityHandler);\n    }\n  }\n\n  // Is this AsyncQueue being shut down? If true, this instance will not enqueue\n  // any new operations, Promises from enqueue requests will not resolve.\n  get isShuttingDown(): boolean {\n    return this._isShuttingDown;\n  }\n\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget<T extends unknown>(op: () => Promise<T>): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue without waiting for it to complete (i.e. we ignore the Promise result).\n   */\n  enqueueAndForgetEvenWhileRestricted<T extends unknown>(\n    op: () => Promise<T>\n  ): void {\n    this.verifyNotFailed();\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueueInternal(op);\n  }\n\n  /**\n   * Initialize the shutdown of this queue. Once this method is called, the\n   * only possible way to request running an operation is through\n   * `enqueueEvenWhileRestricted()`.\n   */\n  enterRestrictedMode(): void {\n    if (!this._isShuttingDown) {\n      this._isShuttingDown = true;\n      const document = getDocument();\n      if (document && typeof document.removeEventListener === 'function') {\n        document.removeEventListener(\n          'visibilitychange',\n          this.visibilityHandler\n        );\n      }\n    }\n  }\n\n  /**\n   * Adds a new operation to the queue. Returns a promise that will be resolved\n   * when the promise returned by the new operation is (with its value).\n   */\n  enqueue<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    this.verifyNotFailed();\n    if (this._isShuttingDown) {\n      // Return a Promise which never resolves.\n      return new Promise<T>(resolve => {});\n    }\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Enqueue a retryable operation.\n   *\n   * A retryable operation is rescheduled with backoff if it fails with a\n   * IndexedDbTransactionError (the error type used by SimpleDb). All\n   * retryable operations are executed in order and only run if all prior\n   * operations were retried successfully.\n   */\n  enqueueRetryable(op: () => Promise<void>): void {\n    this.enqueueAndForget(() => {\n      this.retryableOps.push(op);\n      return this.retryNextOp();\n    });\n  }\n\n  /**\n   * Runs the next operation from the retryable queue. If the operation fails,\n   * reschedules with backoff.\n   */\n  private async retryNextOp(): Promise<void> {\n    if (this.retryableOps.length === 0) {\n      return;\n    }\n\n    try {\n      await this.retryableOps[0]();\n      this.retryableOps.shift();\n      this.backoff.reset();\n    } catch (e) {\n      if (isIndexedDbTransactionError(e)) {\n        logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e);\n      } else {\n        throw e; // Failure will be handled by AsyncQueue\n      }\n    }\n\n    if (this.retryableOps.length > 0) {\n      // If there are additional operations, we re-schedule `retryNextOp()`.\n      // This is necessary to run retryable operations that failed during\n      // their initial attempt since we don't know whether they are already\n      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n      // call scheduled here.\n      // Since `backoffAndRun()` cancels an existing backoff and schedules a\n      // new backoff on every call, there is only ever a single additional\n      // operation in the queue.\n      this.backoff.backoffAndRun(() => this.retryNextOp());\n    }\n  }\n\n  private enqueueInternal<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    const newTail = this.tail.then(() => {\n      this.operationInProgress = true;\n      return op()\n        .catch((error: FirestoreError) => {\n          this.failure = error;\n          this.operationInProgress = false;\n          const message = getMessageOrStack(error);\n          logError('INTERNAL UNHANDLED ERROR: ', message);\n\n          // Re-throw the error so that this.tail becomes a rejected Promise and\n          // all further attempts to chain (via .then) will just short-circuit\n          // and return the rejected Promise.\n          throw error;\n        })\n        .then(result => {\n          this.operationInProgress = false;\n          return result;\n        });\n    });\n    this.tail = newTail;\n    return newTail;\n  }\n\n  /**\n   * Schedules an operation to be queued on the AsyncQueue once the specified\n   * `delayMs` has elapsed. The returned DelayedOperation can be used to cancel\n   * or fast-forward the operation prior to its running.\n   */\n  enqueueAfterDelay<T extends unknown>(\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<T>\n  ): DelayedOperation<T> {\n    this.verifyNotFailed();\n\n    debugAssert(\n      delayMs >= 0,\n      `Attempted to schedule an operation with a negative delay of ${delayMs}`\n    );\n\n    // Fast-forward delays for timerIds that have been overriden.\n    if (this.timerIdsToSkip.indexOf(timerId) > -1) {\n      delayMs = 0;\n    }\n\n    const delayedOp = DelayedOperation.createAndSchedule<T>(\n      this,\n      timerId,\n      delayMs,\n      op,\n      removedOp =>\n        this.removeDelayedOperation(removedOp as DelayedOperation<unknown>)\n    );\n    this.delayedOperations.push(delayedOp as DelayedOperation<unknown>);\n    return delayedOp;\n  }\n\n  private verifyNotFailed(): void {\n    if (this.failure) {\n      fail('AsyncQueue is already failed: ' + getMessageOrStack(this.failure));\n    }\n  }\n\n  /**\n   * Verifies there's an operation currently in-progress on the AsyncQueue.\n   * Unfortunately we can't verify that the running code is in the promise chain\n   * of that operation, so this isn't a foolproof check, but it should be enough\n   * to catch some bugs.\n   */\n  verifyOperationInProgress(): void {\n    debugAssert(\n      this.operationInProgress,\n      'verifyOpInProgress() called when no op in progress on this queue.'\n    );\n  }\n\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n  async drain(): Promise<void> {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let currentTail: Promise<unknown>;\n    do {\n      currentTail = this.tail;\n      await currentTail;\n    } while (currentTail !== this.tail);\n  }\n\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n  containsDelayedOperation(timerId: TimerId): boolean {\n    for (const op of this.delayedOperations) {\n      if (op.timerId === timerId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId Delayed operations up to and including this TimerId will\n   *  be drained. Pass TimerId.All to run all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n  runAllDelayedOperationsUntil(lastTimerId: TimerId): Promise<void> {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.drain().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      this.delayedOperations.sort((a, b) => a.targetTimeMs - b.targetTimeMs);\n\n      for (const op of this.delayedOperations) {\n        op.skipDelay();\n        if (lastTimerId !== TimerId.All && op.timerId === lastTimerId) {\n          break;\n        }\n      }\n\n      return this.drain();\n    });\n  }\n\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n  skipDelaysForTimerId(timerId: TimerId): void {\n    this.timerIdsToSkip.push(timerId);\n  }\n\n  /** Called once a DelayedOperation is run or canceled. */\n  private removeDelayedOperation(op: DelayedOperation<unknown>): void {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const index = this.delayedOperations.indexOf(op);\n    debugAssert(index >= 0, 'Delayed operation not found.');\n    this.delayedOperations.splice(index, 1);\n  }\n}\n\n/**\n * Returns a FirestoreError that can be surfaced to the user if the provided\n * error is an IndexedDbTransactionError. Re-throws the error otherwise.\n */\nexport function wrapInUserErrorIfRecoverable(\n  e: Error,\n  msg: string\n): FirestoreError {\n  logError(LOG_TAG, `${msg}: ${e}`);\n  if (isIndexedDbTransactionError(e)) {\n    return new FirestoreError(Code.UNAVAILABLE, `${msg}: ${e}`);\n  } else {\n    throw e;\n  }\n}\n\n/**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error Error or FirestoreError\n */\nfunction getMessageOrStack(error: Error): string {\n  let message = error.message || '';\n  if (error.stack) {\n    if (error.stack.includes(error.message)) {\n      message = error.stack;\n    } else {\n      message = error.message + '\\n' + error.stack;\n    }\n  }\n  return message;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, debugCast } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { EventHandler } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { canonifyQuery, Query, queryEquals, stringifyQuery } from './query';\nimport { OnlineState } from './types';\nimport { ChangeType, DocumentViewChange, ViewSnapshot } from './view_snapshot';\nimport { wrapInUserErrorIfRecoverable } from '../util/async_queue';\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nclass QueryListenersInfo {\n  viewSnap: ViewSnapshot | undefined = undefined;\n  listeners: QueryListener[] = [];\n}\n\n/**\n * Interface for handling events from the EventManager.\n */\nexport interface Observer<T> {\n  next: EventHandler<T>;\n  error: EventHandler<FirestoreError>;\n}\n\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n *\n * PORTING NOTE: On Web, EventManager `onListen` and `onUnlisten` need to be\n * assigned to SyncEngine's `listen()` and `unlisten()` API before usage. This\n * allows users to tree-shake the Watch logic.\n */\nexport interface EventManager {\n  onListen?: (query: Query) => Promise<ViewSnapshot>;\n  onUnlisten?: (query: Query) => Promise<void>;\n}\n\nexport function newEventManager(): EventManager {\n  return new EventManagerImpl();\n}\n\nexport class EventManagerImpl implements EventManager {\n  queries = new ObjectMap<Query, QueryListenersInfo>(\n    q => canonifyQuery(q),\n    queryEquals\n  );\n\n  onlineState = OnlineState.Unknown;\n\n  snapshotsInSyncListeners: Set<Observer<void>> = new Set();\n\n  /** Callback invoked when a Query is first listen to. */\n  onListen?: (query: Query) => Promise<ViewSnapshot>;\n  /** Callback invoked once all listeners to a Query are removed. */\n  onUnlisten?: (query: Query) => Promise<void>;\n}\n\nexport async function eventManagerListen(\n  eventManager: EventManager,\n  listener: QueryListener\n): Promise<void> {\n  const eventManagerImpl = debugCast(eventManager, EventManagerImpl);\n\n  debugAssert(!!eventManagerImpl.onListen, 'onListen not set');\n  const query = listener.query;\n  let firstListen = false;\n\n  let queryInfo = eventManagerImpl.queries.get(query);\n  if (!queryInfo) {\n    firstListen = true;\n    queryInfo = new QueryListenersInfo();\n  }\n\n  if (firstListen) {\n    try {\n      queryInfo.viewSnap = await eventManagerImpl.onListen(query);\n    } catch (e) {\n      const firestoreError = wrapInUserErrorIfRecoverable(\n        e,\n        `Initialization of query '${stringifyQuery(listener.query)}' failed`\n      );\n      listener.onError(firestoreError);\n      return;\n    }\n  }\n\n  eventManagerImpl.queries.set(query, queryInfo);\n  queryInfo.listeners.push(listener);\n\n  // Run global snapshot listeners if a consistent snapshot has been emitted.\n  const raisedEvent = listener.applyOnlineStateChange(\n    eventManagerImpl.onlineState\n  );\n  debugAssert(\n    !raisedEvent,\n    \"applyOnlineStateChange() shouldn't raise an event for brand-new listeners.\"\n  );\n\n  if (queryInfo.viewSnap) {\n    const raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);\n    if (raisedEvent) {\n      raiseSnapshotsInSyncEvent(eventManagerImpl);\n    }\n  }\n}\n\nexport async function eventManagerUnlisten(\n  eventManager: EventManager,\n  listener: QueryListener\n): Promise<void> {\n  const eventManagerImpl = debugCast(eventManager, EventManagerImpl);\n\n  debugAssert(!!eventManagerImpl.onUnlisten, 'onUnlisten not set');\n  const query = listener.query;\n  let lastListen = false;\n\n  const queryInfo = eventManagerImpl.queries.get(query);\n  if (queryInfo) {\n    const i = queryInfo.listeners.indexOf(listener);\n    if (i >= 0) {\n      queryInfo.listeners.splice(i, 1);\n      lastListen = queryInfo.listeners.length === 0;\n    }\n  }\n\n  if (lastListen) {\n    eventManagerImpl.queries.delete(query);\n    return eventManagerImpl.onUnlisten(query);\n  }\n}\n\nexport function eventManagerOnWatchChange(\n  eventManager: EventManager,\n  viewSnaps: ViewSnapshot[]\n): void {\n  const eventManagerImpl = debugCast(eventManager, EventManagerImpl);\n\n  let raisedEvent = false;\n  for (const viewSnap of viewSnaps) {\n    const query = viewSnap.query;\n    const queryInfo = eventManagerImpl.queries.get(query);\n    if (queryInfo) {\n      for (const listener of queryInfo.listeners) {\n        if (listener.onViewSnapshot(viewSnap)) {\n          raisedEvent = true;\n        }\n      }\n      queryInfo.viewSnap = viewSnap;\n    }\n  }\n  if (raisedEvent) {\n    raiseSnapshotsInSyncEvent(eventManagerImpl);\n  }\n}\n\nexport function eventManagerOnWatchError(\n  eventManager: EventManager,\n  query: Query,\n  error: FirestoreError\n): void {\n  const eventManagerImpl = debugCast(eventManager, EventManagerImpl);\n\n  const queryInfo = eventManagerImpl.queries.get(query);\n  if (queryInfo) {\n    for (const listener of queryInfo.listeners) {\n      listener.onError(error);\n    }\n  }\n\n  // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n  // after an error.\n  eventManagerImpl.queries.delete(query);\n}\n\nexport function eventManagerOnOnlineStateChange(\n  eventManager: EventManager,\n  onlineState: OnlineState\n): void {\n  const eventManagerImpl = debugCast(eventManager, EventManagerImpl);\n\n  eventManagerImpl.onlineState = onlineState;\n  let raisedEvent = false;\n  eventManagerImpl.queries.forEach((_, queryInfo) => {\n    for (const listener of queryInfo.listeners) {\n      // Run global snapshot listeners if a consistent snapshot has been emitted.\n      if (listener.applyOnlineStateChange(onlineState)) {\n        raisedEvent = true;\n      }\n    }\n  });\n  if (raisedEvent) {\n    raiseSnapshotsInSyncEvent(eventManagerImpl);\n  }\n}\n\nexport function addSnapshotsInSyncListener(\n  eventManager: EventManager,\n  observer: Observer<void>\n): void {\n  const eventManagerImpl = debugCast(eventManager, EventManagerImpl);\n\n  eventManagerImpl.snapshotsInSyncListeners.add(observer);\n  // Immediately fire an initial event, indicating all existing listeners\n  // are in-sync.\n  observer.next();\n}\n\nexport function removeSnapshotsInSyncListener(\n  eventManager: EventManager,\n  observer: Observer<void>\n): void {\n  const eventManagerImpl = debugCast(eventManager, EventManagerImpl);\n  eventManagerImpl.snapshotsInSyncListeners.delete(observer);\n}\n\n// Call all global snapshot listeners that have been set.\nfunction raiseSnapshotsInSyncEvent(eventManagerImpl: EventManagerImpl): void {\n  eventManagerImpl.snapshotsInSyncListeners.forEach(observer => {\n    observer.next();\n  });\n}\n\nexport interface ListenOptions {\n  /** Raise events even when only the metadata changes */\n  readonly includeMetadataChanges?: boolean;\n\n  /**\n   * Wait for a sync with the server when online, but still raise events while\n   * offline.\n   */\n  readonly waitForSyncWhenOnline?: boolean;\n}\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nexport class QueryListener {\n  /**\n   * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n   * observer. This flag is set to true once we've actually raised an event.\n   */\n  private raisedInitialEvent = false;\n\n  private options: ListenOptions;\n\n  private snap: ViewSnapshot | null = null;\n\n  private onlineState = OnlineState.Unknown;\n\n  constructor(\n    readonly query: Query,\n    private queryObserver: Observer<ViewSnapshot>,\n    options?: ListenOptions\n  ) {\n    this.options = options || {};\n  }\n\n  /**\n   * Applies the new ViewSnapshot to this listener, raising a user-facing event\n   * if applicable (depending on what changed, whether the user has opted into\n   * metadata-only changes, etc.). Returns true if a user-facing event was\n   * indeed raised.\n   */\n  onViewSnapshot(snap: ViewSnapshot): boolean {\n    debugAssert(\n      snap.docChanges.length > 0 || snap.syncStateChanged,\n      'We got a new snapshot with no changes?'\n    );\n\n    if (!this.options.includeMetadataChanges) {\n      // Remove the metadata only changes.\n      const docChanges: DocumentViewChange[] = [];\n      for (const docChange of snap.docChanges) {\n        if (docChange.type !== ChangeType.Metadata) {\n          docChanges.push(docChange);\n        }\n      }\n      snap = new ViewSnapshot(\n        snap.query,\n        snap.docs,\n        snap.oldDocs,\n        docChanges,\n        snap.mutatedKeys,\n        snap.fromCache,\n        snap.syncStateChanged,\n        /* excludesMetadataChanges= */ true\n      );\n    }\n    let raisedEvent = false;\n    if (!this.raisedInitialEvent) {\n      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n        this.raiseInitialEvent(snap);\n        raisedEvent = true;\n      }\n    } else if (this.shouldRaiseEvent(snap)) {\n      this.queryObserver.next(snap);\n      raisedEvent = true;\n    }\n\n    this.snap = snap;\n    return raisedEvent;\n  }\n\n  onError(error: FirestoreError): void {\n    this.queryObserver.error(error);\n  }\n\n  /** Returns whether a snapshot was raised. */\n  applyOnlineStateChange(onlineState: OnlineState): boolean {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    if (\n      this.snap &&\n      !this.raisedInitialEvent &&\n      this.shouldRaiseInitialEvent(this.snap, onlineState)\n    ) {\n      this.raiseInitialEvent(this.snap);\n      raisedEvent = true;\n    }\n    return raisedEvent;\n  }\n\n  private shouldRaiseInitialEvent(\n    snap: ViewSnapshot,\n    onlineState: OnlineState\n  ): boolean {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Determining whether to raise first event but already had first event'\n    );\n\n    // Always raise the first event when we're synced\n    if (!snap.fromCache) {\n      return true;\n    }\n\n    // NOTE: We consider OnlineState.Unknown as online (it should become Offline\n    // or Online if we wait long enough).\n    const maybeOnline = onlineState !== OnlineState.Offline;\n    // Don't raise the event if we're online, aren't synced yet (checked\n    // above) and are waiting for a sync.\n    if (this.options.waitForSyncWhenOnline && maybeOnline) {\n      debugAssert(\n        snap.fromCache,\n        'Waiting for sync, but snapshot is not from cache'\n      );\n      return false;\n    }\n\n    // Raise data from cache if we have any documents or we are offline\n    return !snap.docs.isEmpty() || onlineState === OnlineState.Offline;\n  }\n\n  private shouldRaiseEvent(snap: ViewSnapshot): boolean {\n    // We don't need to handle includeDocumentMetadataChanges here because\n    // the Metadata only changes have already been stripped out if needed.\n    // At this point the only changes we will see are the ones we should\n    // propagate.\n    if (snap.docChanges.length > 0) {\n      return true;\n    }\n\n    const hasPendingWritesChanged =\n      this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n    if (snap.syncStateChanged || hasPendingWritesChanged) {\n      return this.options.includeMetadataChanges === true;\n    }\n\n    // Generally we should have hit one of the cases above, but it's possible\n    // to get here if there were only metadata docChanges and they got\n    // stripped out.\n    return false;\n  }\n\n  private raiseInitialEvent(snap: ViewSnapshot): void {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Trying to raise initial events for second time'\n    );\n    snap = ViewSnapshot.fromInitialDocuments(\n      snap.query,\n      snap.docs,\n      snap.mutatedKeys,\n      snap.fromCache\n    );\n    this.raisedInitialEvent = true;\n    this.queryObserver.next(snap);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nexport class User {\n  /** A user with a null UID. */\n  static readonly UNAUTHENTICATED = new User(null);\n\n  // TODO(mikelehen): Look into getting a proper uid-equivalent for\n  // non-FirebaseAuth providers.\n  static readonly GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n  static readonly FIRST_PARTY = new User('first-party-uid');\n\n  constructor(readonly uid: string | null) {}\n\n  isAuthenticated(): boolean {\n    return this.uid != null;\n  }\n\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey(): string {\n    if (this.isAuthenticated()) {\n      return 'uid:' + this.uid;\n    } else {\n      return 'anonymous-user';\n    }\n  }\n\n  isEqual(otherUser: User): boolean {\n    return otherUser.uid === this.uid;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { logDebug } from '../util/log';\n\n// TODO(mikelehen): This should be split into multiple files and probably\n// moved to an auth/ folder to match other platforms.\n\nexport interface FirstPartyCredentialsSettings {\n  // These are external types. Prevent minification.\n  ['type']: 'gapi';\n  ['client']: unknown;\n  ['sessionIndex']: string;\n}\n\nexport interface ProviderCredentialsSettings {\n  // These are external types. Prevent minification.\n  ['type']: 'provider';\n  ['client']: CredentialsProvider;\n}\n\n/** Settings for private credentials */\nexport type CredentialsSettings =\n  | FirstPartyCredentialsSettings\n  | ProviderCredentialsSettings;\n\nexport type TokenType = 'OAuth' | 'FirstParty';\nexport interface Token {\n  /** Type of token. */\n  type: TokenType;\n\n  /**\n   * The user with which the token is associated (used for persisting user\n   * state on disk, etc.).\n   */\n  user: User;\n\n  /** Extra header values to be passed along with a request */\n  authHeaders: { [header: string]: string };\n}\n\nexport class OAuthToken implements Token {\n  type = 'OAuth' as TokenType;\n  authHeaders: { [header: string]: string };\n  constructor(value: string, public user: User) {\n    this.authHeaders = {};\n    // Set the headers using Object Literal notation to avoid minification\n    this.authHeaders['Authorization'] = `Bearer ${value}`;\n  }\n}\n\n/**\n * A Listener for credential change events. The listener should fetch a new\n * token and may need to invalidate other state if the current user has also\n * changed.\n */\nexport type CredentialChangeListener = (user: User) => void;\n\n/**\n * Provides methods for getting the uid and token for the current user and\n * listening for changes.\n */\nexport interface CredentialsProvider {\n  /** Requests a token for the current user. */\n  getToken(): Promise<Token | null>;\n\n  /**\n   * Marks the last retrieved token as invalid, making the next GetToken request\n   * force-refresh the token.\n   */\n  invalidateToken(): void;\n\n  /**\n   * Specifies a listener to be notified of credential changes\n   * (sign-in / sign-out, token changes). It is immediately called once with the\n   * initial user.\n   */\n  setChangeListener(changeListener: CredentialChangeListener): void;\n\n  /** Removes the previously-set change listener. */\n  removeChangeListener(): void;\n}\n\n/** A CredentialsProvider that always yields an empty token. */\nexport class EmptyCredentialsProvider implements CredentialsProvider {\n  /**\n   * Stores the listener registered with setChangeListener()\n   * This isn't actually necessary since the UID never changes, but we use this\n   * to verify the listen contract is adhered to in tests.\n   */\n  private changeListener: CredentialChangeListener | null = null;\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve<Token | null>(null);\n  }\n\n  invalidateToken(): void {}\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n    // Fire with initial user.\n    changeListener(User.UNAUTHENTICATED);\n  }\n\n  removeChangeListener(): void {\n    this.changeListener = null;\n  }\n}\n\nexport class FirebaseCredentialsProvider implements CredentialsProvider {\n  /**\n   * The auth token listener registered with FirebaseApp, retained here so we\n   * can unregister it.\n   */\n  private tokenListener: ((token: string | null) => void) | null = null;\n\n  /** Tracks the current User. */\n  private currentUser: User = User.UNAUTHENTICATED;\n  private receivedInitialUser: boolean = false;\n\n  /**\n   * Counter used to detect if the token changed while a getToken request was\n   * outstanding.\n   */\n  private tokenCounter = 0;\n\n  /** The listener registered with setChangeListener(). */\n  private changeListener: CredentialChangeListener | null = null;\n\n  private forceRefresh = false;\n\n  private auth: FirebaseAuthInternal | null;\n\n  constructor(authProvider: Provider<FirebaseAuthInternalName>) {\n    this.tokenListener = () => {\n      this.tokenCounter++;\n      this.currentUser = this.getUser();\n      this.receivedInitialUser = true;\n      if (this.changeListener) {\n        this.changeListener(this.currentUser);\n      }\n    };\n\n    this.tokenCounter = 0;\n\n    this.auth = authProvider.getImmediate({ optional: true });\n\n    if (this.auth) {\n      this.auth.addAuthTokenListener(this.tokenListener!);\n    } else {\n      // if auth is not available, invoke tokenListener once with null token\n      this.tokenListener(null);\n      authProvider.get().then(\n        auth => {\n          this.auth = auth;\n          if (this.tokenListener) {\n            // tokenListener can be removed by removeChangeListener()\n            this.auth.addAuthTokenListener(this.tokenListener);\n          }\n        },\n        () => {\n          /* this.authProvider.get() never rejects */\n        }\n      );\n    }\n  }\n\n  getToken(): Promise<Token | null> {\n    debugAssert(\n      this.tokenListener != null,\n      'getToken cannot be called after listener removed.'\n    );\n\n    // Take note of the current value of the tokenCounter so that this method\n    // can fail (with an ABORTED error) if there is a token change while the\n    // request is outstanding.\n    const initialTokenCounter = this.tokenCounter;\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth.getToken(forceRefresh).then(tokenData => {\n      // Cancel the request since the token changed while the request was\n      // outstanding so the response is potentially for a previous user (which\n      // user, we can't be sure).\n      if (this.tokenCounter !== initialTokenCounter) {\n        logDebug(\n          'FirebaseCredentialsProvider',\n          'getToken aborted due to token change.'\n        );\n        return this.getToken();\n      } else {\n        if (tokenData) {\n          hardAssert(\n            typeof tokenData.accessToken === 'string',\n            'Invalid tokenData returned from getToken():' + tokenData\n          );\n          return new OAuthToken(tokenData.accessToken, this.currentUser);\n        } else {\n          return null;\n        }\n      }\n    });\n  }\n\n  invalidateToken(): void {\n    this.forceRefresh = true;\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n\n    // Fire the initial event\n    if (this.receivedInitialUser) {\n      changeListener(this.currentUser);\n    }\n  }\n\n  removeChangeListener(): void {\n    if (this.auth) {\n      this.auth.removeAuthTokenListener(this.tokenListener!);\n    }\n    this.tokenListener = null;\n    this.changeListener = null;\n  }\n\n  // Auth.getUid() can return null even with a user logged in. It is because\n  // getUid() is synchronous, but the auth code populating Uid is asynchronous.\n  // This method should only be called in the AuthTokenListener callback\n  // to guarantee to get the actual user.\n  private getUser(): User {\n    const currentUid = this.auth && this.auth.getUid();\n    hardAssert(\n      currentUid === null || typeof currentUid === 'string',\n      'Received invalid UID: ' + currentUid\n    );\n    return new User(currentUid);\n  }\n}\n\n// Manual type definition for the subset of Gapi we use.\ninterface Gapi {\n  auth: {\n    getAuthHeaderValueForFirstParty: (\n      userIdentifiers: Array<{ [key: string]: string }>\n    ) => string | null;\n  };\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nexport class FirstPartyToken implements Token {\n  type = 'FirstParty' as TokenType;\n  user = User.FIRST_PARTY;\n\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  get authHeaders(): { [header: string]: string } {\n    const headers: { [header: string]: string } = {\n      'X-Goog-AuthUser': this.sessionIndex\n    };\n    // Use array notation to prevent minification\n    const authHeader = this.gapi['auth']['getAuthHeaderValueForFirstParty']([]);\n    if (authHeader) {\n      headers['Authorization'] = authHeader;\n    }\n    return headers;\n  }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nexport class FirstPartyCredentialsProvider implements CredentialsProvider {\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    // Fire with initial uid.\n    changeListener(User.FIRST_PARTY);\n  }\n\n  removeChangeListener(): void {}\n\n  invalidateToken(): void {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(\n  credentials?: CredentialsSettings\n): CredentialsProvider {\n  if (!credentials) {\n    return new EmptyCredentialsProvider();\n  }\n\n  switch (credentials['type']) {\n    case 'gapi':\n      const client = credentials['client'] as Gapi;\n      // Make sure this really is a Gapi client.\n      hardAssert(\n        !!(\n          typeof client === 'object' &&\n          client !== null &&\n          client['auth'] &&\n          client['auth']['getAuthHeaderValueForFirstParty']\n        ),\n        'unexpected gapi interface'\n      );\n      return new FirstPartyCredentialsProvider(\n        client,\n        credentials['sessionIndex'] || '0'\n      );\n\n    case 'provider':\n      return credentials['client'];\n\n    default:\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'makeCredentialsProvider failed due to invalid credential type'\n      );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { BatchId } from '../core/types';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { arrayEquals } from '../util/misc';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  DocumentVersionMap,\n  documentVersionMap,\n  MaybeDocumentMap\n} from './collections';\nimport { MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\nimport {\n  applyMutationToLocalView,\n  applyMutationToRemoteDocument,\n  Mutation,\n  mutationEquals,\n  MutationResult\n} from './mutation';\n\nexport const BATCHID_UNKNOWN = -1;\n\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nexport class MutationBatch {\n  /**\n   * @param batchId The unique ID of this mutation batch.\n   * @param localWriteTime The original write time of this mutation.\n   * @param baseMutations Mutations that are used to populate the base\n   * values when this mutation is applied locally. This can be used to locally\n   * overwrite values that are persisted in the remote document cache. Base\n   * mutations are never sent to the backend.\n   * @param mutations The user-provided mutations in this mutation batch.\n   * User-provided mutations are applied both locally and remotely on the\n   * backend.\n   */\n  constructor(\n    public batchId: BatchId,\n    public localWriteTime: Timestamp,\n    public baseMutations: Mutation[],\n    public mutations: Mutation[]\n  ) {\n    debugAssert(mutations.length > 0, 'Cannot create an empty mutation batch');\n  }\n\n  /**\n   * Applies all the mutations in this MutationBatch to the specified document\n   * to create a new remote document\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   * @param batchResult The result of applying the MutationBatch to the\n   * backend.\n   */\n  applyToRemoteDocument(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null,\n    batchResult: MutationBatchResult\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToRemoteDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    const mutationResults = batchResult.mutationResults;\n    debugAssert(\n      mutationResults.length === this.mutations.length,\n      `Mismatch between mutations length\n      (${this.mutations.length}) and mutation results length\n      (${mutationResults.length}).`\n    );\n\n    for (let i = 0; i < this.mutations.length; i++) {\n      const mutation = this.mutations[i];\n      if (mutation.key.isEqual(docKey)) {\n        const mutationResult = mutationResults[i];\n        maybeDoc = applyMutationToRemoteDocument(\n          mutation,\n          maybeDoc,\n          mutationResult\n        );\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view of a document given all the mutations in this\n   * batch.\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   */\n  applyToLocalView(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToLocalDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    // First, apply the base state. This allows us to apply non-idempotent\n    // transform against a consistent set of values.\n    for (const mutation of this.baseMutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = applyMutationToLocalView(\n          mutation,\n          maybeDoc,\n          maybeDoc,\n          this.localWriteTime\n        );\n      }\n    }\n\n    const baseDoc = maybeDoc;\n\n    // Second, apply all user-provided mutations.\n    for (const mutation of this.mutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = applyMutationToLocalView(\n          mutation,\n          maybeDoc,\n          baseDoc,\n          this.localWriteTime\n        );\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view for all provided documents given the mutations in\n   * this batch.\n   */\n  applyToLocalDocumentSet(maybeDocs: MaybeDocumentMap): MaybeDocumentMap {\n    // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations\n    // directly (as done in `applyToLocalView()`), we can reduce the complexity\n    // to O(n).\n    let mutatedDocuments = maybeDocs;\n    this.mutations.forEach(m => {\n      const mutatedDocument = this.applyToLocalView(\n        m.key,\n        maybeDocs.get(m.key)\n      );\n      if (mutatedDocument) {\n        mutatedDocuments = mutatedDocuments.insert(m.key, mutatedDocument);\n      }\n    });\n    return mutatedDocuments;\n  }\n\n  keys(): DocumentKeySet {\n    return this.mutations.reduce(\n      (keys, m) => keys.add(m.key),\n      documentKeySet()\n    );\n  }\n\n  isEqual(other: MutationBatch): boolean {\n    return (\n      this.batchId === other.batchId &&\n      arrayEquals(this.mutations, other.mutations, (l, r) =>\n        mutationEquals(l, r)\n      ) &&\n      arrayEquals(this.baseMutations, other.baseMutations, (l, r) =>\n        mutationEquals(l, r)\n      )\n    );\n  }\n}\n\n/** The result of applying a mutation batch to the backend. */\nexport class MutationBatchResult {\n  private constructor(\n    readonly batch: MutationBatch,\n    readonly commitVersion: SnapshotVersion,\n    readonly mutationResults: MutationResult[],\n    /**\n     * A pre-computed mapping from each mutated document to the resulting\n     * version.\n     */\n    readonly docVersions: DocumentVersionMap\n  ) {}\n\n  /**\n   * Creates a new MutationBatchResult for the given batch and results. There\n   * must be one result for each mutation in the batch. This static factory\n   * caches a document=>version mapping (docVersions).\n   */\n  static from(\n    batch: MutationBatch,\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ): MutationBatchResult {\n    hardAssert(\n      batch.mutations.length === results.length,\n      'Mutations sent ' +\n        batch.mutations.length +\n        ' must equal results received ' +\n        results.length\n    );\n\n    let versionMap = documentVersionMap();\n    const mutations = batch.mutations;\n    for (let i = 0; i < mutations.length; i++) {\n      versionMap = versionMap.insert(mutations[i].key, results[i].version);\n    }\n\n    return new MutationBatchResult(batch, commitVersion, results, versionMap);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKeySet, NullableMaybeDocumentMap } from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SnapshotVersion } from '../core/snapshot_version';\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * Entries added to the cache *must* be read first. This is to facilitate\n * calculating the size delta of the pending changes.\n *\n * PORTING NOTE: This class was implemented then removed from other platforms.\n * If byte-counting ends up being needed on the other platforms, consider\n * porting this class as part of that implementation work.\n */\nexport abstract class RemoteDocumentChangeBuffer {\n  // A mapping of document key to the new cache entry that should be written (or null if any\n  // existing cache entry should be removed).\n  protected changes: ObjectMap<\n    DocumentKey,\n    MaybeDocument | null\n  > = new ObjectMap(\n    key => key.toString(),\n    (l, r) => l.isEqual(r)\n  );\n\n  // The read time to use for all added documents in this change buffer.\n  private _readTime: SnapshotVersion | undefined;\n\n  private changesApplied = false;\n\n  protected abstract getFromCache(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null>;\n\n  protected abstract getAllFromCache(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap>;\n\n  protected abstract applyChanges(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<void>;\n\n  protected set readTime(value: SnapshotVersion) {\n    // Right now (for simplicity) we just track a single readTime for all the\n    // added entries since we expect them to all be the same, but we could\n    // rework to store per-entry readTimes if necessary.\n    debugAssert(\n      this._readTime === undefined || this._readTime.isEqual(value),\n      'All changes in a RemoteDocumentChangeBuffer must have the same read time'\n    );\n    this._readTime = value;\n  }\n\n  protected get readTime(): SnapshotVersion {\n    debugAssert(\n      this._readTime !== undefined,\n      'Read time is not set. All removeEntry() calls must include a readTime if `trackRemovals` is used.'\n    );\n    return this._readTime;\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.addEntry()` call.\n   *\n   * You can only modify documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  addEntry(maybeDocument: MaybeDocument, readTime: SnapshotVersion): void {\n    this.assertNotApplied();\n    this.readTime = readTime;\n    this.changes.set(maybeDocument.key, maybeDocument);\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.removeEntry()` call.\n   *\n   * You can only remove documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  removeEntry(key: DocumentKey, readTime?: SnapshotVersion): void {\n    this.assertNotApplied();\n    if (readTime) {\n      this.readTime = readTime;\n    }\n    this.changes.set(key, null);\n  }\n\n  /**\n   * Looks up an entry in the cache. The buffered changes will first be checked,\n   * and if no buffered change applies, this will forward to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKey The key of the entry to look up.\n   * @return The cached Document or NoDocument entry, or null if we have nothing\n   * cached.\n   */\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    this.assertNotApplied();\n    const bufferedEntry = this.changes.get(documentKey);\n    if (bufferedEntry !== undefined) {\n      return PersistencePromise.resolve<MaybeDocument | null>(bufferedEntry);\n    } else {\n      return this.getFromCache(transaction, documentKey);\n    }\n  }\n\n  /**\n   * Looks up several entries in the cache, forwarding to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKeys The keys of the entries to look up.\n   * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an\n   *     entry cannot be found, the corresponding key will be mapped to a null\n   *     value.\n   */\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    return this.getAllFromCache(transaction, documentKeys);\n  }\n\n  /**\n   * Applies buffered changes to the underlying RemoteDocumentCache, using\n   * the provided transaction.\n   */\n  apply(transaction: PersistenceTransaction): PersistencePromise<void> {\n    this.assertNotApplied();\n    this.changesApplied = true;\n    return this.applyChanges(transaction);\n  }\n\n  /** Helper to assert this.changes is not null  */\n  protected assertNotApplied(): void {\n    debugAssert(!this.changesApplied, 'Changes have already been applied.');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { IndexManager } from './index_manager';\nimport { LocalStore } from './local_store';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { TargetData } from './target_data';\n\nexport const PRIMARY_LEASE_LOST_ERROR_MSG =\n  'The current tab is not in the required state to perform this operation. ' +\n  'It might be necessary to refresh the browser tab.';\n\n/**\n * A base class representing a persistence transaction, encapsulating both the\n * transaction's sequence numbers as well as a list of onCommitted listeners.\n *\n * When you call Persistence.runTransaction(), it will create a transaction and\n * pass it to your callback. You then pass it to any method that operates\n * on persistence.\n */\nexport abstract class PersistenceTransaction {\n  private readonly onCommittedListeners: Array<() => void> = [];\n\n  abstract readonly currentSequenceNumber: ListenSequenceNumber;\n\n  addOnCommittedListener(listener: () => void): void {\n    this.onCommittedListeners.push(listener);\n  }\n\n  raiseOnCommittedEvent(): void {\n    this.onCommittedListeners.forEach(listener => listener());\n  }\n}\n\n/** The different modes supported by `IndexedDbPersistence.runTransaction()`. */\nexport type PersistenceTransactionMode =\n  | 'readonly'\n  | 'readwrite'\n  | 'readwrite-primary';\n\n/**\n * Callback type for primary state notifications. This callback can be\n * registered with the persistence layer to get notified when we transition from\n * primary to secondary state and vice versa.\n *\n * Note: Instances can only toggle between Primary and Secondary state if\n * IndexedDB persistence is enabled and multiple clients are active. If this\n * listener is registered with MemoryPersistence, the callback will be called\n * exactly once marking the current instance as Primary.\n */\nexport type PrimaryStateListener = (isPrimary: boolean) => Promise<void>;\n\n/**\n * A ReferenceDelegate instance handles all of the hooks into the document-reference lifecycle. This\n * includes being added to a target, being removed from a target, being subject to mutation, and\n * being mutated by the user.\n *\n * Different implementations may do different things with each of these events. Not every\n * implementation needs to do something with every lifecycle hook.\n *\n * PORTING NOTE: since sequence numbers are attached to transactions in this\n * client, the ReferenceDelegate does not need to deal in transactional\n * semantics (onTransactionStarted/Committed()), nor does it need to track and\n * generate sequence numbers (getCurrentSequenceNumber()).\n */\nexport interface ReferenceDelegate {\n  /** Notify the delegate that the given document was added to a target. */\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that the given document was removed from a target. */\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /**\n   * Notify the delegate that a target was removed. The delegate may, but is not obligated to,\n   * actually delete the target and associated data.\n   */\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void>;\n\n  /**\n   * Notify the delegate that a document may no longer be part of any views or\n   * have any mutations associated.\n   */\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that a limbo document was updated. */\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n}\n\n/**\n * Persistence is the lowest-level shared interface to persistent storage in\n * Firestore.\n *\n * Persistence is used to create MutationQueue and RemoteDocumentCache\n * instances backed by persistence (which might be in-memory or LevelDB).\n *\n * Persistence also exposes an API to create and run PersistenceTransactions\n * against persistence. All read / write operations must be wrapped in a\n * transaction. Implementations of PersistenceTransaction / Persistence only\n * need to guarantee that writes made against the transaction are not made to\n * durable storage until the transaction resolves its PersistencePromise.\n * Since memory-only storage components do not alter durable storage, they are\n * free to ignore the transaction.\n *\n * This contract is enough to allow the LocalStore be be written\n * independently of whether or not the stored state actually is durably\n * persisted. If persistent storage is enabled, writes are grouped together to\n * avoid inconsistent state that could cause crashes.\n *\n * Concretely, when persistent storage is enabled, the persistent versions of\n * MutationQueue, RemoteDocumentCache, and others (the mutators) will\n * defer their writes into a transaction. Once the local store has completed\n * one logical operation, it commits the transaction.\n *\n * When persistent storage is disabled, the non-persistent versions of the\n * mutators ignore the transaction. This short-cut is allowed because\n * memory-only storage leaves no state so it cannot be inconsistent.\n *\n * This simplifies the implementations of the mutators and allows memory-only\n * implementations to supplement the persistent ones without requiring any\n * special dual-store implementation of Persistence. The cost is that the\n * LocalStore needs to be slightly careful about the order of its reads and\n * writes in order to avoid relying on being able to read back uncommitted\n * writes.\n */\nexport interface Persistence {\n  /**\n   * Whether or not this persistence instance has been started.\n   */\n  readonly started: boolean;\n\n  readonly referenceDelegate: ReferenceDelegate;\n\n  /** Starts persistence. */\n  start(): Promise<void>;\n\n  /**\n   * Releases any resources held during eager shutdown.\n   */\n  shutdown(): Promise<void>;\n\n  /**\n   * Registers a listener that gets called when the database receives a\n   * version change event indicating that it has deleted.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setDatabaseDeletedListener(\n    databaseDeletedListener: () => Promise<void>\n  ): void;\n\n  /**\n   * Adjusts the current network state in the client's metadata, potentially\n   * affecting the primary lease.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setNetworkEnabled(networkEnabled: boolean): void;\n\n  /**\n   * Returns a MutationQueue representing the persisted mutations for the\n   * given user.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called for a given user. In particular, the memory-backed\n   * implementation does this to emulate the persisted implementation to the\n   * extent possible (e.g. in the case of uid switching from\n   * sally=>jack=>sally, sally's mutation queue will be preserved).\n   */\n  getMutationQueue(user: User): MutationQueue;\n\n  /**\n   * Returns a TargetCache representing the persisted cache of targets.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getTargetCache(): TargetCache;\n\n  /**\n   * Returns a RemoteDocumentCache representing the persisted cache of remote\n   * documents.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getRemoteDocumentCache(): RemoteDocumentCache;\n\n  /**\n   * Returns an IndexManager instance that manages our persisted query indexes.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getIndexManager(): IndexManager;\n\n  /**\n   * Performs an operation inside a persistence transaction. Any reads or writes\n   * against persistence must be performed within a transaction. Writes will be\n   * committed atomically once the transaction completes.\n   *\n   * Persistence operations are asynchronous and therefore the provided\n   * transactionOperation must return a PersistencePromise. When it is resolved,\n   * the transaction will be committed and the Promise returned by this method\n   * will resolve.\n   *\n   * @param action A description of the action performed by this transaction,\n   * used for logging.\n   * @param mode The underlying mode of the IndexedDb transaction. Can be\n   * 'readonly`, 'readwrite' or 'readwrite-primary'. Transactions marked\n   * 'readwrite-primary' can only be executed by the primary client. In this\n   * mode, the transactionOperation will not be run if the primary lease cannot\n   * be acquired and the returned promise will be rejected with a\n   * FAILED_PRECONDITION error.\n   * @param transactionOperation The operation to run inside a transaction.\n   * @return A promise that is resolved once the transaction completes.\n   */\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T>;\n}\n\n/**\n * Interface implemented by the LRU scheduler to start(), stop() and restart\n * garbage collection.\n */\nexport interface GarbageCollectionScheduler {\n  readonly started: boolean;\n  start(localStore: LocalStore): void;\n  stop(): void;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  asCollectionQueryAtPath,\n  isCollectionGroupQuery,\n  isDocumentQuery,\n  Query,\n  queryMatches\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  documentMap,\n  MaybeDocumentMap,\n  maybeDocumentMap,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { ResourcePath } from '../model/path';\n\nimport { debugAssert } from '../util/assert';\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { applyMutationToLocalView, PatchMutation } from '../model/mutation';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\n\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nexport class LocalDocumentsView {\n  constructor(\n    readonly remoteDocumentCache: RemoteDocumentCache,\n    readonly mutationQueue: MutationQueue,\n    readonly indexManager: IndexManager\n  ) {}\n\n  /**\n   * Get the local view of the document identified by `key`.\n   *\n   * @return Local view of the document or null if we don't have any cached\n   * state for it.\n   */\n  getDocument(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKey(transaction, key)\n      .next(batches => this.getDocumentInternal(transaction, key, batches));\n  }\n\n  /** Internal version of `getDocument` that allows reusing batches. */\n  private getDocumentInternal(\n    transaction: PersistenceTransaction,\n    key: DocumentKey,\n    inBatches: MutationBatch[]\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.remoteDocumentCache.getEntry(transaction, key).next(doc => {\n      for (const batch of inBatches) {\n        doc = batch.applyToLocalView(key, doc);\n      }\n      return doc;\n    });\n  }\n\n  // Returns the view of the given `docs` as they would appear after applying\n  // all mutations in the given `batches`.\n  private applyLocalMutationsToDocuments(\n    transaction: PersistenceTransaction,\n    docs: NullableMaybeDocumentMap,\n    batches: MutationBatch[]\n  ): NullableMaybeDocumentMap {\n    let results = nullableMaybeDocumentMap();\n    docs.forEach((key, localView) => {\n      for (const batch of batches) {\n        localView = batch.applyToLocalView(key, localView);\n      }\n      results = results.insert(key, localView);\n    });\n    return results;\n  }\n\n  /**\n   * Gets the local view of the documents identified by `keys`.\n   *\n   * If we don't have cached state for a document in `keys`, a NoDocument will\n   * be stored for that key in the resulting set.\n   */\n  getDocuments(\n    transaction: PersistenceTransaction,\n    keys: DocumentKeySet\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.remoteDocumentCache\n      .getEntries(transaction, keys)\n      .next(docs => this.getLocalViewOfDocuments(transaction, docs));\n  }\n\n  /**\n   * Similar to `getDocuments`, but creates the local view from the given\n   * `baseDocs` without retrieving documents from the local store.\n   */\n  getLocalViewOfDocuments(\n    transaction: PersistenceTransaction,\n    baseDocs: NullableMaybeDocumentMap\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs)\n      .next(batches => {\n        const docs = this.applyLocalMutationsToDocuments(\n          transaction,\n          baseDocs,\n          batches\n        );\n        let results = maybeDocumentMap();\n        docs.forEach((key, maybeDoc) => {\n          // TODO(http://b/32275378): Don't conflate missing / deleted.\n          if (!maybeDoc) {\n            maybeDoc = new NoDocument(key, SnapshotVersion.min());\n          }\n          results = results.insert(key, maybeDoc);\n        });\n\n        return results;\n      });\n  }\n\n  /**\n   * Performs a query against the local view of all documents.\n   *\n   * @param transaction The persistence transaction.\n   * @param query The query to match documents against.\n   * @param sinceReadTime If not set to SnapshotVersion.min(), return only\n   *     documents that have been read since this snapshot version (exclusive).\n   */\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    if (isDocumentQuery(query)) {\n      return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n    } else if (isCollectionGroupQuery(query)) {\n      return this.getDocumentsMatchingCollectionGroupQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    } else {\n      return this.getDocumentsMatchingCollectionQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    }\n  }\n\n  private getDocumentsMatchingDocumentQuery(\n    transaction: PersistenceTransaction,\n    docPath: ResourcePath\n  ): PersistencePromise<DocumentMap> {\n    // Just do a simple document lookup.\n    return this.getDocument(transaction, new DocumentKey(docPath)).next(\n      maybeDoc => {\n        let result = documentMap();\n        if (maybeDoc instanceof Document) {\n          result = result.insert(maybeDoc.key, maybeDoc);\n        }\n        return result;\n      }\n    );\n  }\n\n  private getDocumentsMatchingCollectionGroupQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      query.path.isEmpty(),\n      'Currently we only support collection group queries at the root.'\n    );\n    const collectionId = query.collectionGroup!;\n    let results = documentMap();\n    return this.indexManager\n      .getCollectionParents(transaction, collectionId)\n      .next(parents => {\n        // Perform a collection query against each parent that contains the\n        // collectionId and aggregate the results.\n        return PersistencePromise.forEach(parents, (parent: ResourcePath) => {\n          const collectionQuery = asCollectionQueryAtPath(\n            query,\n            parent.child(collectionId)\n          );\n          return this.getDocumentsMatchingCollectionQuery(\n            transaction,\n            collectionQuery,\n            sinceReadTime\n          ).next(r => {\n            r.forEach((key, doc) => {\n              results = results.insert(key, doc);\n            });\n          });\n        }).next(() => results);\n      });\n  }\n\n  private getDocumentsMatchingCollectionQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    // Query the remote documents and overlay mutations.\n    let results: DocumentMap;\n    let mutationBatches: MutationBatch[];\n    return this.remoteDocumentCache\n      .getDocumentsMatchingQuery(transaction, query, sinceReadTime)\n      .next(queryResults => {\n        results = queryResults;\n        return this.mutationQueue.getAllMutationBatchesAffectingQuery(\n          transaction,\n          query\n        );\n      })\n      .next(matchingMutationBatches => {\n        mutationBatches = matchingMutationBatches;\n        // It is possible that a PatchMutation can make a document match a query, even if\n        // the version in the RemoteDocumentCache is not a match yet (waiting for server\n        // to ack). To handle this, we find all document keys affected by the PatchMutations\n        // that are not in `result` yet, and back fill them via `remoteDocumentCache.getEntries`,\n        // otherwise those `PatchMutations` will be ignored because no base document can be found,\n        // and lead to missing result for the query.\n        return this.addMissingBaseDocuments(\n          transaction,\n          mutationBatches,\n          results\n        ).next(mergedDocuments => {\n          results = mergedDocuments;\n\n          for (const batch of mutationBatches) {\n            for (const mutation of batch.mutations) {\n              const key = mutation.key;\n              const baseDoc = results.get(key);\n              const mutatedDoc = applyMutationToLocalView(\n                mutation,\n                baseDoc,\n                baseDoc,\n                batch.localWriteTime\n              );\n              if (mutatedDoc instanceof Document) {\n                results = results.insert(key, mutatedDoc);\n              } else {\n                results = results.remove(key);\n              }\n            }\n          }\n        });\n      })\n      .next(() => {\n        // Finally, filter out any documents that don't actually match\n        // the query.\n        results.forEach((key, doc) => {\n          if (!queryMatches(query, doc)) {\n            results = results.remove(key);\n          }\n        });\n\n        return results;\n      });\n  }\n\n  private addMissingBaseDocuments(\n    transaction: PersistenceTransaction,\n    matchingMutationBatches: MutationBatch[],\n    existingDocuments: DocumentMap\n  ): PersistencePromise<DocumentMap> {\n    let missingBaseDocEntriesForPatching = documentKeySet();\n    for (const batch of matchingMutationBatches) {\n      for (const mutation of batch.mutations) {\n        if (\n          mutation instanceof PatchMutation &&\n          existingDocuments.get(mutation.key) === null\n        ) {\n          missingBaseDocEntriesForPatching = missingBaseDocEntriesForPatching.add(\n            mutation.key\n          );\n        }\n      }\n    }\n\n    let mergedDocuments = existingDocuments;\n    return this.remoteDocumentCache\n      .getEntries(transaction, missingBaseDocEntriesForPatching)\n      .next(missingBaseDocs => {\n        missingBaseDocs.forEach((key, doc) => {\n          if (doc !== null && doc instanceof Document) {\n            mergedDocuments = mergedDocuments.insert(key, doc);\n          }\n        });\n        return mergedDocuments;\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from '../core/types';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\n\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nexport class LocalViewChanges {\n  constructor(\n    readonly targetId: TargetId,\n    readonly fromCache: boolean,\n    readonly addedKeys: DocumentKeySet,\n    readonly removedKeys: DocumentKeySet\n  ) {}\n\n  static fromSnapshot(\n    targetId: TargetId,\n    viewSnapshot: ViewSnapshot\n  ): LocalViewChanges {\n    let addedKeys = documentKeySet();\n    let removedKeys = documentKeySet();\n\n    for (const docChange of viewSnapshot.docChanges) {\n      switch (docChange.type) {\n        case ChangeType.Added:\n          addedKeys = addedKeys.add(docChange.doc.key);\n          break;\n        case ChangeType.Removed:\n          removedKeys = removedKeys.add(docChange.doc.key);\n          break;\n        default:\n        // do nothing\n      }\n    }\n\n    return new LocalViewChanges(\n      targetId,\n      viewSnapshot.fromCache,\n      addedKeys,\n      removedKeys\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequenceNumber } from './types';\n\n/**\n * `SequenceNumberSyncer` defines the methods required to keep multiple instances of a\n * `ListenSequence` in sync.\n */\nexport interface SequenceNumberSyncer {\n  // Notify the syncer that a new sequence number has been used.\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n  // Setting this property allows the syncer to notify when a sequence number has been used, and\n  // and lets the ListenSequence adjust its internal previous value accordingly.\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n}\n\n/**\n * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to\n * exceed. All subsequent calls to next will return increasing values. If provided with a\n * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as\n * well as write out sequence numbers that it produces via `next()`.\n */\nexport class ListenSequence {\n  static readonly INVALID: ListenSequenceNumber = -1;\n\n  private writeNewSequenceNumber?: (\n    newSequenceNumber: ListenSequenceNumber\n  ) => void;\n\n  constructor(\n    private previousValue: ListenSequenceNumber,\n    sequenceNumberSyncer?: SequenceNumberSyncer\n  ) {\n    if (sequenceNumberSyncer) {\n      sequenceNumberSyncer.sequenceNumberHandler = sequenceNumber =>\n        this.setPreviousValue(sequenceNumber);\n      this.writeNewSequenceNumber = sequenceNumber =>\n        sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);\n    }\n  }\n\n  private setPreviousValue(\n    externalPreviousValue: ListenSequenceNumber\n  ): ListenSequenceNumber {\n    this.previousValue = Math.max(externalPreviousValue, this.previousValue);\n    return this.previousValue;\n  }\n\n  next(): ListenSequenceNumber {\n    const nextValue = ++this.previousValue;\n    if (this.writeNewSequenceNumber) {\n      this.writeNewSequenceNumber(nextValue);\n    }\n    return nextValue;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { getLogLevel, logDebug, LogLevel } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ignoreIfPrimaryLeaseLoss, LocalStore } from './local_store';\nimport {\n  GarbageCollectionScheduler,\n  PersistenceTransaction\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetData } from './target_data';\nimport { isIndexedDbTransactionError } from './simple_db';\n\nconst LOG_TAG = 'LruGarbageCollector';\n\n/**\n * Persistence layers intending to use LRU Garbage collection should have reference delegates that\n * implement this interface. This interface defines the operations that the LRU garbage collector\n * needs from the persistence layer.\n */\nexport interface LruDelegate {\n  readonly garbageCollector: LruGarbageCollector;\n\n  /** Enumerates all the targets in the TargetCache. */\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (target: TargetData) => void\n  ): PersistencePromise<void>;\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number>;\n\n  /**\n   * Enumerates sequence numbers for documents not associated with a target.\n   * Note that this may include duplicate sequence numbers.\n   */\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void>;\n\n  /**\n   * Removes all targets that have a sequence number less than or equal to `upperBound`, and are not\n   * present in the `activeTargetIds` set.\n   *\n   * @return the number of targets removed.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number>;\n\n  /**\n   * Removes all unreferenced documents from the cache that have a sequence number less than or\n   * equal to the given `upperBound`.\n   *\n   * @return the number of documents removed.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number>;\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number>;\n}\n\n/**\n * Describes a map whose keys are active target ids. We do not care about the type of the\n * values.\n */\nexport type ActiveTargets = SortedMap<TargetId, unknown>;\n\n// The type and comparator for the items contained in the SortedSet used in\n// place of a priority queue for the RollingSequenceNumberBuffer.\ntype BufferEntry = [ListenSequenceNumber, number];\nfunction bufferEntryComparator(\n  [aSequence, aIndex]: BufferEntry,\n  [bSequence, bIndex]: BufferEntry\n): number {\n  const seqCmp = primitiveComparator(aSequence, bSequence);\n  if (seqCmp === 0) {\n    // This order doesn't matter, but we can bias against churn by sorting\n    // entries created earlier as less than newer entries.\n    return primitiveComparator(aIndex, bIndex);\n  } else {\n    return seqCmp;\n  }\n}\n\n/**\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\n * lowest n values passed to `addElement`, and finally reports the largest of\n * them in `maxValue`.\n */\nclass RollingSequenceNumberBuffer {\n  private buffer: SortedSet<BufferEntry> = new SortedSet<BufferEntry>(\n    bufferEntryComparator\n  );\n\n  private previousIndex = 0;\n\n  constructor(private readonly maxElements: number) {}\n\n  private nextIndex(): number {\n    return ++this.previousIndex;\n  }\n\n  addElement(sequenceNumber: ListenSequenceNumber): void {\n    const entry: BufferEntry = [sequenceNumber, this.nextIndex()];\n    if (this.buffer.size < this.maxElements) {\n      this.buffer = this.buffer.add(entry);\n    } else {\n      const highestValue = this.buffer.last()!;\n      if (bufferEntryComparator(entry, highestValue) < 0) {\n        this.buffer = this.buffer.delete(highestValue).add(entry);\n      }\n    }\n  }\n\n  get maxValue(): ListenSequenceNumber {\n    // Guaranteed to be non-empty. If we decide we are not collecting any\n    // sequence numbers, nthSequenceNumber below short-circuits. If we have\n    // decided that we are collecting n sequence numbers, it's because n is some\n    // percentage of the existing sequence numbers. That means we should never\n    // be in a situation where we are collecting sequence numbers but don't\n    // actually have any.\n    return this.buffer.last()![0];\n  }\n}\n\n/**\n * Describes the results of a garbage collection run. `didRun` will be set to\n * `false` if collection was skipped (either it is disabled or the cache size\n * has not hit the threshold). If collection ran, the other fields will be\n * filled in with the details of the results.\n */\nexport interface LruResults {\n  readonly didRun: boolean;\n  readonly sequenceNumbersCollected: number;\n  readonly targetsRemoved: number;\n  readonly documentsRemoved: number;\n}\n\nconst GC_DID_NOT_RUN: LruResults = {\n  didRun: false,\n  sequenceNumbersCollected: 0,\n  targetsRemoved: 0,\n  documentsRemoved: 0\n};\n\nexport const LRU_COLLECTION_DISABLED = -1;\nexport const LRU_MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\nexport const LRU_DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\n\nexport class LruParams {\n  private static readonly DEFAULT_COLLECTION_PERCENTILE = 10;\n  private static readonly DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\n\n  static withCacheSize(cacheSize: number): LruParams {\n    return new LruParams(\n      cacheSize,\n      LruParams.DEFAULT_COLLECTION_PERCENTILE,\n      LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n    );\n  }\n\n  static readonly DEFAULT: LruParams = new LruParams(\n    LRU_DEFAULT_CACHE_SIZE_BYTES,\n    LruParams.DEFAULT_COLLECTION_PERCENTILE,\n    LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n  );\n\n  static readonly DISABLED: LruParams = new LruParams(\n    LRU_COLLECTION_DISABLED,\n    0,\n    0\n  );\n\n  constructor(\n    // When we attempt to collect, we will only do so if the cache size is greater than this\n    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\n    readonly cacheSizeCollectionThreshold: number,\n    // The percentage of sequence numbers that we will attempt to collect\n    readonly percentileToCollect: number,\n    // A cap on the total number of sequence numbers that will be collected. This prevents\n    // us from collecting a huge number of sequence numbers if the cache has grown very large.\n    readonly maximumSequenceNumbersToCollect: number\n  ) {}\n}\n\n/** How long we wait to try running LRU GC after SDK initialization. */\nconst INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\n/** Minimum amount of time between GC checks, after the first one. */\nconst REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\n\n/**\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\n * whether or not GC is enabled, as well as which delay to use before the next run.\n */\nexport class LruScheduler implements GarbageCollectionScheduler {\n  private hasRun: boolean = false;\n  private gcTask: DelayedOperation<void> | null;\n\n  constructor(\n    private readonly garbageCollector: LruGarbageCollector,\n    private readonly asyncQueue: AsyncQueue\n  ) {\n    this.gcTask = null;\n  }\n\n  start(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot start an already started LruScheduler'\n    );\n    if (\n      this.garbageCollector.params.cacheSizeCollectionThreshold !==\n      LRU_COLLECTION_DISABLED\n    ) {\n      this.scheduleGC(localStore);\n    }\n  }\n\n  stop(): void {\n    if (this.gcTask) {\n      this.gcTask.cancel();\n      this.gcTask = null;\n    }\n  }\n\n  get started(): boolean {\n    return this.gcTask !== null;\n  }\n\n  private scheduleGC(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot schedule GC while a task is pending'\n    );\n    const delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;\n    logDebug(\n      'LruGarbageCollector',\n      `Garbage collection scheduled in ${delay}ms`\n    );\n    this.gcTask = this.asyncQueue.enqueueAfterDelay(\n      TimerId.LruGarbageCollection,\n      delay,\n      async () => {\n        this.gcTask = null;\n        this.hasRun = true;\n        try {\n          await localStore.collectGarbage(this.garbageCollector);\n        } catch (e) {\n          if (isIndexedDbTransactionError(e)) {\n            logDebug(\n              LOG_TAG,\n              'Ignoring IndexedDB error during garbage collection: ',\n              e\n            );\n          } else {\n            await ignoreIfPrimaryLeaseLoss(e);\n          }\n        }\n        await this.scheduleGC(localStore);\n      }\n    );\n  }\n}\n\n/** Implements the steps for LRU garbage collection. */\nexport class LruGarbageCollector {\n  constructor(\n    private readonly delegate: LruDelegate,\n    readonly params: LruParams\n  ) {}\n\n  /** Given a percentile of target to collect, returns the number of targets to collect. */\n  calculateTargetCount(\n    txn: PersistenceTransaction,\n    percentile: number\n  ): PersistencePromise<number> {\n    return this.delegate.getSequenceNumberCount(txn).next(targetCount => {\n      return Math.floor((percentile / 100.0) * targetCount);\n    });\n  }\n\n  /** Returns the nth sequence number, counting in order from the smallest. */\n  nthSequenceNumber(\n    txn: PersistenceTransaction,\n    n: number\n  ): PersistencePromise<ListenSequenceNumber> {\n    if (n === 0) {\n      return PersistencePromise.resolve(ListenSequence.INVALID);\n    }\n\n    const buffer = new RollingSequenceNumberBuffer(n);\n    return this.delegate\n      .forEachTarget(txn, target => buffer.addElement(target.sequenceNumber))\n      .next(() => {\n        return this.delegate.forEachOrphanedDocumentSequenceNumber(\n          txn,\n          sequenceNumber => buffer.addElement(sequenceNumber)\n        );\n      })\n      .next(() => buffer.maxValue);\n  }\n\n  /**\n   * Removes targets with a sequence number equal to or less than the given upper bound, and removes\n   * document associations with those targets.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  /**\n   * Removes documents that have a sequence number equal to or less than the upper bound and are not\n   * otherwise pinned.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    return this.delegate.removeOrphanedDocuments(txn, upperBound);\n  }\n\n  collect(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    if (this.params.cacheSizeCollectionThreshold === LRU_COLLECTION_DISABLED) {\n      logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\n      return PersistencePromise.resolve(GC_DID_NOT_RUN);\n    }\n\n    return this.getCacheSize(txn).next(cacheSize => {\n      if (cacheSize < this.params.cacheSizeCollectionThreshold) {\n        logDebug(\n          'LruGarbageCollector',\n          `Garbage collection skipped; Cache size ${cacheSize} ` +\n            `is lower than threshold ${this.params.cacheSizeCollectionThreshold}`\n        );\n        return GC_DID_NOT_RUN;\n      } else {\n        return this.runGarbageCollection(txn, activeTargetIds);\n      }\n    });\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.delegate.getCacheSize(txn);\n  }\n\n  private runGarbageCollection(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    let upperBoundSequenceNumber: number;\n    let sequenceNumbersToCollect: number, targetsRemoved: number;\n    // Timestamps for various pieces of the process\n    let countedTargetsTs: number,\n      foundUpperBoundTs: number,\n      removedTargetsTs: number,\n      removedDocumentsTs: number;\n    const startTs = Date.now();\n    return this.calculateTargetCount(txn, this.params.percentileToCollect)\n      .next(sequenceNumbers => {\n        // Cap at the configured max\n        if (sequenceNumbers > this.params.maximumSequenceNumbersToCollect) {\n          logDebug(\n            'LruGarbageCollector',\n            'Capping sequence numbers to collect down ' +\n              `to the maximum of ${this.params.maximumSequenceNumbersToCollect} ` +\n              `from ${sequenceNumbers}`\n          );\n          sequenceNumbersToCollect = this.params\n            .maximumSequenceNumbersToCollect;\n        } else {\n          sequenceNumbersToCollect = sequenceNumbers;\n        }\n        countedTargetsTs = Date.now();\n\n        return this.nthSequenceNumber(txn, sequenceNumbersToCollect);\n      })\n      .next(upperBound => {\n        upperBoundSequenceNumber = upperBound;\n        foundUpperBoundTs = Date.now();\n\n        return this.removeTargets(\n          txn,\n          upperBoundSequenceNumber,\n          activeTargetIds\n        );\n      })\n      .next(numTargetsRemoved => {\n        targetsRemoved = numTargetsRemoved;\n        removedTargetsTs = Date.now();\n\n        return this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\n      })\n      .next(documentsRemoved => {\n        removedDocumentsTs = Date.now();\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          const desc =\n            'LRU Garbage Collection\\n' +\n            `\\tCounted targets in ${countedTargetsTs - startTs}ms\\n` +\n            `\\tDetermined least recently used ${sequenceNumbersToCollect} in ` +\n            `${foundUpperBoundTs - countedTargetsTs}ms\\n` +\n            `\\tRemoved ${targetsRemoved} targets in ` +\n            `${removedTargetsTs - foundUpperBoundTs}ms\\n` +\n            `\\tRemoved ${documentsRemoved} documents in ` +\n            `${removedDocumentsTs - removedTargetsTs}ms\\n` +\n            `Total Duration: ${removedDocumentsTs - startTs}ms`;\n          logDebug('LruGarbageCollector', desc);\n        }\n\n        return PersistencePromise.resolve<LruResults>({\n          didRun: true,\n          sequenceNumbersCollected: sequenceNumbersToCollect,\n          targetsRemoved,\n          documentsRemoved\n        });\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { fail, hardAssert } from '../util/assert';\n\n/**\n * Helpers for dealing with resource paths stored in IndexedDB.\n *\n * Resource paths in their canonical string form do not sort as the server\n * sorts them. Specifically the server splits paths into segments first and then\n * sorts, putting end-of-segment before any character. In a UTF-8 string\n * encoding the slash ('/') that denotes the end-of-segment naturally comes\n * after other characters so the intent here is to encode the path delimiters in\n * such a way that the resulting strings sort naturally.\n *\n * Resource paths are also used for prefix scans so it's important to\n * distinguish whole segments from any longer segments of which they might be a\n * prefix. For example, it's important to make it possible to scan documents in\n * a collection \"foo\" without encountering documents in a collection \"foobar\".\n *\n * Separate from the concerns about resource path ordering and separation,\n * On Android, SQLite imposes additional restrictions since it does not handle\n * keys with embedded NUL bytes particularly well. Rather than change the\n * implementation we keep the encoding identical to keep the ports similar.\n *\n * Taken together this means resource paths when encoded for storage in\n * IndexedDB have the following characteristics:\n *\n *   * Segment separators (\"/\") sort before everything else.\n *   * All paths have a trailing separator.\n *   * NUL bytes do not exist in the output, since IndexedDB doesn't treat them\n * well.\n *\n * Therefore resource paths are encoded into string form using the following\n * rules:\n *\n *   * '\\x01' is used as an escape character.\n *   * Path separators are encoded as \"\\x01\\x01\"\n *   * NUL bytes are encoded as \"\\x01\\x10\"\n *   * '\\x01' is encoded as \"\\x01\\x11\"\n *\n * This encoding leaves some room between path separators and the NUL byte\n * just in case we decide to support integer document ids after all.\n *\n * Note that characters treated specially by the backend ('.', '/', and '~')\n * are not treated specially here. This class assumes that any unescaping of\n * resource path strings into actual ResourcePath objects will handle these\n * characters there.\n */\nexport type EncodedResourcePath = string;\n\nconst escapeChar = '\\u0001';\nconst encodedSeparatorChar = '\\u0001';\nconst encodedNul = '\\u0010';\nconst encodedEscape = '\\u0011';\n\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nexport function encodeResourcePath(path: ResourcePath): EncodedResourcePath {\n  let result = '';\n  for (let i = 0; i < path.length; i++) {\n    if (result.length > 0) {\n      result = encodeSeparator(result);\n    }\n    result = encodeSegment(path.get(i), result);\n  }\n  return encodeSeparator(result);\n}\n\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment: string, resultBuf: string): string {\n  let result = resultBuf;\n  const length = segment.length;\n  for (let i = 0; i < length; i++) {\n    const c = segment.charAt(i);\n    switch (c) {\n      case '\\0':\n        result += escapeChar + encodedNul;\n        break;\n      case escapeChar:\n        result += escapeChar + encodedEscape;\n        break;\n      default:\n        result += c;\n    }\n  }\n  return result;\n}\n\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result: string): string {\n  return result + escapeChar + encodedSeparatorChar;\n}\n\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nexport function decodeResourcePath(path: EncodedResourcePath): ResourcePath {\n  // Event the empty path must encode as a path of at least length 2. A path\n  // with exactly 2 must be the empty path.\n  const length = path.length;\n  hardAssert(length >= 2, 'Invalid path ' + path);\n  if (length === 2) {\n    hardAssert(\n      path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar,\n      'Non-empty path ' + path + ' had length 2'\n    );\n    return ResourcePath.emptyPath();\n  }\n\n  // Escape characters cannot exist past the second-to-last position in the\n  // source value.\n  const lastReasonableEscapeIndex = length - 2;\n\n  const segments: string[] = [];\n  let segmentBuilder = '';\n\n  for (let start = 0; start < length; ) {\n    // The last two characters of a valid encoded path must be a separator, so\n    // there must be an end to this segment.\n    const end = path.indexOf(escapeChar, start);\n    if (end < 0 || end > lastReasonableEscapeIndex) {\n      fail('Invalid encoded resource path: \"' + path + '\"');\n    }\n\n    const next = path.charAt(end + 1);\n    switch (next) {\n      case encodedSeparatorChar:\n        const currentPiece = path.substring(start, end);\n        let segment;\n        if (segmentBuilder.length === 0) {\n          // Avoid copying for the common case of a segment that excludes \\0\n          // and \\001\n          segment = currentPiece;\n        } else {\n          segmentBuilder += currentPiece;\n          segment = segmentBuilder;\n          segmentBuilder = '';\n        }\n        segments.push(segment);\n        break;\n      case encodedNul:\n        segmentBuilder += path.substring(start, end);\n        segmentBuilder += '\\0';\n        break;\n      case encodedEscape:\n        // The escape character can be used in the output to encode itself.\n        segmentBuilder += path.substring(start, end + 1);\n        break;\n      default:\n        fail('Invalid encoded resource path: \"' + path + '\"');\n    }\n\n    start = end + 2;\n  }\n\n  return new ResourcePath(segments);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  Document,\n  MaybeDocument,\n  NoDocument,\n  UnknownDocument\n} from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { DocumentsTarget as PublicDocumentsTarget } from '../protos/firestore_proto_api';\nimport {\n  fromDocument,\n  fromDocumentsTarget,\n  fromMutation,\n  fromQueryTarget,\n  JsonProtoSerializer,\n  toDocument,\n  toDocumentsTarget,\n  toMutation,\n  toQueryTarget\n} from '../remote/serializer';\nimport { debugAssert, fail } from '../util/assert';\nimport { ByteString } from '../util/byte_string';\nimport { canonifyTarget, isDocumentTarget, Target } from '../core/target';\nimport {\n  DbMutationBatch,\n  DbNoDocument,\n  DbQuery,\n  DbRemoteDocument,\n  DbTarget,\n  DbTimestamp,\n  DbTimestampKey,\n  DbUnknownDocument\n} from './indexeddb_schema';\nimport { TargetData, TargetPurpose } from './target_data';\n\n/** Serializer for values stored in the LocalStore. */\nexport class LocalSerializer {\n  constructor(readonly remoteSerializer: JsonProtoSerializer) {}\n}\n\n/** Decodes a remote document from storage locally to a Document. */\nexport function fromDbRemoteDocument(\n  localSerializer: LocalSerializer,\n  remoteDoc: DbRemoteDocument\n): MaybeDocument {\n  if (remoteDoc.document) {\n    return fromDocument(\n      localSerializer.remoteSerializer,\n      remoteDoc.document,\n      !!remoteDoc.hasCommittedMutations\n    );\n  } else if (remoteDoc.noDocument) {\n    const key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n    const version = fromDbTimestamp(remoteDoc.noDocument.readTime);\n    return new NoDocument(key, version, {\n      hasCommittedMutations: !!remoteDoc.hasCommittedMutations\n    });\n  } else if (remoteDoc.unknownDocument) {\n    const key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);\n    const version = fromDbTimestamp(remoteDoc.unknownDocument.version);\n    return new UnknownDocument(key, version);\n  } else {\n    return fail('Unexpected DbRemoteDocument');\n  }\n}\n\n/** Encodes a document for storage locally. */\nexport function toDbRemoteDocument(\n  localSerializer: LocalSerializer,\n  maybeDoc: MaybeDocument,\n  readTime: SnapshotVersion\n): DbRemoteDocument {\n  const dbReadTime = toDbTimestampKey(readTime);\n  const parentPath = maybeDoc.key.path.popLast().toArray();\n  if (maybeDoc instanceof Document) {\n    const doc = toDocument(localSerializer.remoteSerializer, maybeDoc);\n    const hasCommittedMutations = maybeDoc.hasCommittedMutations;\n    return new DbRemoteDocument(\n      /* unknownDocument= */ null,\n      /* noDocument= */ null,\n      doc,\n      hasCommittedMutations,\n      dbReadTime,\n      parentPath\n    );\n  } else if (maybeDoc instanceof NoDocument) {\n    const path = maybeDoc.key.path.toArray();\n    const readTime = toDbTimestamp(maybeDoc.version);\n    const hasCommittedMutations = maybeDoc.hasCommittedMutations;\n    return new DbRemoteDocument(\n      /* unknownDocument= */ null,\n      new DbNoDocument(path, readTime),\n      /* document= */ null,\n      hasCommittedMutations,\n      dbReadTime,\n      parentPath\n    );\n  } else if (maybeDoc instanceof UnknownDocument) {\n    const path = maybeDoc.key.path.toArray();\n    const readTime = toDbTimestamp(maybeDoc.version);\n    return new DbRemoteDocument(\n      new DbUnknownDocument(path, readTime),\n      /* noDocument= */ null,\n      /* document= */ null,\n      /* hasCommittedMutations= */ true,\n      dbReadTime,\n      parentPath\n    );\n  } else {\n    return fail('Unexpected MaybeDocument');\n  }\n}\n\nexport function toDbTimestampKey(\n  snapshotVersion: SnapshotVersion\n): DbTimestampKey {\n  const timestamp = snapshotVersion.toTimestamp();\n  return [timestamp.seconds, timestamp.nanoseconds];\n}\n\nexport function fromDbTimestampKey(\n  dbTimestampKey: DbTimestampKey\n): SnapshotVersion {\n  const timestamp = new Timestamp(dbTimestampKey[0], dbTimestampKey[1]);\n  return SnapshotVersion.fromTimestamp(timestamp);\n}\n\nfunction toDbTimestamp(snapshotVersion: SnapshotVersion): DbTimestamp {\n  const timestamp = snapshotVersion.toTimestamp();\n  return new DbTimestamp(timestamp.seconds, timestamp.nanoseconds);\n}\n\nfunction fromDbTimestamp(dbTimestamp: DbTimestamp): SnapshotVersion {\n  const timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);\n  return SnapshotVersion.fromTimestamp(timestamp);\n}\n\n/** Encodes a batch of mutations into a DbMutationBatch for local storage. */\nexport function toDbMutationBatch(\n  localSerializer: LocalSerializer,\n  userId: string,\n  batch: MutationBatch\n): DbMutationBatch {\n  const serializedBaseMutations = batch.baseMutations.map(m =>\n    toMutation(localSerializer.remoteSerializer, m)\n  );\n  const serializedMutations = batch.mutations.map(m =>\n    toMutation(localSerializer.remoteSerializer, m)\n  );\n  return new DbMutationBatch(\n    userId,\n    batch.batchId,\n    batch.localWriteTime.toMillis(),\n    serializedBaseMutations,\n    serializedMutations\n  );\n}\n\n/** Decodes a DbMutationBatch into a MutationBatch */\nexport function fromDbMutationBatch(\n  localSerializer: LocalSerializer,\n  dbBatch: DbMutationBatch\n): MutationBatch {\n  const baseMutations = (dbBatch.baseMutations || []).map(m =>\n    fromMutation(localSerializer.remoteSerializer, m)\n  );\n  const mutations = dbBatch.mutations.map(m =>\n    fromMutation(localSerializer.remoteSerializer, m)\n  );\n  const timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);\n  return new MutationBatch(\n    dbBatch.batchId,\n    timestamp,\n    baseMutations,\n    mutations\n  );\n}\n\n/** Decodes a DbTarget into TargetData */\nexport function fromDbTarget(dbTarget: DbTarget): TargetData {\n  const version = fromDbTimestamp(dbTarget.readTime);\n  const lastLimboFreeSnapshotVersion =\n    dbTarget.lastLimboFreeSnapshotVersion !== undefined\n      ? fromDbTimestamp(dbTarget.lastLimboFreeSnapshotVersion)\n      : SnapshotVersion.min();\n\n  let target: Target;\n  if (isDocumentQuery(dbTarget.query)) {\n    target = fromDocumentsTarget(dbTarget.query);\n  } else {\n    target = fromQueryTarget(dbTarget.query);\n  }\n  return new TargetData(\n    target,\n    dbTarget.targetId,\n    TargetPurpose.Listen,\n    dbTarget.lastListenSequenceNumber,\n    version,\n    lastLimboFreeSnapshotVersion,\n    ByteString.fromBase64String(dbTarget.resumeToken)\n  );\n}\n\n/** Encodes TargetData into a DbTarget for storage locally. */\nexport function toDbTarget(\n  localSerializer: LocalSerializer,\n  targetData: TargetData\n): DbTarget {\n  debugAssert(\n    TargetPurpose.Listen === targetData.purpose,\n    'Only queries with purpose ' +\n      TargetPurpose.Listen +\n      ' may be stored, got ' +\n      targetData.purpose\n  );\n  const dbTimestamp = toDbTimestamp(targetData.snapshotVersion);\n  const dbLastLimboFreeTimestamp = toDbTimestamp(\n    targetData.lastLimboFreeSnapshotVersion\n  );\n  let queryProto: DbQuery;\n  if (isDocumentTarget(targetData.target)) {\n    queryProto = toDocumentsTarget(\n      localSerializer.remoteSerializer,\n      targetData.target\n    );\n  } else {\n    queryProto = toQueryTarget(\n      localSerializer.remoteSerializer,\n      targetData.target\n    );\n  }\n\n  // We can't store the resumeToken as a ByteString in IndexedDb, so we\n  // convert it to a base64 string for storage.\n  const resumeToken = targetData.resumeToken.toBase64();\n\n  // lastListenSequenceNumber is always 0 until we do real GC.\n  return new DbTarget(\n    targetData.targetId,\n    canonifyTarget(targetData.target),\n    dbTimestamp,\n    resumeToken,\n    targetData.sequenceNumber,\n    dbLastLimboFreeTimestamp,\n    queryProto\n  );\n}\n\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery: DbQuery): dbQuery is PublicDocumentsTarget {\n  return (dbQuery as PublicDocumentsTarget).documents !== undefined;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { User } from '../auth/user';\nimport { isCollectionGroupQuery, isDocumentQuery, Query } from '../core/query';\nimport { BatchId } from '../core/types';\nimport { DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { ResourcePath } from '../model/path';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { decodeResourcePath } from './encoded_resource_path';\nimport { IndexManager } from './index_manager';\nimport {\n  IndexedDbPersistence,\n  IndexedDbTransaction\n} from './indexeddb_persistence';\nimport {\n  DbDocumentMutation,\n  DbDocumentMutationKey,\n  DbMutationBatch,\n  DbMutationBatchKey,\n  DbMutationQueue,\n  DbMutationQueueKey\n} from './indexeddb_schema';\nimport {\n  fromDbMutationBatch,\n  LocalSerializer,\n  toDbMutationBatch\n} from './local_serializer';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistenceTransaction, ReferenceDelegate } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbStore, SimpleDbTransaction } from './simple_db';\n\n/** A mutation queue for a specific user, backed by IndexedDB. */\nexport class IndexedDbMutationQueue implements MutationQueue {\n  /**\n   * Caches the document keys for pending mutation batches. If the mutation\n   * has been removed from IndexedDb, the cached value may continue to\n   * be used to retrieve the batch's document keys. To remove a cached value\n   * locally, `removeCachedMutationKeys()` should be invoked either directly\n   * or through `removeMutationBatches()`.\n   *\n   * With multi-tab, when the primary client acknowledges or rejects a mutation,\n   * this cache is used by secondary clients to invalidate the local\n   * view of the documents that were previously affected by the mutation.\n   */\n  // PORTING NOTE: Multi-tab only.\n  private documentKeysByBatchId = {} as { [batchId: number]: DocumentKeySet };\n\n  constructor(\n    /**\n     * The normalized userId (e.g. null UID => \"\" userId) used to store /\n     * retrieve mutations.\n     */\n    private userId: string,\n    private readonly serializer: LocalSerializer,\n    private readonly indexManager: IndexManager,\n    private readonly referenceDelegate: ReferenceDelegate\n  ) {}\n\n  /**\n   * Creates a new mutation queue for the given user.\n   * @param user The user for which to create a mutation queue.\n   * @param serializer The serializer to use when persisting to IndexedDb.\n   */\n  static forUser(\n    user: User,\n    serializer: LocalSerializer,\n    indexManager: IndexManager,\n    referenceDelegate: ReferenceDelegate\n  ): IndexedDbMutationQueue {\n    // TODO(mcg): Figure out what constraints there are on userIDs\n    // In particular, are there any reserved characters? are empty ids allowed?\n    // For the moment store these together in the same mutations table assuming\n    // that empty userIDs aren't allowed.\n    hardAssert(user.uid !== '', 'UserID must not be an empty string.');\n    const userId = user.isAuthenticated() ? user.uid! : '';\n    return new IndexedDbMutationQueue(\n      userId,\n      serializer,\n      indexManager,\n      referenceDelegate\n    );\n  }\n\n  checkEmpty(transaction: PersistenceTransaction): PersistencePromise<boolean> {\n    let empty = true;\n    const range = IDBKeyRange.bound(\n      [this.userId, Number.NEGATIVE_INFINITY],\n      [this.userId, Number.POSITIVE_INFINITY]\n    );\n    return mutationsStore(transaction)\n      .iterate(\n        { index: DbMutationBatch.userMutationsIndex, range },\n        (key, value, control) => {\n          empty = false;\n          control.done();\n        }\n      )\n      .next(() => empty);\n  }\n\n  addMutationBatch(\n    transaction: PersistenceTransaction,\n    localWriteTime: Timestamp,\n    baseMutations: Mutation[],\n    mutations: Mutation[]\n  ): PersistencePromise<MutationBatch> {\n    const documentStore = documentMutationsStore(transaction);\n    const mutationStore = mutationsStore(transaction);\n\n    // The IndexedDb implementation in Chrome (and Firefox) does not handle\n    // compound indices that include auto-generated keys correctly. To ensure\n    // that the index entry is added correctly in all browsers, we perform two\n    // writes: The first write is used to retrieve the next auto-generated Batch\n    // ID, and the second write populates the index and stores the actual\n    // mutation batch.\n    // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972\n\n    // We write an empty object to obtain key\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return mutationStore.add({} as any).next(batchId => {\n      hardAssert(\n        typeof batchId === 'number',\n        'Auto-generated key is not a number'\n      );\n\n      const batch = new MutationBatch(\n        batchId,\n        localWriteTime,\n        baseMutations,\n        mutations\n      );\n      const dbBatch = toDbMutationBatch(this.serializer, this.userId, batch);\n\n      const promises: Array<PersistencePromise<void>> = [];\n      let collectionParents = new SortedSet<ResourcePath>((l, r) =>\n        primitiveComparator(l.canonicalString(), r.canonicalString())\n      );\n      for (const mutation of mutations) {\n        const indexKey = DbDocumentMutation.key(\n          this.userId,\n          mutation.key.path,\n          batchId\n        );\n        collectionParents = collectionParents.add(mutation.key.path.popLast());\n        promises.push(mutationStore.put(dbBatch));\n        promises.push(\n          documentStore.put(indexKey, DbDocumentMutation.PLACEHOLDER)\n        );\n      }\n\n      collectionParents.forEach(parent => {\n        promises.push(\n          this.indexManager.addToCollectionParentIndex(transaction, parent)\n        );\n      });\n\n      transaction.addOnCommittedListener(() => {\n        this.documentKeysByBatchId[batchId] = batch.keys();\n      });\n\n      return PersistencePromise.waitFor(promises).next(() => batch);\n    });\n  }\n\n  lookupMutationBatch(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    return mutationsStore(transaction)\n      .get(batchId)\n      .next(dbBatch => {\n        if (dbBatch) {\n          hardAssert(\n            dbBatch.userId === this.userId,\n            `Unexpected user '${dbBatch.userId}' for mutation batch ${batchId}`\n          );\n          return fromDbMutationBatch(this.serializer, dbBatch);\n        }\n        return null;\n      });\n  }\n\n  /**\n   * Returns the document keys for the mutation batch with the given batchId.\n   * For primary clients, this method returns `null` after\n   * `removeMutationBatches()` has been called. Secondary clients return a\n   * cached result until `removeCachedMutationKeys()` is invoked.\n   */\n  // PORTING NOTE: Multi-tab only.\n  lookupMutationKeys(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<DocumentKeySet | null> {\n    if (this.documentKeysByBatchId[batchId]) {\n      return PersistencePromise.resolve<DocumentKeySet | null>(\n        this.documentKeysByBatchId[batchId]\n      );\n    } else {\n      return this.lookupMutationBatch(transaction, batchId).next(batch => {\n        if (batch) {\n          const keys = batch.keys();\n          this.documentKeysByBatchId[batchId] = keys;\n          return keys;\n        } else {\n          return null;\n        }\n      });\n    }\n  }\n\n  getNextMutationBatchAfterBatchId(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    const nextBatchId = batchId + 1;\n\n    const range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);\n    let foundBatch: MutationBatch | null = null;\n    return mutationsStore(transaction)\n      .iterate(\n        { index: DbMutationBatch.userMutationsIndex, range },\n        (key, dbBatch, control) => {\n          if (dbBatch.userId === this.userId) {\n            hardAssert(\n              dbBatch.batchId >= nextBatchId,\n              'Should have found mutation after ' + nextBatchId\n            );\n            foundBatch = fromDbMutationBatch(this.serializer, dbBatch);\n          }\n          control.done();\n        }\n      )\n      .next(() => foundBatch);\n  }\n\n  getHighestUnacknowledgedBatchId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<BatchId> {\n    const range = IDBKeyRange.upperBound([\n      this.userId,\n      Number.POSITIVE_INFINITY\n    ]);\n\n    let batchId = BATCHID_UNKNOWN;\n    return mutationsStore(transaction)\n      .iterate(\n        { index: DbMutationBatch.userMutationsIndex, range, reverse: true },\n        (key, dbBatch, control) => {\n          batchId = dbBatch.batchId;\n          control.done();\n        }\n      )\n      .next(() => batchId);\n  }\n\n  getAllMutationBatches(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<MutationBatch[]> {\n    const range = IDBKeyRange.bound(\n      [this.userId, BATCHID_UNKNOWN],\n      [this.userId, Number.POSITIVE_INFINITY]\n    );\n    return mutationsStore(transaction)\n      .loadAll(DbMutationBatch.userMutationsIndex, range)\n      .next(dbBatches =>\n        dbBatches.map(dbBatch => fromDbMutationBatch(this.serializer, dbBatch))\n      );\n  }\n\n  getAllMutationBatchesAffectingDocumentKey(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MutationBatch[]> {\n    // Scan the document-mutation index starting with a prefix starting with\n    // the given documentKey.\n    const indexPrefix = DbDocumentMutation.prefixForPath(\n      this.userId,\n      documentKey.path\n    );\n    const indexStart = IDBKeyRange.lowerBound(indexPrefix);\n\n    const results: MutationBatch[] = [];\n    return documentMutationsStore(transaction)\n      .iterate({ range: indexStart }, (indexKey, _, control) => {\n        const [userID, encodedPath, batchId] = indexKey;\n\n        // Only consider rows matching exactly the specific key of\n        // interest. Note that because we order by path first, and we\n        // order terminators before path separators, we'll encounter all\n        // the index rows for documentKey contiguously. In particular, all\n        // the rows for documentKey will occur before any rows for\n        // documents nested in a subcollection beneath documentKey so we\n        // can stop as soon as we hit any such row.\n        const path = decodeResourcePath(encodedPath);\n        if (userID !== this.userId || !documentKey.path.isEqual(path)) {\n          control.done();\n          return;\n        }\n        // Look up the mutation batch in the store.\n        return mutationsStore(transaction)\n          .get(batchId)\n          .next(mutation => {\n            if (!mutation) {\n              throw fail(\n                'Dangling document-mutation reference found: ' +\n                  indexKey +\n                  ' which points to ' +\n                  batchId\n              );\n            }\n            hardAssert(\n              mutation.userId === this.userId,\n              `Unexpected user '${mutation.userId}' for mutation batch ${batchId}`\n            );\n            results.push(fromDbMutationBatch(this.serializer, mutation));\n          });\n      })\n      .next(() => results);\n  }\n\n  getAllMutationBatchesAffectingDocumentKeys(\n    transaction: PersistenceTransaction,\n    documentKeys: SortedMap<DocumentKey, unknown>\n  ): PersistencePromise<MutationBatch[]> {\n    let uniqueBatchIDs = new SortedSet<BatchId>(primitiveComparator);\n\n    const promises: Array<PersistencePromise<void>> = [];\n    documentKeys.forEach(documentKey => {\n      const indexStart = DbDocumentMutation.prefixForPath(\n        this.userId,\n        documentKey.path\n      );\n      const range = IDBKeyRange.lowerBound(indexStart);\n\n      const promise = documentMutationsStore(transaction).iterate(\n        { range },\n        (indexKey, _, control) => {\n          const [userID, encodedPath, batchID] = indexKey;\n\n          // Only consider rows matching exactly the specific key of\n          // interest. Note that because we order by path first, and we\n          // order terminators before path separators, we'll encounter all\n          // the index rows for documentKey contiguously. In particular, all\n          // the rows for documentKey will occur before any rows for\n          // documents nested in a subcollection beneath documentKey so we\n          // can stop as soon as we hit any such row.\n          const path = decodeResourcePath(encodedPath);\n          if (userID !== this.userId || !documentKey.path.isEqual(path)) {\n            control.done();\n            return;\n          }\n\n          uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        }\n      );\n\n      promises.push(promise);\n    });\n\n    return PersistencePromise.waitFor(promises).next(() =>\n      this.lookupMutationBatches(transaction, uniqueBatchIDs)\n    );\n  }\n\n  getAllMutationBatchesAffectingQuery(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<MutationBatch[]> {\n    debugAssert(\n      !isDocumentQuery(query),\n      \"Document queries shouldn't go down this path\"\n    );\n    debugAssert(\n      !isCollectionGroupQuery(query),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n\n    const queryPath = query.path;\n    const immediateChildrenLength = queryPath.length + 1;\n\n    // TODO(mcg): Actually implement a single-collection query\n    //\n    // This is actually executing an ancestor query, traversing the whole\n    // subtree below the collection which can be horrifically inefficient for\n    // some structures. The right way to solve this is to implement the full\n    // value index, but that's not in the cards in the near future so this is\n    // the best we can do for the moment.\n    //\n    // Since we don't yet index the actual properties in the mutations, our\n    // current approach is to just return all mutation batches that affect\n    // documents in the collection being queried.\n    const indexPrefix = DbDocumentMutation.prefixForPath(\n      this.userId,\n      queryPath\n    );\n    const indexStart = IDBKeyRange.lowerBound(indexPrefix);\n\n    // Collect up unique batchIDs encountered during a scan of the index. Use a\n    // SortedSet to accumulate batch IDs so they can be traversed in order in a\n    // scan of the main table.\n    let uniqueBatchIDs = new SortedSet<BatchId>(primitiveComparator);\n    return documentMutationsStore(transaction)\n      .iterate({ range: indexStart }, (indexKey, _, control) => {\n        const [userID, encodedPath, batchID] = indexKey;\n        const path = decodeResourcePath(encodedPath);\n        if (userID !== this.userId || !queryPath.isPrefixOf(path)) {\n          control.done();\n          return;\n        }\n        // Rows with document keys more than one segment longer than the\n        // query path can't be matches. For example, a query on 'rooms'\n        // can't match the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (path.length !== immediateChildrenLength) {\n          return;\n        }\n        uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n      })\n      .next(() => this.lookupMutationBatches(transaction, uniqueBatchIDs));\n  }\n\n  private lookupMutationBatches(\n    transaction: PersistenceTransaction,\n    batchIDs: SortedSet<BatchId>\n  ): PersistencePromise<MutationBatch[]> {\n    const results: MutationBatch[] = [];\n    const promises: Array<PersistencePromise<void>> = [];\n    // TODO(rockwood): Implement this using iterate.\n    batchIDs.forEach(batchId => {\n      promises.push(\n        mutationsStore(transaction)\n          .get(batchId)\n          .next(mutation => {\n            if (mutation === null) {\n              throw fail(\n                'Dangling document-mutation reference found, ' +\n                  'which points to ' +\n                  batchId\n              );\n            }\n            hardAssert(\n              mutation.userId === this.userId,\n              `Unexpected user '${mutation.userId}' for mutation batch ${batchId}`\n            );\n            results.push(fromDbMutationBatch(this.serializer, mutation));\n          })\n      );\n    });\n    return PersistencePromise.waitFor(promises).next(() => results);\n  }\n\n  removeMutationBatch(\n    transaction: PersistenceTransaction,\n    batch: MutationBatch\n  ): PersistencePromise<void> {\n    return removeMutationBatch(\n      (transaction as IndexedDbTransaction).simpleDbTransaction,\n      this.userId,\n      batch\n    ).next(removedDocuments => {\n      transaction.addOnCommittedListener(() => {\n        this.removeCachedMutationKeys(batch.batchId);\n      });\n      return PersistencePromise.forEach(\n        removedDocuments,\n        (key: DocumentKey) => {\n          return this.referenceDelegate.markPotentiallyOrphaned(\n            transaction,\n            key\n          );\n        }\n      );\n    });\n  }\n\n  /**\n   * Clears the cached keys for a mutation batch. This method should be\n   * called by secondary clients after they process mutation updates.\n   *\n   * Note that this method does not have to be called from primary clients as\n   * the corresponding cache entries are cleared when an acknowledged or\n   * rejected batch is removed from the mutation queue.\n   */\n  // PORTING NOTE: Multi-tab only\n  removeCachedMutationKeys(batchId: BatchId): void {\n    delete this.documentKeysByBatchId[batchId];\n  }\n\n  performConsistencyCheck(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    return this.checkEmpty(txn).next(empty => {\n      if (!empty) {\n        return PersistencePromise.resolve();\n      }\n\n      // Verify that there are no entries in the documentMutations index if\n      // the queue is empty.\n      const startRange = IDBKeyRange.lowerBound(\n        DbDocumentMutation.prefixForUser(this.userId)\n      );\n      const danglingMutationReferences: ResourcePath[] = [];\n      return documentMutationsStore(txn)\n        .iterate({ range: startRange }, (key, _, control) => {\n          const userID = key[0];\n          if (userID !== this.userId) {\n            control.done();\n            return;\n          } else {\n            const path = decodeResourcePath(key[1]);\n            danglingMutationReferences.push(path);\n          }\n        })\n        .next(() => {\n          hardAssert(\n            danglingMutationReferences.length === 0,\n            'Document leak -- detected dangling mutation references when queue is empty. ' +\n              'Dangling keys: ' +\n              danglingMutationReferences.map(p => p.canonicalString())\n          );\n        });\n    });\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return mutationQueueContainsKey(txn, this.userId, key);\n  }\n\n  // PORTING NOTE: Multi-tab only (state is held in memory in other clients).\n  /** Returns the mutation queue's metadata from IndexedDb. */\n  private getMutationQueueMetadata(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<DbMutationQueue> {\n    return mutationQueuesStore(transaction)\n      .get(this.userId)\n      .next((metadata: DbMutationQueue | null) => {\n        return (\n          metadata ||\n          new DbMutationQueue(\n            this.userId,\n            BATCHID_UNKNOWN,\n            /*lastStreamToken=*/ ''\n          )\n        );\n      });\n  }\n}\n\n/**\n * @return true if the mutation queue for the given user contains a pending\n *         mutation for the given key.\n */\nfunction mutationQueueContainsKey(\n  txn: PersistenceTransaction,\n  userId: string,\n  key: DocumentKey\n): PersistencePromise<boolean> {\n  const indexKey = DbDocumentMutation.prefixForPath(userId, key.path);\n  const encodedPath = indexKey[1];\n  const startRange = IDBKeyRange.lowerBound(indexKey);\n  let containsKey = false;\n  return documentMutationsStore(txn)\n    .iterate({ range: startRange, keysOnly: true }, (key, value, control) => {\n      const [userID, keyPath, /*batchID*/ _] = key;\n      if (userID === userId && keyPath === encodedPath) {\n        containsKey = true;\n      }\n      control.done();\n    })\n    .next(() => containsKey);\n}\n\n/** Returns true if any mutation queue contains the given document. */\nexport function mutationQueuesContainKey(\n  txn: PersistenceTransaction,\n  docKey: DocumentKey\n): PersistencePromise<boolean> {\n  let found = false;\n  return mutationQueuesStore(txn)\n    .iterateSerial(userId => {\n      return mutationQueueContainsKey(txn, userId, docKey).next(containsKey => {\n        if (containsKey) {\n          found = true;\n        }\n        return PersistencePromise.resolve(!containsKey);\n      });\n    })\n    .next(() => found);\n}\n\n/**\n * Delete a mutation batch and the associated document mutations.\n * @return A PersistencePromise of the document mutations that were removed.\n */\nexport function removeMutationBatch(\n  txn: SimpleDbTransaction,\n  userId: string,\n  batch: MutationBatch\n): PersistencePromise<DocumentKey[]> {\n  const mutationStore = txn.store<DbMutationBatchKey, DbMutationBatch>(\n    DbMutationBatch.store\n  );\n  const indexTxn = txn.store<DbDocumentMutationKey, DbDocumentMutation>(\n    DbDocumentMutation.store\n  );\n  const promises: Array<PersistencePromise<void>> = [];\n\n  const range = IDBKeyRange.only(batch.batchId);\n  let numDeleted = 0;\n  const removePromise = mutationStore.iterate(\n    { range },\n    (key, value, control) => {\n      numDeleted++;\n      return control.delete();\n    }\n  );\n  promises.push(\n    removePromise.next(() => {\n      hardAssert(\n        numDeleted === 1,\n        'Dangling document-mutation reference found: Missing batch ' +\n          batch.batchId\n      );\n    })\n  );\n  const removedDocuments: DocumentKey[] = [];\n  for (const mutation of batch.mutations) {\n    const indexKey = DbDocumentMutation.key(\n      userId,\n      mutation.key.path,\n      batch.batchId\n    );\n    promises.push(indexTxn.delete(indexKey));\n    removedDocuments.push(mutation.key);\n  }\n  return PersistencePromise.waitFor(promises).next(() => removedDocuments);\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbMutationBatchKey, DbMutationBatch> {\n  return IndexedDbPersistence.getStore<DbMutationBatchKey, DbMutationBatch>(\n    txn,\n    DbMutationBatch.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbDocumentMutationKey, DbDocumentMutation> {\n  return IndexedDbPersistence.getStore<\n    DbDocumentMutationKey,\n    DbDocumentMutation\n  >(txn, DbDocumentMutation.store);\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbMutationQueueKey, DbMutationQueue> {\n  return IndexedDbPersistence.getStore<DbMutationQueueKey, DbMutationQueue>(\n    txn,\n    DbMutationQueue.store\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isCollectionGroupQuery, Query, queryMatches } from '../core/query';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  documentMap,\n  DocumentSizeEntries,\n  DocumentSizeEntry,\n  MaybeDocumentMap,\n  maybeDocumentMap,\n  nullableMaybeDocumentMap,\n  NullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert, debugCast, fail, hardAssert } from '../util/assert';\nimport { IndexManager } from './index_manager';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport {\n  DbRemoteDocument,\n  DbRemoteDocumentGlobal,\n  DbRemoteDocumentGlobalKey,\n  DbRemoteDocumentKey\n} from './indexeddb_schema';\nimport {\n  fromDbRemoteDocument,\n  fromDbTimestampKey,\n  LocalSerializer,\n  toDbRemoteDocument,\n  toDbTimestampKey\n} from './local_serializer';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nimport { IterateOptions, SimpleDbStore } from './simple_db';\nimport { ObjectMap } from '../util/obj_map';\n\nexport interface IndexedDbRemoteDocumentCache extends RemoteDocumentCache {\n  // The IndexedDbRemoteDocumentCache doesn't implement any methods on top\n  // of RemoteDocumentCache. This class exists for consistency.\n}\n\n/**\n * The RemoteDocumentCache for IndexedDb. To construct, invoke\n * `newIndexedDbRemoteDocumentCache()`.\n */\nclass IndexedDbRemoteDocumentCacheImpl implements IndexedDbRemoteDocumentCache {\n  /**\n   * @param serializer The document serializer.\n   * @param indexManager The query indexes that need to be maintained.\n   */\n  constructor(\n    readonly serializer: LocalSerializer,\n    readonly indexManager: IndexManager\n  ) {}\n\n  /**\n   * Adds the supplied entries to the cache.\n   *\n   * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\n   */\n  addEntry(\n    transaction: PersistenceTransaction,\n    key: DocumentKey,\n    doc: DbRemoteDocument\n  ): PersistencePromise<void> {\n    const documentStore = remoteDocumentsStore(transaction);\n    return documentStore.put(dbKey(key), doc);\n  }\n\n  /**\n   * Removes a document from the cache.\n   *\n   * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\n   */\n  removeEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<void> {\n    const store = remoteDocumentsStore(transaction);\n    const key = dbKey(documentKey);\n    return store.delete(key);\n  }\n\n  /**\n   * Updates the current cache size.\n   *\n   * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the\n   * cache's metadata.\n   */\n  updateMetadata(\n    transaction: PersistenceTransaction,\n    sizeDelta: number\n  ): PersistencePromise<void> {\n    return this.getMetadata(transaction).next(metadata => {\n      metadata.byteSize += sizeDelta;\n      return this.setMetadata(transaction, metadata);\n    });\n  }\n\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    return remoteDocumentsStore(transaction)\n      .get(dbKey(documentKey))\n      .next(dbRemoteDoc => {\n        return this.maybeDecodeDocument(dbRemoteDoc);\n      });\n  }\n\n  /**\n   * Looks up an entry in the cache.\n   *\n   * @param documentKey The key of the entry to look up.\n   * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.\n   */\n  getSizedEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<DocumentSizeEntry | null> {\n    return remoteDocumentsStore(transaction)\n      .get(dbKey(documentKey))\n      .next(dbRemoteDoc => {\n        const doc = this.maybeDecodeDocument(dbRemoteDoc);\n        return doc\n          ? {\n              maybeDocument: doc,\n              size: dbDocumentSize(dbRemoteDoc!)\n            }\n          : null;\n      });\n  }\n\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    let results = nullableMaybeDocumentMap();\n    return this.forEachDbEntry(\n      transaction,\n      documentKeys,\n      (key, dbRemoteDoc) => {\n        const doc = this.maybeDecodeDocument(dbRemoteDoc);\n        results = results.insert(key, doc);\n      }\n    ).next(() => results);\n  }\n\n  /**\n   * Looks up several entries in the cache.\n   *\n   * @param documentKeys The set of keys entries to look up.\n   * @return A map of MaybeDocuments indexed by key (if a document cannot be\n   *     found, the key will be mapped to null) and a map of sizes indexed by\n   *     key (zero if the key cannot be found).\n   */\n  getSizedEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<DocumentSizeEntries> {\n    let results = nullableMaybeDocumentMap();\n    let sizeMap = new SortedMap<DocumentKey, number>(DocumentKey.comparator);\n    return this.forEachDbEntry(\n      transaction,\n      documentKeys,\n      (key, dbRemoteDoc) => {\n        const doc = this.maybeDecodeDocument(dbRemoteDoc);\n        if (doc) {\n          results = results.insert(key, doc);\n          sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc!));\n        } else {\n          results = results.insert(key, null);\n          sizeMap = sizeMap.insert(key, 0);\n        }\n      }\n    ).next(() => {\n      return { maybeDocuments: results, sizeMap };\n    });\n  }\n\n  private forEachDbEntry(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet,\n    callback: (key: DocumentKey, doc: DbRemoteDocument | null) => void\n  ): PersistencePromise<void> {\n    if (documentKeys.isEmpty()) {\n      return PersistencePromise.resolve();\n    }\n\n    const range = IDBKeyRange.bound(\n      documentKeys.first()!.path.toArray(),\n      documentKeys.last()!.path.toArray()\n    );\n    const keyIter = documentKeys.getIterator();\n    let nextKey: DocumentKey | null = keyIter.getNext();\n\n    return remoteDocumentsStore(transaction)\n      .iterate({ range }, (potentialKeyRaw, dbRemoteDoc, control) => {\n        const potentialKey = DocumentKey.fromSegments(potentialKeyRaw);\n\n        // Go through keys not found in cache.\n        while (nextKey && DocumentKey.comparator(nextKey!, potentialKey) < 0) {\n          callback(nextKey!, null);\n          nextKey = keyIter.getNext();\n        }\n\n        if (nextKey && nextKey!.isEqual(potentialKey)) {\n          // Key found in cache.\n          callback(nextKey!, dbRemoteDoc);\n          nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n        }\n\n        // Skip to the next key (if there is one).\n        if (nextKey) {\n          control.skip(nextKey!.path.toArray());\n        } else {\n          control.done();\n        }\n      })\n      .next(() => {\n        // The rest of the keys are not in the cache. One case where `iterate`\n        // above won't go through them is when the cache is empty.\n        while (nextKey) {\n          callback(nextKey!, null);\n          nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n        }\n      });\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      !isCollectionGroupQuery(query),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    let results = documentMap();\n\n    const immediateChildrenPathLength = query.path.length + 1;\n\n    const iterationOptions: IterateOptions = {};\n    if (sinceReadTime.isEqual(SnapshotVersion.min())) {\n      // Documents are ordered by key, so we can use a prefix scan to narrow\n      // down the documents we need to match the query against.\n      const startKey = query.path.toArray();\n      iterationOptions.range = IDBKeyRange.lowerBound(startKey);\n    } else {\n      // Execute an index-free query and filter by read time. This is safe\n      // since all document changes to queries that have a\n      // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.\n      const collectionKey = query.path.toArray();\n      const readTimeKey = toDbTimestampKey(sinceReadTime);\n      iterationOptions.range = IDBKeyRange.lowerBound(\n        [collectionKey, readTimeKey],\n        /* open= */ true\n      );\n      iterationOptions.index = DbRemoteDocument.collectionReadTimeIndex;\n    }\n\n    return remoteDocumentsStore(transaction)\n      .iterate(iterationOptions, (key, dbRemoteDoc, control) => {\n        // The query is actually returning any path that starts with the query\n        // path prefix which may include documents in subcollections. For\n        // example, a query on 'rooms' will return rooms/abc/messages/xyx but we\n        // shouldn't match it. Fix this by discarding rows with document keys\n        // more than one segment longer than the query path.\n        if (key.length !== immediateChildrenPathLength) {\n          return;\n        }\n\n        const maybeDoc = fromDbRemoteDocument(this.serializer, dbRemoteDoc);\n        if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n          control.done();\n        } else if (\n          maybeDoc instanceof Document &&\n          queryMatches(query, maybeDoc)\n        ) {\n          results = results.insert(maybeDoc.key, maybeDoc);\n        }\n      })\n      .next(() => results);\n  }\n\n  newChangeBuffer(options?: {\n    trackRemovals: boolean;\n  }): RemoteDocumentChangeBuffer {\n    return new IndexedDbRemoteDocumentChangeBuffer(\n      this,\n      !!options && options.trackRemovals\n    );\n  }\n\n  getSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.getMetadata(txn).next(metadata => metadata.byteSize);\n  }\n\n  private getMetadata(\n    txn: PersistenceTransaction\n  ): PersistencePromise<DbRemoteDocumentGlobal> {\n    return documentGlobalStore(txn)\n      .get(DbRemoteDocumentGlobal.key)\n      .next(metadata => {\n        hardAssert(!!metadata, 'Missing document cache metadata');\n        return metadata!;\n      });\n  }\n\n  private setMetadata(\n    txn: PersistenceTransaction,\n    metadata: DbRemoteDocumentGlobal\n  ): PersistencePromise<void> {\n    return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key, metadata);\n  }\n\n  /**\n   * Decodes `remoteDoc` and returns the document (or null, if the document\n   * corresponds to the format used for sentinel deletes).\n   */\n  private maybeDecodeDocument(\n    dbRemoteDoc: DbRemoteDocument | null\n  ): MaybeDocument | null {\n    if (dbRemoteDoc) {\n      const doc = fromDbRemoteDocument(this.serializer, dbRemoteDoc);\n      if (\n        doc instanceof NoDocument &&\n        doc.version.isEqual(SnapshotVersion.min())\n      ) {\n        // The document is a sentinel removal and should only be used in the\n        // `getNewDocumentChanges()`.\n        return null;\n      }\n\n      return doc;\n    }\n    return null;\n  }\n}\n\n/**\n * Creates a new IndexedDbRemoteDocumentCache.\n *\n * @param serializer The document serializer.\n * @param indexManager The query indexes that need to be maintained.\n */\nexport function newIndexedDbRemoteDocumentCache(\n  serializer: LocalSerializer,\n  indexManager: IndexManager\n): IndexedDbRemoteDocumentCache {\n  return new IndexedDbRemoteDocumentCacheImpl(serializer, indexManager);\n}\n\n/**\n * Returns the set of documents that have changed since the specified read\n * time.\n */\n// PORTING NOTE: This is only used for multi-tab synchronization.\nexport function remoteDocumentCacheGetNewDocumentChanges(\n  remoteDocumentCache: IndexedDbRemoteDocumentCache,\n  transaction: PersistenceTransaction,\n  sinceReadTime: SnapshotVersion\n): PersistencePromise<{\n  changedDocs: MaybeDocumentMap;\n  readTime: SnapshotVersion;\n}> {\n  const remoteDocumentCacheImpl = debugCast(\n    remoteDocumentCache,\n    IndexedDbRemoteDocumentCacheImpl // We only support IndexedDb in multi-tab mode.\n  );\n  let changedDocs = maybeDocumentMap();\n\n  let lastReadTime = toDbTimestampKey(sinceReadTime);\n\n  const documentsStore = remoteDocumentsStore(transaction);\n  const range = IDBKeyRange.lowerBound(lastReadTime, true);\n  return documentsStore\n    .iterate(\n      { index: DbRemoteDocument.readTimeIndex, range },\n      (_, dbRemoteDoc) => {\n        // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses\n        // the documents directly since we want to keep sentinel deletes.\n        const doc = fromDbRemoteDocument(\n          remoteDocumentCacheImpl.serializer,\n          dbRemoteDoc\n        );\n        changedDocs = changedDocs.insert(doc.key, doc);\n        lastReadTime = dbRemoteDoc.readTime!;\n      }\n    )\n    .next(() => {\n      return {\n        changedDocs,\n        readTime: fromDbTimestampKey(lastReadTime)\n      };\n    });\n}\n\n/**\n * Returns the read time of the most recently read document in the cache, or\n * SnapshotVersion.min() if not available.\n */\n// PORTING NOTE: This is only used for multi-tab synchronization.\nexport function remoteDocumentCacheGetLastReadTime(\n  transaction: PersistenceTransaction\n): PersistencePromise<SnapshotVersion> {\n  const documentsStore = remoteDocumentsStore(transaction);\n\n  // If there are no existing entries, we return SnapshotVersion.min().\n  let readTime = SnapshotVersion.min();\n\n  return documentsStore\n    .iterate(\n      { index: DbRemoteDocument.readTimeIndex, reverse: true },\n      (key, dbRemoteDoc, control) => {\n        if (dbRemoteDoc.readTime) {\n          readTime = fromDbTimestampKey(dbRemoteDoc.readTime);\n        }\n        control.done();\n      }\n    )\n    .next(() => readTime);\n}\n\n/**\n * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.\n *\n * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size\n * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb\n * when we apply the changes.\n */\nclass IndexedDbRemoteDocumentChangeBuffer extends RemoteDocumentChangeBuffer {\n  // A map of document sizes prior to applying the changes in this buffer.\n  protected documentSizes: ObjectMap<DocumentKey, number> = new ObjectMap(\n    key => key.toString(),\n    (l, r) => l.isEqual(r)\n  );\n\n  /**\n   * @param documentCache The IndexedDbRemoteDocumentCache to apply the changes to.\n   * @param trackRemovals Whether to create sentinel deletes that can be tracked by\n   * `getNewDocumentChanges()`.\n   */\n  constructor(\n    private readonly documentCache: IndexedDbRemoteDocumentCacheImpl,\n    private readonly trackRemovals: boolean\n  ) {\n    super();\n  }\n\n  protected applyChanges(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const promises: Array<PersistencePromise<void>> = [];\n\n    let sizeDelta = 0;\n\n    let collectionParents = new SortedSet<ResourcePath>((l, r) =>\n      primitiveComparator(l.canonicalString(), r.canonicalString())\n    );\n\n    this.changes.forEach((key, maybeDocument) => {\n      const previousSize = this.documentSizes.get(key);\n      debugAssert(\n        previousSize !== undefined,\n        `Cannot modify a document that wasn't read (for ${key})`\n      );\n      if (maybeDocument) {\n        debugAssert(\n          !this.readTime.isEqual(SnapshotVersion.min()),\n          'Cannot add a document with a read time of zero'\n        );\n        const doc = toDbRemoteDocument(\n          this.documentCache.serializer,\n          maybeDocument,\n          this.readTime\n        );\n        collectionParents = collectionParents.add(key.path.popLast());\n\n        const size = dbDocumentSize(doc);\n        sizeDelta += size - previousSize!;\n        promises.push(this.documentCache.addEntry(transaction, key, doc));\n      } else {\n        sizeDelta -= previousSize!;\n        if (this.trackRemovals) {\n          // In order to track removals, we store a \"sentinel delete\" in the\n          // RemoteDocumentCache. This entry is represented by a NoDocument\n          // with a version of 0 and ignored by `maybeDecodeDocument()` but\n          // preserved in `getNewDocumentChanges()`.\n          const deletedDoc = toDbRemoteDocument(\n            this.documentCache.serializer,\n            new NoDocument(key, SnapshotVersion.min()),\n            this.readTime\n          );\n          promises.push(\n            this.documentCache.addEntry(transaction, key, deletedDoc)\n          );\n        } else {\n          promises.push(this.documentCache.removeEntry(transaction, key));\n        }\n      }\n    });\n\n    collectionParents.forEach(parent => {\n      promises.push(\n        this.documentCache.indexManager.addToCollectionParentIndex(\n          transaction,\n          parent\n        )\n      );\n    });\n\n    promises.push(this.documentCache.updateMetadata(transaction, sizeDelta));\n\n    return PersistencePromise.waitFor(promises);\n  }\n\n  protected getFromCache(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    // Record the size of everything we load from the cache so we can compute a delta later.\n    return this.documentCache\n      .getSizedEntry(transaction, documentKey)\n      .next(getResult => {\n        if (getResult === null) {\n          this.documentSizes.set(documentKey, 0);\n          return null;\n        } else {\n          this.documentSizes.set(documentKey, getResult.size);\n          return getResult.maybeDocument;\n        }\n      });\n  }\n\n  protected getAllFromCache(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    // Record the size of everything we load from the cache so we can compute\n    // a delta later.\n    return this.documentCache\n      .getSizedEntries(transaction, documentKeys)\n      .next(({ maybeDocuments, sizeMap }) => {\n        // Note: `getAllFromCache` returns two maps instead of a single map from\n        // keys to `DocumentSizeEntry`s. This is to allow returning the\n        // `NullableMaybeDocumentMap` directly, without a conversion.\n        sizeMap.forEach((documentKey, size) => {\n          this.documentSizes.set(documentKey, size);\n        });\n        return maybeDocuments;\n      });\n  }\n}\n\nfunction documentGlobalStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbRemoteDocumentGlobalKey, DbRemoteDocumentGlobal> {\n  return IndexedDbPersistence.getStore<\n    DbRemoteDocumentGlobalKey,\n    DbRemoteDocumentGlobal\n  >(txn, DbRemoteDocumentGlobal.store);\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbRemoteDocumentKey, DbRemoteDocument> {\n  return IndexedDbPersistence.getStore<DbRemoteDocumentKey, DbRemoteDocument>(\n    txn,\n    DbRemoteDocument.store\n  );\n}\n\nfunction dbKey(docKey: DocumentKey): DbRemoteDocumentKey {\n  return docKey.path.toArray();\n}\n\n/**\n * Retrusn an approximate size for the given document.\n */\nexport function dbDocumentSize(doc: DbRemoteDocument): number {\n  let value: unknown;\n  if (doc.document) {\n    value = doc.document;\n  } else if (doc.unknownDocument) {\n    value = doc.unknownDocument;\n  } else if (doc.noDocument) {\n    value = doc.noDocument;\n  } else {\n    throw fail('Unknown remote document type');\n  }\n  return JSON.stringify(value).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { debugAssert } from '../util/assert';\nimport { SortedSet } from '../util/sorted_set';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * An in-memory implementation of IndexManager.\n */\nexport class MemoryIndexManager implements IndexManager {\n  private collectionParentIndex = new MemoryCollectionParentIndex();\n\n  addToCollectionParentIndex(\n    transaction: PersistenceTransaction,\n    collectionPath: ResourcePath\n  ): PersistencePromise<void> {\n    this.collectionParentIndex.add(collectionPath);\n    return PersistencePromise.resolve();\n  }\n\n  getCollectionParents(\n    transaction: PersistenceTransaction,\n    collectionId: string\n  ): PersistencePromise<ResourcePath[]> {\n    return PersistencePromise.resolve(\n      this.collectionParentIndex.getEntries(collectionId)\n    );\n  }\n}\n\n/**\n * Internal implementation of the collection-parent index exposed by MemoryIndexManager.\n * Also used for in-memory caching by IndexedDbIndexManager and initial index population\n * in indexeddb_schema.ts\n */\nexport class MemoryCollectionParentIndex {\n  private index = {} as {\n    [collectionId: string]: SortedSet<ResourcePath>;\n  };\n\n  // Returns false if the entry already existed.\n  add(collectionPath: ResourcePath): boolean {\n    debugAssert(collectionPath.length % 2 === 1, 'Expected a collection path.');\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    const added = !existingParents.has(parentPath);\n    this.index[collectionId] = existingParents.add(parentPath);\n    return added;\n  }\n\n  has(collectionPath: ResourcePath): boolean {\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents = this.index[collectionId];\n    return existingParents && existingParents.has(parentPath);\n  }\n\n  getEntries(collectionId: string): ResourcePath[] {\n    const parentPaths =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    return parentPaths.toArray();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, ListenSequenceNumber, TargetId } from '../core/types';\nimport { ResourcePath } from '../model/path';\nimport {\n  Write as ProtoWrite,\n  Document as ProtoDocument,\n  QueryTarget as ProtoQueryTarget,\n  DocumentsTarget as ProtoDocumentsTarget\n} from '../protos/firestore_proto_api';\nimport { debugAssert, hardAssert } from '../util/assert';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport {\n  decodeResourcePath,\n  EncodedResourcePath,\n  encodeResourcePath\n} from './encoded_resource_path';\nimport { removeMutationBatch } from './indexeddb_mutation_queue';\nimport { dbDocumentSize } from './indexeddb_remote_document_cache';\nimport {\n  fromDbMutationBatch,\n  fromDbTarget,\n  LocalSerializer,\n  toDbTarget\n} from './local_serializer';\nimport { MemoryCollectionParentIndex } from './memory_index_manager';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbSchemaConverter, SimpleDbTransaction } from './simple_db';\n\n/**\n * Schema Version for the Web client:\n * 1.  Initial version including Mutation Queue, Query Cache, and Remote\n *     Document Cache\n * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No\n *     longer required because migration 3 unconditionally clears it.\n * 3.  Dropped and re-created Query Cache to deal with cache corruption related\n *     to limbo resolution. Addresses\n *     https://github.com/firebase/firebase-ios-sdk/issues/1548\n * 4.  Multi-Tab Support.\n * 5.  Removal of held write acks.\n * 6.  Create document global for tracking document cache size.\n * 7.  Ensure every cached document has a sentinel row with a sequence number.\n * 8.  Add collection-parent index for Collection Group queries.\n * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than\n *     an auto-incrementing ID. This is required for Index-Free queries.\n * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.\n */\nexport const SCHEMA_VERSION = 10;\n\n/** Performs database creation and schema upgrades. */\nexport class SchemaConverter implements SimpleDbSchemaConverter {\n  constructor(private readonly serializer: LocalSerializer) {}\n\n  /**\n   * Performs database creation and schema upgrades.\n   *\n   * Note that in production, this method is only ever used to upgrade the schema\n   * to SCHEMA_VERSION. Different values of toVersion are only used for testing\n   * and local feature development.\n   */\n  createOrUpgrade(\n    db: IDBDatabase,\n    txn: IDBTransaction,\n    fromVersion: number,\n    toVersion: number\n  ): PersistencePromise<void> {\n    hardAssert(\n      fromVersion < toVersion &&\n        fromVersion >= 0 &&\n        toVersion <= SCHEMA_VERSION,\n      `Unexpected schema upgrade from v${fromVersion} to v${toVersion}.`\n    );\n\n    const simpleDbTransaction = new SimpleDbTransaction('createOrUpgrade', txn);\n\n    if (fromVersion < 1 && toVersion >= 1) {\n      createPrimaryClientStore(db);\n      createMutationQueue(db);\n      createQueryCache(db);\n      createRemoteDocumentCache(db);\n    }\n\n    // Migration 2 to populate the targetGlobal object no longer needed since\n    // migration 3 unconditionally clears it.\n\n    let p = PersistencePromise.resolve();\n    if (fromVersion < 3 && toVersion >= 3) {\n      // Brand new clients don't need to drop and recreate--only clients that\n      // potentially have corrupt data.\n      if (fromVersion !== 0) {\n        dropQueryCache(db);\n        createQueryCache(db);\n      }\n      p = p.next(() => writeEmptyTargetGlobalEntry(simpleDbTransaction));\n    }\n\n    if (fromVersion < 4 && toVersion >= 4) {\n      if (fromVersion !== 0) {\n        // Schema version 3 uses auto-generated keys to generate globally unique\n        // mutation batch IDs (this was previously ensured internally by the\n        // client). To migrate to the new schema, we have to read all mutations\n        // and write them back out. We preserve the existing batch IDs to guarantee\n        // consistency with other object stores. Any further mutation batch IDs will\n        // be auto-generated.\n        p = p.next(() =>\n          upgradeMutationBatchSchemaAndMigrateData(db, simpleDbTransaction)\n        );\n      }\n\n      p = p.next(() => {\n        createClientMetadataStore(db);\n      });\n    }\n\n    if (fromVersion < 5 && toVersion >= 5) {\n      p = p.next(() => this.removeAcknowledgedMutations(simpleDbTransaction));\n    }\n\n    if (fromVersion < 6 && toVersion >= 6) {\n      p = p.next(() => {\n        createDocumentGlobalStore(db);\n        return this.addDocumentGlobal(simpleDbTransaction);\n      });\n    }\n\n    if (fromVersion < 7 && toVersion >= 7) {\n      p = p.next(() => this.ensureSequenceNumbers(simpleDbTransaction));\n    }\n\n    if (fromVersion < 8 && toVersion >= 8) {\n      p = p.next(() =>\n        this.createCollectionParentIndex(db, simpleDbTransaction)\n      );\n    }\n\n    if (fromVersion < 9 && toVersion >= 9) {\n      p = p.next(() => {\n        // Multi-Tab used to manage its own changelog, but this has been moved\n        // to the DbRemoteDocument object store itself. Since the previous change\n        // log only contained transient data, we can drop its object store.\n        dropRemoteDocumentChangesStore(db);\n        createRemoteDocumentReadTimeIndex(txn);\n      });\n    }\n\n    if (fromVersion < 10 && toVersion >= 10) {\n      p = p.next(() => this.rewriteCanonicalIds(simpleDbTransaction));\n    }\n    return p;\n  }\n\n  private addDocumentGlobal(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    let byteCount = 0;\n    return txn\n      .store<DbRemoteDocumentKey, DbRemoteDocument>(DbRemoteDocument.store)\n      .iterate((_, doc) => {\n        byteCount += dbDocumentSize(doc);\n      })\n      .next(() => {\n        const metadata = new DbRemoteDocumentGlobal(byteCount);\n        return txn\n          .store<DbRemoteDocumentGlobalKey, DbRemoteDocumentGlobal>(\n            DbRemoteDocumentGlobal.store\n          )\n          .put(DbRemoteDocumentGlobal.key, metadata);\n      });\n  }\n\n  private removeAcknowledgedMutations(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    const queuesStore = txn.store<DbMutationQueueKey, DbMutationQueue>(\n      DbMutationQueue.store\n    );\n    const mutationsStore = txn.store<DbMutationBatchKey, DbMutationBatch>(\n      DbMutationBatch.store\n    );\n\n    return queuesStore.loadAll().next(queues => {\n      return PersistencePromise.forEach(queues, (queue: DbMutationQueue) => {\n        const range = IDBKeyRange.bound(\n          [queue.userId, BATCHID_UNKNOWN],\n          [queue.userId, queue.lastAcknowledgedBatchId]\n        );\n\n        return mutationsStore\n          .loadAll(DbMutationBatch.userMutationsIndex, range)\n          .next(dbBatches => {\n            return PersistencePromise.forEach(\n              dbBatches,\n              (dbBatch: DbMutationBatch) => {\n                hardAssert(\n                  dbBatch.userId === queue.userId,\n                  `Cannot process batch ${dbBatch.batchId} from unexpected user`\n                );\n                const batch = fromDbMutationBatch(this.serializer, dbBatch);\n\n                return removeMutationBatch(\n                  txn,\n                  queue.userId,\n                  batch\n                ).next(() => {});\n              }\n            );\n          });\n      });\n    });\n  }\n\n  /**\n   * Ensures that every document in the remote document cache has a corresponding sentinel row\n   * with a sequence number. Missing rows are given the most recently used sequence number.\n   */\n  private ensureSequenceNumbers(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    const documentTargetStore = txn.store<\n      DbTargetDocumentKey,\n      DbTargetDocument\n    >(DbTargetDocument.store);\n    const documentsStore = txn.store<DbRemoteDocumentKey, DbRemoteDocument>(\n      DbRemoteDocument.store\n    );\n    const globalTargetStore = txn.store<DbTargetGlobalKey, DbTargetGlobal>(\n      DbTargetGlobal.store\n    );\n\n    return globalTargetStore.get(DbTargetGlobal.key).next(metadata => {\n      debugAssert(\n        !!metadata,\n        'Metadata should have been written during the version 3 migration'\n      );\n      const writeSentinelKey = (\n        path: ResourcePath\n      ): PersistencePromise<void> => {\n        return documentTargetStore.put(\n          new DbTargetDocument(\n            0,\n            encodeResourcePath(path),\n            metadata!.highestListenSequenceNumber!\n          )\n        );\n      };\n\n      const promises: Array<PersistencePromise<void>> = [];\n      return documentsStore\n        .iterate((key, doc) => {\n          const path = new ResourcePath(key);\n          const docSentinelKey = sentinelKey(path);\n          promises.push(\n            documentTargetStore.get(docSentinelKey).next(maybeSentinel => {\n              if (!maybeSentinel) {\n                return writeSentinelKey(path);\n              } else {\n                return PersistencePromise.resolve();\n              }\n            })\n          );\n        })\n        .next(() => PersistencePromise.waitFor(promises));\n    });\n  }\n\n  private createCollectionParentIndex(\n    db: IDBDatabase,\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    // Create the index.\n    db.createObjectStore(DbCollectionParent.store, {\n      keyPath: DbCollectionParent.keyPath\n    });\n\n    const collectionParentsStore = txn.store<\n      DbCollectionParentKey,\n      DbCollectionParent\n    >(DbCollectionParent.store);\n\n    // Helper to add an index entry iff we haven't already written it.\n    const cache = new MemoryCollectionParentIndex();\n    const addEntry = (\n      collectionPath: ResourcePath\n    ): PersistencePromise<void> | undefined => {\n      if (cache.add(collectionPath)) {\n        const collectionId = collectionPath.lastSegment();\n        const parentPath = collectionPath.popLast();\n        return collectionParentsStore.put({\n          collectionId,\n          parent: encodeResourcePath(parentPath)\n        });\n      }\n    };\n\n    // Index existing remote documents.\n    return txn\n      .store<DbRemoteDocumentKey, DbRemoteDocument>(DbRemoteDocument.store)\n      .iterate({ keysOnly: true }, (pathSegments, _) => {\n        const path = new ResourcePath(pathSegments);\n        return addEntry(path.popLast());\n      })\n      .next(() => {\n        // Index existing mutations.\n        return txn\n          .store<DbDocumentMutationKey, DbDocumentMutation>(\n            DbDocumentMutation.store\n          )\n          .iterate({ keysOnly: true }, ([userID, encodedPath, batchId], _) => {\n            const path = decodeResourcePath(encodedPath);\n            return addEntry(path.popLast());\n          });\n      });\n  }\n\n  private rewriteCanonicalIds(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    const targetStore = txn.store<DbTargetKey, DbTarget>(DbTarget.store);\n    return targetStore.iterate((key, originalDbTarget) => {\n      const originalTargetData = fromDbTarget(originalDbTarget);\n      const updatedDbTarget = toDbTarget(this.serializer, originalTargetData);\n      return targetStore.put(updatedDbTarget);\n    });\n  }\n}\n\nfunction sentinelKey(path: ResourcePath): DbTargetDocumentKey {\n  return [0, encodeResourcePath(path)];\n}\n\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nexport class DbTimestamp {\n  constructor(public seconds: number, public nanoseconds: number) {}\n}\n\n/** A timestamp type that can be used in IndexedDb keys. */\nexport type DbTimestampKey = [/* seconds */ number, /* nanos */ number];\n\n// The key for the singleton object in the DbPrimaryClient is a single string.\nexport type DbPrimaryClientKey = typeof DbPrimaryClient.key;\n\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can have a single primary tab assigned at a given time. That\n * tab must validate that it is still holding the primary lease before every\n * operation that requires locked access. The primary tab should regularly\n * write an updated timestamp to this lease to prevent other tabs from\n * \"stealing\" the primary lease\n */\nexport class DbPrimaryClient {\n  /**\n   * Name of the IndexedDb object store.\n   *\n   * Note that the name 'owner' is chosen to ensure backwards compatibility with\n   * older clients that only supported single locked access to the persistence\n   * layer.\n   */\n  static store = 'owner';\n\n  /**\n   * The key string used for the single object that exists in the\n   * DbPrimaryClient store.\n   */\n  static key = 'owner';\n\n  constructor(\n    public ownerId: string,\n    /** Whether to allow shared access from multiple tabs. */\n    public allowTabSynchronization: boolean,\n    public leaseTimestampMs: number\n  ) {}\n}\n\nfunction createPrimaryClientStore(db: IDBDatabase): void {\n  db.createObjectStore(DbPrimaryClient.store);\n}\n\n/** Object keys in the 'mutationQueues' store are userId strings. */\nexport type DbMutationQueueKey = string;\n\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nexport class DbMutationQueue {\n  /** Name of the IndexedDb object store.  */\n  static store = 'mutationQueues';\n\n  /** Keys are automatically assigned via the userId property. */\n  static keyPath = 'userId';\n\n  constructor(\n    /**\n     * The normalized user ID to which this queue belongs.\n     */\n    public userId: string,\n    /**\n     * An identifier for the highest numbered batch that has been acknowledged\n     * by the server. All MutationBatches in this queue with batchIds less\n     * than or equal to this value are considered to have been acknowledged by\n     * the server.\n     *\n     * NOTE: this is deprecated and no longer used by the code.\n     */\n    public lastAcknowledgedBatchId: number,\n    /**\n     * A stream token that was previously sent by the server.\n     *\n     * See StreamingWriteRequest in datastore.proto for more details about\n     * usage.\n     *\n     * After sending this token, earlier tokens may not be used anymore so\n     * only a single stream token is retained.\n     *\n     * NOTE: this is deprecated and no longer used by the code.\n     */\n    public lastStreamToken: string\n  ) {}\n}\n\n/** The 'mutations' store  is keyed by batch ID. */\nexport type DbMutationBatchKey = BatchId;\n\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nexport class DbMutationBatch {\n  /** Name of the IndexedDb object store.  */\n  static store = 'mutations';\n\n  /** Keys are automatically assigned via the userId, batchId properties. */\n  static keyPath = 'batchId';\n\n  /** The index name for lookup of mutations by user. */\n  static userMutationsIndex = 'userMutationsIndex';\n\n  /** The user mutations index is keyed by [userId, batchId] pairs. */\n  static userMutationsKeyPath = ['userId', 'batchId'];\n\n  constructor(\n    /**\n     * The normalized user ID to which this batch belongs.\n     */\n    public userId: string,\n    /**\n     * An identifier for this batch, allocated using an auto-generated key.\n     */\n    public batchId: BatchId,\n    /**\n     * The local write time of the batch, stored as milliseconds since the\n     * epoch.\n     */\n    public localWriteTimeMs: number,\n    /**\n     * A list of \"mutations\" that represent a partial base state from when this\n     * write batch was initially created. During local application of the write\n     * batch, these baseMutations are applied prior to the real writes in order\n     * to override certain document fields from the remote document cache. This\n     * is necessary in the case of non-idempotent writes (e.g. `increment()`\n     * transforms) to make sure that the local view of the modified documents\n     * doesn't flicker if the remote document cache receives the result of the\n     * non-idempotent write before the write is removed from the queue.\n     *\n     * These mutations are never sent to the backend.\n     */\n    public baseMutations: ProtoWrite[] | undefined,\n    /**\n     * A list of mutations to apply. All mutations will be applied atomically.\n     *\n     * Mutations are serialized via toMutation().\n     */\n    public mutations: ProtoWrite[]\n  ) {}\n}\n\n/**\n * The key for a db document mutation, which is made up of a userID, path, and\n * batchId. Note that the path must be serialized into a form that indexedDB can\n * sort.\n */\nexport type DbDocumentMutationKey = [string, EncodedResourcePath, BatchId];\n\nfunction createMutationQueue(db: IDBDatabase): void {\n  db.createObjectStore(DbMutationQueue.store, {\n    keyPath: DbMutationQueue.keyPath\n  });\n\n  const mutationBatchesStore = db.createObjectStore(DbMutationBatch.store, {\n    keyPath: DbMutationBatch.keyPath,\n    autoIncrement: true\n  });\n  mutationBatchesStore.createIndex(\n    DbMutationBatch.userMutationsIndex,\n    DbMutationBatch.userMutationsKeyPath,\n    { unique: true }\n  );\n\n  db.createObjectStore(DbDocumentMutation.store);\n}\n\n/**\n * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads\n * and rewrites all data.\n */\nfunction upgradeMutationBatchSchemaAndMigrateData(\n  db: IDBDatabase,\n  txn: SimpleDbTransaction\n): PersistencePromise<void> {\n  const v1MutationsStore = txn.store<[string, number], DbMutationBatch>(\n    DbMutationBatch.store\n  );\n  return v1MutationsStore.loadAll().next(existingMutations => {\n    db.deleteObjectStore(DbMutationBatch.store);\n\n    const mutationsStore = db.createObjectStore(DbMutationBatch.store, {\n      keyPath: DbMutationBatch.keyPath,\n      autoIncrement: true\n    });\n    mutationsStore.createIndex(\n      DbMutationBatch.userMutationsIndex,\n      DbMutationBatch.userMutationsKeyPath,\n      { unique: true }\n    );\n\n    const v3MutationsStore = txn.store<DbMutationBatchKey, DbMutationBatch>(\n      DbMutationBatch.store\n    );\n    const writeAll = existingMutations.map(mutation =>\n      v3MutationsStore.put(mutation)\n    );\n\n    return PersistencePromise.waitFor(writeAll);\n  });\n}\n\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nexport class DbDocumentMutation {\n  static store = 'documentMutations';\n\n  /**\n   * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n   * over all of a user's document mutations.\n   */\n  static prefixForUser(userId: string): [string] {\n    return [userId];\n  }\n\n  /**\n   * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n   * index to iterate over all at document mutations for a given path or lower.\n   */\n  static prefixForPath(\n    userId: string,\n    path: ResourcePath\n  ): [string, EncodedResourcePath] {\n    return [userId, encodeResourcePath(path)];\n  }\n\n  /**\n   * Creates a full index key of [userId, encodedPath, batchId] for inserting\n   * and deleting into the DbDocumentMutations index.\n   */\n  static key(\n    userId: string,\n    path: ResourcePath,\n    batchId: BatchId\n  ): DbDocumentMutationKey {\n    return [userId, encodeResourcePath(path), batchId];\n  }\n\n  /**\n   * Because we store all the useful information for this store in the key,\n   * there is no useful information to store as the value. The raw (unencoded)\n   * path cannot be stored because IndexedDb doesn't store prototype\n   * information.\n   */\n  static PLACEHOLDER = new DbDocumentMutation();\n\n  private constructor() {}\n}\n\n/**\n * A key in the 'remoteDocuments' object store is a string array containing the\n * segments that make up the path.\n */\nexport type DbRemoteDocumentKey = string[];\n\nfunction createRemoteDocumentCache(db: IDBDatabase): void {\n  db.createObjectStore(DbRemoteDocument.store);\n}\n\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nexport class DbNoDocument {\n  constructor(public path: string[], public readTime: DbTimestamp) {}\n}\n\n/**\n * Represents a document that is known to exist but whose data is unknown.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nexport class DbUnknownDocument {\n  constructor(public path: string[], public version: DbTimestamp) {}\n}\n\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb.\n * It represents either:\n *\n * - A complete document.\n * - A \"no document\" representing a document that is known not to exist (at\n * some version).\n * - An \"unknown document\" representing a document that is known to exist (at\n * some version) but whose contents are unknown.\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nexport class DbRemoteDocument {\n  static store = 'remoteDocuments';\n\n  /**\n   * An index that provides access to all entries sorted by read time (which\n   * corresponds to the last modification time of each row).\n   *\n   * This index is used to provide a changelog for Multi-Tab.\n   */\n  static readTimeIndex = 'readTimeIndex';\n\n  static readTimeIndexPath = 'readTime';\n\n  /**\n   * An index that provides access to documents in a collection sorted by read\n   * time.\n   *\n   * This index is used to allow the RemoteDocumentCache to fetch newly changed\n   * documents in a collection.\n   */\n  static collectionReadTimeIndex = 'collectionReadTimeIndex';\n\n  static collectionReadTimeIndexPath = ['parentPath', 'readTime'];\n\n  // TODO: We are currently storing full document keys almost three times\n  // (once as part of the primary key, once - partly - as `parentPath` and once\n  // inside the encoded documents). During our next migration, we should\n  // rewrite the primary key as parentPath + document ID which would allow us\n  // to drop one value.\n\n  constructor(\n    /**\n     * Set to an instance of DbUnknownDocument if the data for a document is\n     * not known, but it is known that a document exists at the specified\n     * version (e.g. it had a successful update applied to it)\n     */\n    public unknownDocument: DbUnknownDocument | null | undefined,\n    /**\n     * Set to an instance of a DbNoDocument if it is known that no document\n     * exists.\n     */\n    public noDocument: DbNoDocument | null,\n    /**\n     * Set to an instance of a Document if there's a cached version of the\n     * document.\n     */\n    public document: ProtoDocument | null,\n    /**\n     * Documents that were written to the remote document store based on\n     * a write acknowledgment are marked with `hasCommittedMutations`. These\n     * documents are potentially inconsistent with the backend's copy and use\n     * the write's commit version as their document version.\n     */\n    public hasCommittedMutations: boolean | undefined,\n\n    /**\n     * When the document was read from the backend. Undefined for data written\n     * prior to schema version 9.\n     */\n    public readTime: DbTimestampKey | undefined,\n\n    /**\n     * The path of the collection this document is part of. Undefined for data\n     * written prior to schema version 9.\n     */\n    public parentPath: string[] | undefined\n  ) {}\n}\n\n/**\n * Contains a single entry that has metadata about the remote document cache.\n */\nexport class DbRemoteDocumentGlobal {\n  static store = 'remoteDocumentGlobal';\n\n  static key = 'remoteDocumentGlobalKey';\n\n  /**\n   * @param byteSize Approximately the total size in bytes of all the documents in the document\n   * cache.\n   */\n  constructor(public byteSize: number) {}\n}\n\nexport type DbRemoteDocumentGlobalKey = typeof DbRemoteDocumentGlobal.key;\n\nfunction createDocumentGlobalStore(db: IDBDatabase): void {\n  db.createObjectStore(DbRemoteDocumentGlobal.store);\n}\n\n/**\n * A key in the 'targets' object store is a targetId of the query.\n */\nexport type DbTargetKey = TargetId;\n\n/**\n * The persisted type for a query nested with in the 'targets' store in\n * IndexedDb. We use the proto definitions for these two kinds of queries in\n * order to avoid writing extra serialization logic.\n */\nexport type DbQuery = ProtoQueryTarget | ProtoDocumentsTarget;\n\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nexport class DbTarget {\n  static store = 'targets';\n\n  /** Keys are automatically assigned via the targetId property. */\n  static keyPath = 'targetId';\n\n  /** The name of the queryTargets index. */\n  static queryTargetsIndexName = 'queryTargetsIndex';\n\n  /**\n   * The index of all canonicalIds to the targets that they match. This is not\n   * a unique mapping because canonicalId does not promise a unique name for all\n   * possible queries, so we append the targetId to make the mapping unique.\n   */\n  static queryTargetsKeyPath = ['canonicalId', 'targetId'];\n\n  constructor(\n    /**\n     * An auto-generated sequential numeric identifier for the query.\n     *\n     * Queries are stored using their canonicalId as the key, but these\n     * canonicalIds can be quite long so we additionally assign a unique\n     * queryId which can be used by referenced data structures (e.g.\n     * indexes) to minimize the on-disk cost.\n     */\n    public targetId: TargetId,\n    /**\n     * The canonical string representing this query. This is not unique.\n     */\n    public canonicalId: string,\n    /**\n     * The last readTime received from the Watch Service for this query.\n     *\n     * This is the same value as TargetChange.read_time in the protos.\n     */\n    public readTime: DbTimestamp,\n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data\n     * that matches the query. The resume token essentially identifies a\n     * point in time from which the server should resume sending results.\n     *\n     * This is related to the snapshotVersion in that the resumeToken\n     * effectively also encodes that value, but the resumeToken is opaque\n     * and sometimes encodes additional information.\n     *\n     * A consequence of this is that the resumeToken should be used when\n     * asking the server to reason about where this client is in the watch\n     * stream, but the client should use the snapshotVersion for its own\n     * purposes.\n     *\n     * This is the same value as TargetChange.resume_token in the protos.\n     */\n    public resumeToken: string,\n    /**\n     * A sequence number representing the last time this query was\n     * listened to, used for garbage collection purposes.\n     *\n     * Conventionally this would be a timestamp value, but device-local\n     * clocks are unreliable and they must be able to create new listens\n     * even while disconnected. Instead this should be a monotonically\n     * increasing number that's incremented on each listen call.\n     *\n     * This is different from the queryId since the queryId is an\n     * immutable identifier assigned to the Query on first use while\n     * lastListenSequenceNumber is updated every time the query is\n     * listened to.\n     */\n    public lastListenSequenceNumber: number,\n    /**\n     * Denotes the maximum snapshot version at which the associated query view\n     * contained no limbo documents.  Undefined for data written prior to\n     * schema version 9.\n     */\n    public lastLimboFreeSnapshotVersion: DbTimestamp | undefined,\n    /**\n     * The query for this target.\n     *\n     * Because canonical ids are not unique we must store the actual query. We\n     * use the proto to have an object we can persist without having to\n     * duplicate translation logic to and from a `Query` object.\n     */\n    public query: DbQuery\n  ) {}\n}\n\n/**\n * The key for a DbTargetDocument, containing a targetId and an encoded resource\n * path.\n */\nexport type DbTargetDocumentKey = [TargetId, EncodedResourcePath];\n\n/**\n * An object representing an association between a target and a document, or a\n * sentinel row marking the last sequence number at which a document was used.\n * Each document cached must have a corresponding sentinel row before lru\n * garbage collection is enabled.\n *\n * The target associations and sentinel rows are co-located so that orphaned\n * documents and their sequence numbers can be identified efficiently via a scan\n * of this store.\n */\nexport class DbTargetDocument {\n  /** Name of the IndexedDb object store.  */\n  static store = 'targetDocuments';\n\n  /** Keys are automatically assigned via the targetId, path properties. */\n  static keyPath = ['targetId', 'path'];\n\n  /** The index name for the reverse index. */\n  static documentTargetsIndex = 'documentTargetsIndex';\n\n  /** We also need to create the reverse index for these properties. */\n  static documentTargetsKeyPath = ['path', 'targetId'];\n\n  constructor(\n    /**\n     * The targetId identifying a target or 0 for a sentinel row.\n     */\n    public targetId: TargetId,\n    /**\n     * The path to the document, as encoded in the key.\n     */\n    public path: EncodedResourcePath,\n    /**\n     * If this is a sentinel row, this should be the sequence number of the last\n     * time the document specified by `path` was used. Otherwise, it should be\n     * `undefined`.\n     */\n    public sequenceNumber?: ListenSequenceNumber\n  ) {\n    debugAssert(\n      (targetId === 0) === (sequenceNumber !== undefined),\n      'A target-document row must either have targetId == 0 and a defined sequence number, or a non-zero targetId and no sequence number'\n    );\n  }\n}\n\n/**\n * The type to represent the single allowed key for the DbTargetGlobal store.\n */\nexport type DbTargetGlobalKey = typeof DbTargetGlobal.key;\n\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nexport class DbTargetGlobal {\n  /**\n   * The key string used for the single object that exists in the\n   * DbTargetGlobal store.\n   */\n  static key = 'targetGlobalKey';\n  static store = 'targetGlobal';\n\n  constructor(\n    /**\n     * The highest numbered target id across all targets.\n     *\n     * See DbTarget.targetId.\n     */\n    public highestTargetId: TargetId,\n    /**\n     * The highest numbered lastListenSequenceNumber across all targets.\n     *\n     * See DbTarget.lastListenSequenceNumber.\n     */\n    public highestListenSequenceNumber: number,\n    /**\n     * A global snapshot version representing the last consistent snapshot we\n     * received from the backend. This is monotonically increasing and any\n     * snapshots received from the backend prior to this version (e.g. for\n     * targets resumed with a resumeToken) should be suppressed (buffered)\n     * until the backend has caught up to this snapshot version again. This\n     * prevents our cache from ever going backwards in time.\n     */\n    public lastRemoteSnapshotVersion: DbTimestamp,\n    /**\n     * The number of targets persisted.\n     */\n    public targetCount: number\n  ) {}\n}\n\n/**\n * The key for a DbCollectionParent entry, containing the collection ID\n * and the parent path that contains it. Note that the parent path will be an\n * empty path in the case of root-level collections.\n */\nexport type DbCollectionParentKey = [string, EncodedResourcePath];\n\n/**\n * An object representing an association between a Collection id (e.g. 'messages')\n * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.\n * This is used to efficiently find all collections to query when performing\n * a Collection Group query.\n */\nexport class DbCollectionParent {\n  /** Name of the IndexedDb object store. */\n  static store = 'collectionParents';\n\n  /** Keys are automatically assigned via the collectionId, parent properties. */\n  static keyPath = ['collectionId', 'parent'];\n\n  constructor(\n    /**\n     * The collectionId (e.g. 'messages')\n     */\n    public collectionId: string,\n    /**\n     * The path to the parent (either a document location or an empty path for\n     * a root-level collection).\n     */\n    public parent: EncodedResourcePath\n  ) {}\n}\n\nfunction createQueryCache(db: IDBDatabase): void {\n  const targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, {\n    keyPath: DbTargetDocument.keyPath\n  });\n  targetDocumentsStore.createIndex(\n    DbTargetDocument.documentTargetsIndex,\n    DbTargetDocument.documentTargetsKeyPath,\n    { unique: true }\n  );\n\n  const targetStore = db.createObjectStore(DbTarget.store, {\n    keyPath: DbTarget.keyPath\n  });\n\n  // NOTE: This is unique only because the TargetId is the suffix.\n  targetStore.createIndex(\n    DbTarget.queryTargetsIndexName,\n    DbTarget.queryTargetsKeyPath,\n    { unique: true }\n  );\n  db.createObjectStore(DbTargetGlobal.store);\n}\n\nfunction dropQueryCache(db: IDBDatabase): void {\n  db.deleteObjectStore(DbTargetDocument.store);\n  db.deleteObjectStore(DbTarget.store);\n  db.deleteObjectStore(DbTargetGlobal.store);\n}\n\nfunction dropRemoteDocumentChangesStore(db: IDBDatabase): void {\n  if (db.objectStoreNames.contains('remoteDocumentChanges')) {\n    db.deleteObjectStore('remoteDocumentChanges');\n  }\n}\n\n/**\n * Creates the target global singleton row.\n *\n * @param {IDBTransaction} txn The version upgrade transaction for indexeddb\n */\nfunction writeEmptyTargetGlobalEntry(\n  txn: SimpleDbTransaction\n): PersistencePromise<void> {\n  const globalStore = txn.store<DbTargetGlobalKey, DbTargetGlobal>(\n    DbTargetGlobal.store\n  );\n  const metadata = new DbTargetGlobal(\n    /*highestTargetId=*/ 0,\n    /*lastListenSequenceNumber=*/ 0,\n    SnapshotVersion.min().toTimestamp(),\n    /*targetCount=*/ 0\n  );\n  return globalStore.put(DbTargetGlobal.key, metadata);\n}\n\n/**\n * Creates indices on the RemoteDocuments store used for both multi-tab\n * and Index-Free queries.\n */\nfunction createRemoteDocumentReadTimeIndex(txn: IDBTransaction): void {\n  const remoteDocumentStore = txn.objectStore(DbRemoteDocument.store);\n  remoteDocumentStore.createIndex(\n    DbRemoteDocument.readTimeIndex,\n    DbRemoteDocument.readTimeIndexPath,\n    { unique: false }\n  );\n  remoteDocumentStore.createIndex(\n    DbRemoteDocument.collectionReadTimeIndex,\n    DbRemoteDocument.collectionReadTimeIndexPath,\n    { unique: false }\n  );\n}\n\n/**\n * A record of the metadata state of each client.\n *\n * PORTING NOTE: This is used to synchronize multi-tab state and does not need\n * to be ported to iOS or Android.\n */\nexport class DbClientMetadata {\n  /** Name of the IndexedDb object store. */\n  static store = 'clientMetadata';\n\n  /** Keys are automatically assigned via the clientId properties. */\n  static keyPath = 'clientId';\n\n  constructor(\n    // Note: Previous schema versions included a field\n    // \"lastProcessedDocumentChangeId\". Don't use anymore.\n\n    /** The auto-generated client id assigned at client startup. */\n    public clientId: string,\n    /** The last time this state was updated. */\n    public updateTimeMs: number,\n    /** Whether the client's network connection is enabled. */\n    public networkEnabled: boolean,\n    /** Whether this client is running in a foreground tab. */\n    public inForeground: boolean\n  ) {}\n}\n\n/** Object keys in the 'clientMetadata' store are clientId strings. */\nexport type DbClientMetadataKey = string;\n\nfunction createClientMetadataStore(db: IDBDatabase): void {\n  db.createObjectStore(DbClientMetadata.store, {\n    keyPath: DbClientMetadata.keyPath\n  });\n}\n\n// Visible for testing\nexport const V1_STORES = [\n  DbMutationQueue.store,\n  DbMutationBatch.store,\n  DbDocumentMutation.store,\n  DbRemoteDocument.store,\n  DbTarget.store,\n  DbPrimaryClient.store,\n  DbTargetGlobal.store,\n  DbTargetDocument.store\n];\n\n// V2 is no longer usable (see comment at top of file)\n\n// Visible for testing\nexport const V3_STORES = V1_STORES;\n\n// Visible for testing\n// Note: DbRemoteDocumentChanges is no longer used and dropped with v9.\nexport const V4_STORES = [...V3_STORES, DbClientMetadata.store];\n\n// V5 does not change the set of stores.\n\nexport const V6_STORES = [...V4_STORES, DbRemoteDocumentGlobal.store];\n\n// V7 does not change the set of stores.\n\nexport const V8_STORES = [...V6_STORES, DbCollectionParent.store];\n\n// V9 does not change the set of stores.\n\n// V10 does not change the set of stores.\n\n/**\n * The list of all default IndexedDB stores used throughout the SDK. This is\n * used when creating transactions so that access across all stores is done\n * atomically.\n */\nexport const ALL_STORES = V8_STORES;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { debugAssert } from '../util/assert';\nimport { immediateSuccessor } from '../util/misc';\nimport {\n  decodeResourcePath,\n  encodeResourcePath\n} from './encoded_resource_path';\nimport { IndexManager } from './index_manager';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport { DbCollectionParent, DbCollectionParentKey } from './indexeddb_schema';\nimport { MemoryCollectionParentIndex } from './memory_index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbStore } from './simple_db';\n\n/**\n * A persisted implementation of IndexManager.\n */\nexport class IndexedDbIndexManager implements IndexManager {\n  /**\n   * An in-memory copy of the index entries we've already written since the SDK\n   * launched. Used to avoid re-writing the same entry repeatedly.\n   *\n   * This is *NOT* a complete cache of what's in persistence and so can never be used to\n   * satisfy reads.\n   */\n  private collectionParentsCache = new MemoryCollectionParentIndex();\n\n  /**\n   * Adds a new entry to the collection parent index.\n   *\n   * Repeated calls for the same collectionPath should be avoided within a\n   * transaction as IndexedDbIndexManager only caches writes once a transaction\n   * has been committed.\n   */\n  addToCollectionParentIndex(\n    transaction: PersistenceTransaction,\n    collectionPath: ResourcePath\n  ): PersistencePromise<void> {\n    debugAssert(collectionPath.length % 2 === 1, 'Expected a collection path.');\n    if (!this.collectionParentsCache.has(collectionPath)) {\n      const collectionId = collectionPath.lastSegment();\n      const parentPath = collectionPath.popLast();\n\n      transaction.addOnCommittedListener(() => {\n        // Add the collection to the in memory cache only if the transaction was\n        // successfully committed.\n        this.collectionParentsCache.add(collectionPath);\n      });\n\n      const collectionParent: DbCollectionParent = {\n        collectionId,\n        parent: encodeResourcePath(parentPath)\n      };\n      return collectionParentsStore(transaction).put(collectionParent);\n    }\n    return PersistencePromise.resolve();\n  }\n\n  getCollectionParents(\n    transaction: PersistenceTransaction,\n    collectionId: string\n  ): PersistencePromise<ResourcePath[]> {\n    const parentPaths = [] as ResourcePath[];\n    const range = IDBKeyRange.bound(\n      [collectionId, ''],\n      [immediateSuccessor(collectionId), ''],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    return collectionParentsStore(transaction)\n      .loadAll(range)\n      .next(entries => {\n        for (const entry of entries) {\n          // This collectionId guard shouldn't be necessary (and isn't as long\n          // as we're running in a real browser), but there's a bug in\n          // indexeddbshim that breaks our range in our tests running in node:\n          // https://github.com/axemclion/IndexedDBShim/issues/334\n          if (entry.collectionId !== collectionId) {\n            break;\n          }\n          parentPaths.push(decodeResourcePath(entry.parent));\n        }\n        return parentPaths;\n      });\n  }\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the collectionParents\n * document store.\n */\nfunction collectionParentsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbCollectionParentKey, DbCollectionParent> {\n  return IndexedDbPersistence.getStore<\n    DbCollectionParentKey,\n    DbCollectionParent\n  >(txn, DbCollectionParent.store);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from './types';\n\n/** Offset to ensure non-overlapping target ids. */\nconst OFFSET = 2;\n\n/**\n * Generates monotonically increasing target IDs for sending targets to the\n * watch stream.\n *\n * The client constructs two generators, one for the target cache, and one for\n * for the sync engine (to generate limbo documents targets). These\n * generators produce non-overlapping IDs (by using even and odd IDs\n * respectively).\n *\n * By separating the target ID space, the query cache can generate target IDs\n * that persist across client restarts, while sync engine can independently\n * generate in-memory target IDs that are transient and can be reused after a\n * restart.\n */\nexport class TargetIdGenerator {\n  constructor(private lastId: number) {}\n\n  next(): TargetId {\n    this.lastId += OFFSET;\n    return this.lastId;\n  }\n\n  static forTargetCache(): TargetIdGenerator {\n    // The target cache generator must return '2' in its first call to `next()`\n    // as there is no differentiation in the protocol layer between an unset\n    // number and the number '0'. If we were to sent a target with target ID\n    // '0', the backend would consider it unset and replace it with its own ID.\n    return new TargetIdGenerator(2 - OFFSET);\n  }\n\n  static forSyncEngine(): TargetIdGenerator {\n    // Sync engine assigns target IDs for limbo document detection.\n    return new TargetIdGenerator(1 - OFFSET);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKeySet, documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { hardAssert } from '../util/assert';\nimport { immediateSuccessor } from '../util/misc';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport {\n  decodeResourcePath,\n  encodeResourcePath\n} from './encoded_resource_path';\nimport {\n  IndexedDbLruDelegate,\n  IndexedDbPersistence\n} from './indexeddb_persistence';\nimport {\n  DbTarget,\n  DbTargetDocument,\n  DbTargetDocumentKey,\n  DbTargetGlobal,\n  DbTargetGlobalKey,\n  DbTargetKey\n} from './indexeddb_schema';\nimport { fromDbTarget, LocalSerializer, toDbTarget } from './local_serializer';\nimport { ActiveTargets } from './lru_garbage_collector';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { TargetData } from './target_data';\nimport { SimpleDbStore } from './simple_db';\nimport { canonifyTarget, Target, targetEquals } from '../core/target';\n\nexport class IndexedDbTargetCache implements TargetCache {\n  constructor(\n    private readonly referenceDelegate: IndexedDbLruDelegate,\n    private serializer: LocalSerializer\n  ) {}\n\n  // PORTING NOTE: We don't cache global metadata for the target cache, since\n  // some of it (in particular `highestTargetId`) can be modified by secondary\n  // tabs. We could perhaps be more granular (and e.g. still cache\n  // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go\n  // to IndexedDb whenever we need to read metadata. We can revisit if it turns\n  // out to have a meaningful performance impact.\n\n  allocateTargetId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<TargetId> {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      const targetIdGenerator = new TargetIdGenerator(metadata.highestTargetId);\n      metadata.highestTargetId = targetIdGenerator.next();\n      return this.saveMetadata(transaction, metadata).next(\n        () => metadata.highestTargetId\n      );\n    });\n  }\n\n  getLastRemoteSnapshotVersion(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<SnapshotVersion> {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      return SnapshotVersion.fromTimestamp(\n        new Timestamp(\n          metadata.lastRemoteSnapshotVersion.seconds,\n          metadata.lastRemoteSnapshotVersion.nanoseconds\n        )\n      );\n    });\n  }\n\n  getHighestSequenceNumber(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<ListenSequenceNumber> {\n    return this.retrieveMetadata(transaction).next(\n      targetGlobal => targetGlobal.highestListenSequenceNumber\n    );\n  }\n\n  setTargetsMetadata(\n    transaction: PersistenceTransaction,\n    highestListenSequenceNumber: number,\n    lastRemoteSnapshotVersion?: SnapshotVersion\n  ): PersistencePromise<void> {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n      if (lastRemoteSnapshotVersion) {\n        metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();\n      }\n      if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {\n        metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n      }\n      return this.saveMetadata(transaction, metadata);\n    });\n  }\n\n  addTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return this.saveTargetData(transaction, targetData).next(() => {\n      return this.retrieveMetadata(transaction).next(metadata => {\n        metadata.targetCount += 1;\n        this.updateMetadataFromTargetData(targetData, metadata);\n        return this.saveMetadata(transaction, metadata);\n      });\n    });\n  }\n\n  updateTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return this.saveTargetData(transaction, targetData);\n  }\n\n  removeTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return this.removeMatchingKeysForTargetId(transaction, targetData.targetId)\n      .next(() => targetsStore(transaction).delete(targetData.targetId))\n      .next(() => this.retrieveMetadata(transaction))\n      .next(metadata => {\n        hardAssert(\n          metadata.targetCount > 0,\n          'Removing from an empty target cache'\n        );\n        metadata.targetCount -= 1;\n        return this.saveMetadata(transaction, metadata);\n      });\n  }\n\n  /**\n   * Drops any targets with sequence number less than or equal to the upper bound, excepting those\n   * present in `activeTargetIds`. Document associations for the removed targets are also removed.\n   * Returns the number of targets removed.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    let count = 0;\n    const promises: Array<PersistencePromise<void>> = [];\n    return targetsStore(txn)\n      .iterate((key, value) => {\n        const targetData = fromDbTarget(value);\n        if (\n          targetData.sequenceNumber <= upperBound &&\n          activeTargetIds.get(targetData.targetId) === null\n        ) {\n          count++;\n          promises.push(this.removeTargetData(txn, targetData));\n        }\n      })\n      .next(() => PersistencePromise.waitFor(promises))\n      .next(() => count);\n  }\n\n  /**\n   * Call provided function with each `TargetData` that we have cached.\n   */\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return targetsStore(txn).iterate((key, value) => {\n      const targetData = fromDbTarget(value);\n      f(targetData);\n    });\n  }\n\n  private retrieveMetadata(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<DbTargetGlobal> {\n    return globalTargetStore(transaction)\n      .get(DbTargetGlobal.key)\n      .next(metadata => {\n        hardAssert(metadata !== null, 'Missing metadata row.');\n        return metadata;\n      });\n  }\n\n  private saveMetadata(\n    transaction: PersistenceTransaction,\n    metadata: DbTargetGlobal\n  ): PersistencePromise<void> {\n    return globalTargetStore(transaction).put(DbTargetGlobal.key, metadata);\n  }\n\n  private saveTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return targetsStore(transaction).put(\n      toDbTarget(this.serializer, targetData)\n    );\n  }\n\n  /**\n   * In-place updates the provided metadata to account for values in the given\n   * TargetData. Saving is done separately. Returns true if there were any\n   * changes to the metadata.\n   */\n  private updateMetadataFromTargetData(\n    targetData: TargetData,\n    metadata: DbTargetGlobal\n  ): boolean {\n    let updated = false;\n    if (targetData.targetId > metadata.highestTargetId) {\n      metadata.highestTargetId = targetData.targetId;\n      updated = true;\n    }\n\n    if (targetData.sequenceNumber > metadata.highestListenSequenceNumber) {\n      metadata.highestListenSequenceNumber = targetData.sequenceNumber;\n      updated = true;\n    }\n    return updated;\n  }\n\n  getTargetCount(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<number> {\n    return this.retrieveMetadata(transaction).next(\n      metadata => metadata.targetCount\n    );\n  }\n\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    // Iterating by the canonicalId may yield more than one result because\n    // canonicalId values are not required to be unique per target. This query\n    // depends on the queryTargets index to be efficient.\n    const canonicalId = canonifyTarget(target);\n    const range = IDBKeyRange.bound(\n      [canonicalId, Number.NEGATIVE_INFINITY],\n      [canonicalId, Number.POSITIVE_INFINITY]\n    );\n    let result: TargetData | null = null;\n    return targetsStore(transaction)\n      .iterate(\n        { range, index: DbTarget.queryTargetsIndexName },\n        (key, value, control) => {\n          const found = fromDbTarget(value);\n          // After finding a potential match, check that the target is\n          // actually equal to the requested target.\n          if (targetEquals(target, found.target)) {\n            result = found;\n            control.done();\n          }\n        }\n      )\n      .next(() => result);\n  }\n\n  addMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n    const promises: Array<PersistencePromise<void>> = [];\n    const store = documentTargetStore(txn);\n    keys.forEach(key => {\n      const path = encodeResourcePath(key.path);\n      promises.push(store.put(new DbTargetDocument(targetId, path)));\n      promises.push(this.referenceDelegate.addReference(txn, targetId, key));\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n\n  removeMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n    const store = documentTargetStore(txn);\n    return PersistencePromise.forEach(keys, (key: DocumentKey) => {\n      const path = encodeResourcePath(key.path);\n      return PersistencePromise.waitFor([\n        store.delete([targetId, path]),\n        this.referenceDelegate.removeReference(txn, targetId, key)\n      ]);\n    });\n  }\n\n  removeMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    const store = documentTargetStore(txn);\n    const range = IDBKeyRange.bound(\n      [targetId],\n      [targetId + 1],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    return store.delete(range);\n  }\n\n  getMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<DocumentKeySet> {\n    const range = IDBKeyRange.bound(\n      [targetId],\n      [targetId + 1],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    const store = documentTargetStore(txn);\n    let result = documentKeySet();\n\n    return store\n      .iterate({ range, keysOnly: true }, (key, _, control) => {\n        const path = decodeResourcePath(key[1]);\n        const docKey = new DocumentKey(path);\n        result = result.add(docKey);\n      })\n      .next(() => result);\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    const path = encodeResourcePath(key.path);\n    const range = IDBKeyRange.bound(\n      [path],\n      [immediateSuccessor(path)],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    let count = 0;\n    return documentTargetStore(txn!)\n      .iterate(\n        {\n          index: DbTargetDocument.documentTargetsIndex,\n          keysOnly: true,\n          range\n        },\n        ([targetId, path], _, control) => {\n          // Having a sentinel row for a document does not count as containing that document;\n          // For the target cache, containing the document means the document is part of some\n          // target.\n          if (targetId !== 0) {\n            count++;\n            control.done();\n          }\n        }\n      )\n      .next(() => count > 0);\n  }\n\n  /**\n   * Looks up a TargetData entry by target ID.\n   *\n   * @param targetId The target ID of the TargetData entry to look up.\n   * @return The cached TargetData entry, or null if the cache has no entry for\n   * the target.\n   */\n  // PORTING NOTE: Multi-tab only.\n  getTargetDataForTarget(\n    transaction: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<TargetData | null> {\n    return targetsStore(transaction)\n      .get(targetId)\n      .next(found => {\n        if (found) {\n          return fromDbTarget(found);\n        } else {\n          return null;\n        }\n      });\n  }\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbTargetKey, DbTarget> {\n  return IndexedDbPersistence.getStore<DbTargetKey, DbTarget>(\n    txn,\n    DbTarget.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbTargetGlobalKey, DbTargetGlobal> {\n  return IndexedDbPersistence.getStore<DbTargetGlobalKey, DbTargetGlobal>(\n    txn,\n    DbTargetGlobal.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nexport function documentTargetStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbTargetDocumentKey, DbTargetDocument> {\n  return IndexedDbPersistence.getStore<DbTargetDocumentKey, DbTargetDocument>(\n    txn,\n    DbTargetDocument.store\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { DatabaseId } from '../core/database_info';\nimport { ListenSequence, SequenceNumberSyncer } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { debugAssert, fail } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\nimport {\n  decodeResourcePath,\n  EncodedResourcePath,\n  encodeResourcePath\n} from './encoded_resource_path';\nimport { IndexedDbIndexManager } from './indexeddb_index_manager';\nimport {\n  IndexedDbMutationQueue,\n  mutationQueuesContainKey\n} from './indexeddb_mutation_queue';\nimport {\n  IndexedDbRemoteDocumentCache,\n  newIndexedDbRemoteDocumentCache\n} from './indexeddb_remote_document_cache';\nimport {\n  ALL_STORES,\n  DbClientMetadata,\n  DbClientMetadataKey,\n  DbPrimaryClient,\n  DbPrimaryClientKey,\n  DbTargetDocument,\n  SCHEMA_VERSION,\n  SchemaConverter\n} from './indexeddb_schema';\nimport {\n  documentTargetStore,\n  IndexedDbTargetCache\n} from './indexeddb_target_cache';\nimport { LocalSerializer } from './local_serializer';\nimport {\n  ActiveTargets,\n  LruDelegate,\n  LruGarbageCollector,\n  LruParams\n} from './lru_garbage_collector';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PersistenceTransactionMode,\n  PRIMARY_LEASE_LOST_ERROR_MSG,\n  PrimaryStateListener,\n  ReferenceDelegate\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ClientId } from './shared_client_state';\nimport { TargetData } from './target_data';\nimport {\n  isIndexedDbTransactionError,\n  SimpleDb,\n  SimpleDbStore,\n  SimpleDbTransaction\n} from './simple_db';\nimport { DocumentLike, WindowLike } from '../util/types';\n\nconst LOG_TAG = 'IndexedDbPersistence';\n\n/**\n * Oldest acceptable age in milliseconds for client metadata before the client\n * is considered inactive and its associated data is garbage collected.\n */\nconst MAX_CLIENT_AGE_MS = 30 * 60 * 1000; // 30 minutes\n\n/**\n * Oldest acceptable metadata age for clients that may participate in the\n * primary lease election. Clients that have not updated their client metadata\n * within 5 seconds are not eligible to receive a primary lease.\n */\nconst MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000;\n\n/**\n * The interval at which clients will update their metadata, including\n * refreshing their primary lease if held or potentially trying to acquire it if\n * not held.\n *\n * Primary clients may opportunistically refresh their metadata earlier\n * if they're already performing an IndexedDB operation.\n */\nconst CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000;\n/** User-facing error when the primary lease is required but not available. */\nconst PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG =\n  'Failed to obtain exclusive access to the persistence layer. To allow ' +\n  'shared access, multi-tab synchronization has to be enabled in all tabs. ' +\n  'If you are using `experimentalForceOwningTab:true`, make sure that only ' +\n  'one tab has persistence enabled at any given time.';\nconst UNSUPPORTED_PLATFORM_ERROR_MSG =\n  'This platform is either missing IndexedDB or is known to have ' +\n  'an incomplete implementation. Offline persistence has been disabled.';\n\n// The format of the LocalStorage key that stores zombied client is:\n//     firestore_zombie_<persistence_prefix>_<instance_key>\nconst ZOMBIED_CLIENTS_KEY_PREFIX = 'firestore_zombie';\n\n/**\n * The name of the main (and currently only) IndexedDB database. This name is\n * appended to the prefix provided to the IndexedDbPersistence constructor.\n */\nexport const MAIN_DATABASE = 'main';\n\nexport class IndexedDbTransaction extends PersistenceTransaction {\n  constructor(\n    readonly simpleDbTransaction: SimpleDbTransaction,\n    readonly currentSequenceNumber: ListenSequenceNumber\n  ) {\n    super();\n  }\n}\n\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * On Web only, the Firestore SDKs support shared access to its persistence\n * layer. This allows multiple browser tabs to read and write to IndexedDb and\n * to synchronize state even without network connectivity. Shared access is\n * currently optional and not enabled unless all clients invoke\n * `enablePersistence()` with `{synchronizeTabs:true}`.\n *\n * In multi-tab mode, if multiple clients are active at the same time, the SDK\n * will designate one client as the “primary client”. An effort is made to pick\n * a visible, network-connected and active client, and this client is\n * responsible for letting other clients know about its presence. The primary\n * client writes a unique client-generated identifier (the client ID) to\n * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to\n * update this entry, another client can acquire the lease and take over as\n * primary.\n *\n * Some persistence operations in the SDK are designated as primary-client only\n * operations. This includes the acknowledgment of mutations and all updates of\n * remote documents. The effects of these operations are written to persistence\n * and then broadcast to other tabs via LocalStorage (see\n * `WebStorageSharedClientState`), which then refresh their state from\n * persistence.\n *\n * Similarly, the primary client listens to notifications sent by secondary\n * clients to discover persistence changes written by secondary clients, such as\n * the addition of new mutations and query targets.\n *\n * If multi-tab is not enabled and another tab already obtained the primary\n * lease, IndexedDbPersistence enters a failed state and all subsequent\n * operations will automatically fail.\n *\n * Additionally, there is an optimization so that when a tab is closed, the\n * primary lease is released immediately (this is especially important to make\n * sure that a refreshed tab is able to immediately re-acquire the primary\n * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload\n * since it is an asynchronous API. So in addition to attempting to give up the\n * lease, the leaseholder writes its client ID to a \"zombiedClient\" entry in\n * LocalStorage which acts as an indicator that another tab should go ahead and\n * take the primary lease immediately regardless of the current lease timestamp.\n *\n * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no\n * longer optional.\n */\nexport class IndexedDbPersistence implements Persistence {\n  static getStore<Key extends IDBValidKey, Value>(\n    txn: PersistenceTransaction,\n    store: string\n  ): SimpleDbStore<Key, Value> {\n    if (txn instanceof IndexedDbTransaction) {\n      return SimpleDb.getStore<Key, Value>(txn.simpleDbTransaction, store);\n    } else {\n      throw fail(\n        'IndexedDbPersistence must use instances of IndexedDbTransaction'\n      );\n    }\n  }\n\n  private simpleDb: SimpleDb;\n\n  private listenSequence: ListenSequence | null = null;\n\n  private _started = false;\n  private isPrimary = false;\n  private networkEnabled = true;\n  private dbName: string;\n\n  /** Our window.unload handler, if registered. */\n  private windowUnloadHandler: (() => void) | null = null;\n  private inForeground = false;\n\n  private serializer: LocalSerializer;\n\n  /** Our 'visibilitychange' listener if registered. */\n  private documentVisibilityHandler: ((e?: Event) => void) | null = null;\n\n  /** The client metadata refresh task. */\n  private clientMetadataRefresher: DelayedOperation<void> | null = null;\n\n  /** The last time we garbage collected the client metadata object store. */\n  private lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;\n\n  /** A listener to notify on primary state changes. */\n  private primaryStateListener: PrimaryStateListener = _ => Promise.resolve();\n\n  private readonly targetCache: IndexedDbTargetCache;\n  private readonly indexManager: IndexedDbIndexManager;\n  private readonly remoteDocumentCache: IndexedDbRemoteDocumentCache;\n  private readonly webStorage: Storage | null;\n  readonly referenceDelegate: IndexedDbLruDelegate;\n\n  constructor(\n    /**\n     * Whether to synchronize the in-memory state of multiple tabs and share\n     * access to local persistence.\n     */\n    private readonly allowTabSynchronization: boolean,\n\n    private readonly persistenceKey: string,\n    private readonly clientId: ClientId,\n    lruParams: LruParams,\n    private readonly queue: AsyncQueue,\n    private readonly window: WindowLike | null,\n    private readonly document: DocumentLike | null,\n    serializer: JsonProtoSerializer,\n    private readonly sequenceNumberSyncer: SequenceNumberSyncer,\n\n    /**\n     * If set to true, forcefully obtains database access. Existing tabs will\n     * no longer be able to access IndexedDB.\n     */\n    private readonly forceOwningTab: boolean\n  ) {\n    if (!IndexedDbPersistence.isAvailable()) {\n      throw new FirestoreError(\n        Code.UNIMPLEMENTED,\n        UNSUPPORTED_PLATFORM_ERROR_MSG\n      );\n    }\n\n    this.referenceDelegate = new IndexedDbLruDelegate(this, lruParams);\n    this.dbName = persistenceKey + MAIN_DATABASE;\n    this.serializer = new LocalSerializer(serializer);\n    this.simpleDb = new SimpleDb(\n      this.dbName,\n      SCHEMA_VERSION,\n      new SchemaConverter(this.serializer)\n    );\n    this.targetCache = new IndexedDbTargetCache(\n      this.referenceDelegate,\n      this.serializer\n    );\n    this.indexManager = new IndexedDbIndexManager();\n    this.remoteDocumentCache = newIndexedDbRemoteDocumentCache(\n      this.serializer,\n      this.indexManager\n    );\n    if (this.window && this.window.localStorage) {\n      this.webStorage = this.window.localStorage;\n    } else {\n      this.webStorage = null;\n      if (forceOwningTab === false) {\n        logError(\n          LOG_TAG,\n          'LocalStorage is unavailable. As a result, persistence may not work ' +\n            'reliably. In particular enablePersistence() could fail immediately ' +\n            'after refreshing the page.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Attempt to start IndexedDb persistence.\n   *\n   * @return {Promise<void>} Whether persistence was enabled.\n   */\n  start(): Promise<void> {\n    debugAssert(!this.started, 'IndexedDbPersistence double-started!');\n    debugAssert(this.window !== null, \"Expected 'window' to be defined\");\n\n    // NOTE: This is expected to fail sometimes (in the case of another tab\n    // already having the persistence lock), so it's the first thing we should\n    // do.\n    return this.updateClientMetadataAndTryBecomePrimary()\n      .then(() => {\n        if (!this.isPrimary && !this.allowTabSynchronization) {\n          // Fail `start()` if `synchronizeTabs` is disabled and we cannot\n          // obtain the primary lease.\n          throw new FirestoreError(\n            Code.FAILED_PRECONDITION,\n            PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG\n          );\n        }\n        this.attachVisibilityHandler();\n        this.attachWindowUnloadHook();\n\n        this.scheduleClientMetadataAndPrimaryLeaseRefreshes();\n\n        return this.runTransaction(\n          'getHighestListenSequenceNumber',\n          'readonly',\n          txn => this.targetCache.getHighestSequenceNumber(txn)\n        );\n      })\n      .then(highestListenSequenceNumber => {\n        this.listenSequence = new ListenSequence(\n          highestListenSequenceNumber,\n          this.sequenceNumberSyncer\n        );\n      })\n      .then(() => {\n        this._started = true;\n      })\n      .catch(reason => {\n        this.simpleDb && this.simpleDb.close();\n        return Promise.reject(reason);\n      });\n  }\n\n  /**\n   * Registers a listener that gets called when the primary state of the\n   * instance changes. Upon registering, this listener is invoked immediately\n   * with the current primary state.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setPrimaryStateListener(\n    primaryStateListener: PrimaryStateListener\n  ): Promise<void> {\n    this.primaryStateListener = async primaryState => {\n      if (this.started) {\n        return primaryStateListener(primaryState);\n      }\n    };\n    return primaryStateListener(this.isPrimary);\n  }\n\n  /**\n   * Registers a listener that gets called when the database receives a\n   * version change event indicating that it has deleted.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setDatabaseDeletedListener(\n    databaseDeletedListener: () => Promise<void>\n  ): void {\n    this.simpleDb.setVersionChangeListener(async event => {\n      // Check if an attempt is made to delete IndexedDB.\n      if (event.newVersion === null) {\n        await databaseDeletedListener();\n      }\n    });\n  }\n\n  /**\n   * Adjusts the current network state in the client's metadata, potentially\n   * affecting the primary lease.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setNetworkEnabled(networkEnabled: boolean): void {\n    if (this.networkEnabled !== networkEnabled) {\n      this.networkEnabled = networkEnabled;\n      // Schedule a primary lease refresh for immediate execution. The eventual\n      // lease update will be propagated via `primaryStateListener`.\n      this.queue.enqueueAndForget(async () => {\n        if (this.started) {\n          await this.updateClientMetadataAndTryBecomePrimary();\n        }\n      });\n    }\n  }\n\n  /**\n   * Updates the client metadata in IndexedDb and attempts to either obtain or\n   * extend the primary lease for the local client. Asynchronously notifies the\n   * primary state listener if the client either newly obtained or released its\n   * primary lease.\n   */\n  private updateClientMetadataAndTryBecomePrimary(): Promise<void> {\n    return this.runTransaction(\n      'updateClientMetadataAndTryBecomePrimary',\n      'readwrite',\n      txn => {\n        const metadataStore = clientMetadataStore(txn);\n        return metadataStore\n          .put(\n            new DbClientMetadata(\n              this.clientId,\n              Date.now(),\n              this.networkEnabled,\n              this.inForeground\n            )\n          )\n          .next(() => {\n            if (this.isPrimary) {\n              return this.verifyPrimaryLease(txn).next(success => {\n                if (!success) {\n                  this.isPrimary = false;\n                  this.queue.enqueueRetryable(() =>\n                    this.primaryStateListener(false)\n                  );\n                }\n              });\n            }\n          })\n          .next(() => this.canActAsPrimary(txn))\n          .next(canActAsPrimary => {\n            if (this.isPrimary && !canActAsPrimary) {\n              return this.releasePrimaryLeaseIfHeld(txn).next(() => false);\n            } else if (canActAsPrimary) {\n              return this.acquireOrExtendPrimaryLease(txn).next(() => true);\n            } else {\n              return /* canActAsPrimary= */ false;\n            }\n          });\n      }\n    )\n      .catch(e => {\n        if (isIndexedDbTransactionError(e)) {\n          logDebug(LOG_TAG, 'Failed to extend owner lease: ', e);\n          // Proceed with the existing state. Any subsequent access to\n          // IndexedDB will verify the lease.\n          return this.isPrimary;\n        }\n\n        if (!this.allowTabSynchronization) {\n          throw e;\n        }\n\n        logDebug(\n          LOG_TAG,\n          'Releasing owner lease after error during lease refresh',\n          e\n        );\n        return /* isPrimary= */ false;\n      })\n      .then(isPrimary => {\n        if (this.isPrimary !== isPrimary) {\n          this.queue.enqueueRetryable(() =>\n            this.primaryStateListener(isPrimary)\n          );\n        }\n        this.isPrimary = isPrimary;\n      });\n  }\n\n  private verifyPrimaryLease(\n    txn: PersistenceTransaction\n  ): PersistencePromise<boolean> {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(primaryClient => {\n      return PersistencePromise.resolve(this.isLocalClient(primaryClient));\n    });\n  }\n\n  private removeClientMetadata(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const metadataStore = clientMetadataStore(txn);\n    return metadataStore.delete(this.clientId);\n  }\n\n  /**\n   * If the garbage collection threshold has passed, prunes the\n   * RemoteDocumentChanges and the ClientMetadata store based on the last update\n   * time of all clients.\n   */\n  private async maybeGarbageCollectMultiClientState(): Promise<void> {\n    if (\n      this.isPrimary &&\n      !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS)\n    ) {\n      this.lastGarbageCollectionTime = Date.now();\n\n      const inactiveClients = await this.runTransaction(\n        'maybeGarbageCollectMultiClientState',\n        'readwrite-primary',\n        txn => {\n          const metadataStore = IndexedDbPersistence.getStore<\n            DbClientMetadataKey,\n            DbClientMetadata\n          >(txn, DbClientMetadata.store);\n\n          return metadataStore.loadAll().next(existingClients => {\n            const active = this.filterActiveClients(\n              existingClients,\n              MAX_CLIENT_AGE_MS\n            );\n            const inactive = existingClients.filter(\n              client => active.indexOf(client) === -1\n            );\n\n            // Delete metadata for clients that are no longer considered active.\n            return PersistencePromise.forEach(\n              inactive,\n              (inactiveClient: DbClientMetadata) =>\n                metadataStore.delete(inactiveClient.clientId)\n            ).next(() => inactive);\n          });\n        }\n      ).catch(() => {\n        // Ignore primary lease violations or any other type of error. The next\n        // primary will run `maybeGarbageCollectMultiClientState()` again.\n        // We don't use `ignoreIfPrimaryLeaseLoss()` since we don't want to depend\n        // on LocalStore.\n        return [];\n      });\n\n      // Delete potential leftover entries that may continue to mark the\n      // inactive clients as zombied in LocalStorage.\n      // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for\n      // the client atomically, but we can't. So we opt to delete the IndexedDb\n      // entries first to avoid potentially reviving a zombied client.\n      if (this.webStorage) {\n        for (const inactiveClient of inactiveClients) {\n          this.webStorage.removeItem(\n            this.zombiedClientLocalStorageKey(inactiveClient.clientId)\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Schedules a recurring timer to update the client metadata and to either\n   * extend or acquire the primary lease if the client is eligible.\n   */\n  private scheduleClientMetadataAndPrimaryLeaseRefreshes(): void {\n    this.clientMetadataRefresher = this.queue.enqueueAfterDelay(\n      TimerId.ClientMetadataRefresh,\n      CLIENT_METADATA_REFRESH_INTERVAL_MS,\n      () => {\n        return this.updateClientMetadataAndTryBecomePrimary()\n          .then(() => this.maybeGarbageCollectMultiClientState())\n          .then(() => this.scheduleClientMetadataAndPrimaryLeaseRefreshes());\n      }\n    );\n  }\n\n  /** Checks whether `client` is the local client. */\n  private isLocalClient(client: DbPrimaryClient | null): boolean {\n    return client ? client.ownerId === this.clientId : false;\n  }\n\n  /**\n   * Evaluate the state of all active clients and determine whether the local\n   * client is or can act as the holder of the primary lease. Returns whether\n   * the client is eligible for the lease, but does not actually acquire it.\n   * May return 'false' even if there is no active leaseholder and another\n   * (foreground) client should become leaseholder instead.\n   */\n  private canActAsPrimary(\n    txn: PersistenceTransaction\n  ): PersistencePromise<boolean> {\n    if (this.forceOwningTab) {\n      return PersistencePromise.resolve<boolean>(true);\n    }\n    const store = primaryClientStore(txn);\n    return store\n      .get(DbPrimaryClient.key)\n      .next(currentPrimary => {\n        const currentLeaseIsValid =\n          currentPrimary !== null &&\n          this.isWithinAge(\n            currentPrimary.leaseTimestampMs,\n            MAX_PRIMARY_ELIGIBLE_AGE_MS\n          ) &&\n          !this.isClientZombied(currentPrimary.ownerId);\n\n        // A client is eligible for the primary lease if:\n        // - its network is enabled and the client's tab is in the foreground.\n        // - its network is enabled and no other client's tab is in the\n        //   foreground.\n        // - every clients network is disabled and the client's tab is in the\n        //   foreground.\n        // - every clients network is disabled and no other client's tab is in\n        //   the foreground.\n        // - the `forceOwningTab` setting was passed in.\n        if (currentLeaseIsValid) {\n          if (this.isLocalClient(currentPrimary) && this.networkEnabled) {\n            return true;\n          }\n\n          if (!this.isLocalClient(currentPrimary)) {\n            if (!currentPrimary!.allowTabSynchronization) {\n              // Fail the `canActAsPrimary` check if the current leaseholder has\n              // not opted into multi-tab synchronization. If this happens at\n              // client startup, we reject the Promise returned by\n              // `enablePersistence()` and the user can continue to use Firestore\n              // with in-memory persistence.\n              // If this fails during a lease refresh, we will instead block the\n              // AsyncQueue from executing further operations. Note that this is\n              // acceptable since mixing & matching different `synchronizeTabs`\n              // settings is not supported.\n              //\n              // TODO(b/114226234): Remove this check when `synchronizeTabs` can\n              // no longer be turned off.\n              throw new FirestoreError(\n                Code.FAILED_PRECONDITION,\n                PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG\n              );\n            }\n\n            return false;\n          }\n        }\n\n        if (this.networkEnabled && this.inForeground) {\n          return true;\n        }\n\n        return clientMetadataStore(txn)\n          .loadAll()\n          .next(existingClients => {\n            // Process all existing clients and determine whether at least one of\n            // them is better suited to obtain the primary lease.\n            const preferredCandidate = this.filterActiveClients(\n              existingClients,\n              MAX_PRIMARY_ELIGIBLE_AGE_MS\n            ).find(otherClient => {\n              if (this.clientId !== otherClient.clientId) {\n                const otherClientHasBetterNetworkState =\n                  !this.networkEnabled && otherClient.networkEnabled;\n                const otherClientHasBetterVisibility =\n                  !this.inForeground && otherClient.inForeground;\n                const otherClientHasSameNetworkState =\n                  this.networkEnabled === otherClient.networkEnabled;\n                if (\n                  otherClientHasBetterNetworkState ||\n                  (otherClientHasBetterVisibility &&\n                    otherClientHasSameNetworkState)\n                ) {\n                  return true;\n                }\n              }\n              return false;\n            });\n            return preferredCandidate === undefined;\n          });\n      })\n      .next(canActAsPrimary => {\n        if (this.isPrimary !== canActAsPrimary) {\n          logDebug(\n            LOG_TAG,\n            `Client ${\n              canActAsPrimary ? 'is' : 'is not'\n            } eligible for a primary lease.`\n          );\n        }\n        return canActAsPrimary;\n      });\n  }\n\n  async shutdown(): Promise<void> {\n    // The shutdown() operations are idempotent and can be called even when\n    // start() aborted (e.g. because it couldn't acquire the persistence lease).\n    this._started = false;\n\n    this.markClientZombied();\n    if (this.clientMetadataRefresher) {\n      this.clientMetadataRefresher.cancel();\n      this.clientMetadataRefresher = null;\n    }\n    this.detachVisibilityHandler();\n    this.detachWindowUnloadHook();\n\n    // Use `SimpleDb.runTransaction` directly to avoid failing if another tab\n    // has obtained the primary lease.\n    await this.simpleDb.runTransaction(\n      'shutdown',\n      'readwrite',\n      [DbPrimaryClient.store, DbClientMetadata.store],\n      simpleDbTxn => {\n        const persistenceTransaction = new IndexedDbTransaction(\n          simpleDbTxn,\n          ListenSequence.INVALID\n        );\n        return this.releasePrimaryLeaseIfHeld(persistenceTransaction).next(() =>\n          this.removeClientMetadata(persistenceTransaction)\n        );\n      }\n    );\n    this.simpleDb.close();\n\n    // Remove the entry marking the client as zombied from LocalStorage since\n    // we successfully deleted its metadata from IndexedDb.\n    this.removeClientZombiedEntry();\n  }\n\n  /**\n   * Returns clients that are not zombied and have an updateTime within the\n   * provided threshold.\n   */\n  private filterActiveClients(\n    clients: DbClientMetadata[],\n    activityThresholdMs: number\n  ): DbClientMetadata[] {\n    return clients.filter(\n      client =>\n        this.isWithinAge(client.updateTimeMs, activityThresholdMs) &&\n        !this.isClientZombied(client.clientId)\n    );\n  }\n\n  /**\n   * Returns the IDs of the clients that are currently active. If multi-tab\n   * is not supported, returns an array that only contains the local client's\n   * ID.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  getActiveClients(): Promise<ClientId[]> {\n    return this.runTransaction('getActiveClients', 'readonly', txn => {\n      return clientMetadataStore(txn)\n        .loadAll()\n        .next(clients =>\n          this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(\n            clientMetadata => clientMetadata.clientId\n          )\n        );\n    });\n  }\n\n  get started(): boolean {\n    return this._started;\n  }\n\n  getMutationQueue(user: User): IndexedDbMutationQueue {\n    debugAssert(\n      this.started,\n      'Cannot initialize MutationQueue before persistence is started.'\n    );\n    return IndexedDbMutationQueue.forUser(\n      user,\n      this.serializer,\n      this.indexManager,\n      this.referenceDelegate\n    );\n  }\n\n  getTargetCache(): IndexedDbTargetCache {\n    debugAssert(\n      this.started,\n      'Cannot initialize TargetCache before persistence is started.'\n    );\n    return this.targetCache;\n  }\n\n  getRemoteDocumentCache(): IndexedDbRemoteDocumentCache {\n    debugAssert(\n      this.started,\n      'Cannot initialize RemoteDocumentCache before persistence is started.'\n    );\n    return this.remoteDocumentCache;\n  }\n\n  getIndexManager(): IndexedDbIndexManager {\n    debugAssert(\n      this.started,\n      'Cannot initialize IndexManager before persistence is started.'\n    );\n    return this.indexManager;\n  }\n\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T> {\n    logDebug(LOG_TAG, 'Starting transaction:', action);\n\n    const simpleDbMode = mode === 'readonly' ? 'readonly' : 'readwrite';\n\n    let persistenceTransaction: PersistenceTransaction;\n\n    // Do all transactions as readwrite against all object stores, since we\n    // are the only reader/writer.\n    return this.simpleDb\n      .runTransaction(action, simpleDbMode, ALL_STORES, simpleDbTxn => {\n        persistenceTransaction = new IndexedDbTransaction(\n          simpleDbTxn,\n          this.listenSequence\n            ? this.listenSequence.next()\n            : ListenSequence.INVALID\n        );\n\n        if (mode === 'readwrite-primary') {\n          // While we merely verify that we have (or can acquire) the lease\n          // immediately, we wait to extend the primary lease until after\n          // executing transactionOperation(). This ensures that even if the\n          // transactionOperation takes a long time, we'll use a recent\n          // leaseTimestampMs in the extended (or newly acquired) lease.\n          return this.verifyPrimaryLease(persistenceTransaction)\n            .next(holdsPrimaryLease => {\n              if (holdsPrimaryLease) {\n                return /* holdsPrimaryLease= */ true;\n              }\n              return this.canActAsPrimary(persistenceTransaction);\n            })\n            .next(holdsPrimaryLease => {\n              if (!holdsPrimaryLease) {\n                logError(\n                  `Failed to obtain primary lease for action '${action}'.`\n                );\n                this.isPrimary = false;\n                this.queue.enqueueRetryable(() =>\n                  this.primaryStateListener(false)\n                );\n                throw new FirestoreError(\n                  Code.FAILED_PRECONDITION,\n                  PRIMARY_LEASE_LOST_ERROR_MSG\n                );\n              }\n              return transactionOperation(persistenceTransaction);\n            })\n            .next(result => {\n              return this.acquireOrExtendPrimaryLease(\n                persistenceTransaction\n              ).next(() => result);\n            });\n        } else {\n          return this.verifyAllowTabSynchronization(\n            persistenceTransaction\n          ).next(() => transactionOperation(persistenceTransaction));\n        }\n      })\n      .then(result => {\n        persistenceTransaction.raiseOnCommittedEvent();\n        return result;\n      });\n  }\n\n  /**\n   * Verifies that the current tab is the primary leaseholder or alternatively\n   * that the leaseholder has opted into multi-tab synchronization.\n   */\n  // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer\n  // be turned off.\n  private verifyAllowTabSynchronization(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(currentPrimary => {\n      const currentLeaseIsValid =\n        currentPrimary !== null &&\n        this.isWithinAge(\n          currentPrimary.leaseTimestampMs,\n          MAX_PRIMARY_ELIGIBLE_AGE_MS\n        ) &&\n        !this.isClientZombied(currentPrimary.ownerId);\n\n      if (currentLeaseIsValid && !this.isLocalClient(currentPrimary)) {\n        if (\n          !this.forceOwningTab &&\n          (!this.allowTabSynchronization ||\n            !currentPrimary!.allowTabSynchronization)\n        ) {\n          throw new FirestoreError(\n            Code.FAILED_PRECONDITION,\n            PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Obtains or extends the new primary lease for the local client. This\n   * method does not verify that the client is eligible for this lease.\n   */\n  private acquireOrExtendPrimaryLease(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const newPrimary = new DbPrimaryClient(\n      this.clientId,\n      this.allowTabSynchronization,\n      Date.now()\n    );\n    return primaryClientStore(txn).put(DbPrimaryClient.key, newPrimary);\n  }\n\n  static isAvailable(): boolean {\n    return SimpleDb.isAvailable();\n  }\n\n  /** Checks the primary lease and removes it if we are the current primary. */\n  private releasePrimaryLeaseIfHeld(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(primaryClient => {\n      if (this.isLocalClient(primaryClient)) {\n        logDebug(LOG_TAG, 'Releasing primary lease.');\n        return store.delete(DbPrimaryClient.key);\n      } else {\n        return PersistencePromise.resolve();\n      }\n    });\n  }\n\n  /** Verifies that `updateTimeMs` is within `maxAgeMs`. */\n  private isWithinAge(updateTimeMs: number, maxAgeMs: number): boolean {\n    const now = Date.now();\n    const minAcceptable = now - maxAgeMs;\n    const maxAcceptable = now;\n    if (updateTimeMs < minAcceptable) {\n      return false;\n    } else if (updateTimeMs > maxAcceptable) {\n      logError(\n        `Detected an update time that is in the future: ${updateTimeMs} > ${maxAcceptable}`\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  private attachVisibilityHandler(): void {\n    if (\n      this.document !== null &&\n      typeof this.document.addEventListener === 'function'\n    ) {\n      this.documentVisibilityHandler = () => {\n        this.queue.enqueueAndForget(() => {\n          this.inForeground = this.document!.visibilityState === 'visible';\n          return this.updateClientMetadataAndTryBecomePrimary();\n        });\n      };\n\n      this.document.addEventListener(\n        'visibilitychange',\n        this.documentVisibilityHandler\n      );\n\n      this.inForeground = this.document.visibilityState === 'visible';\n    }\n  }\n\n  private detachVisibilityHandler(): void {\n    if (this.documentVisibilityHandler) {\n      debugAssert(\n        this.document !== null &&\n          typeof this.document.addEventListener === 'function',\n        \"Expected 'document.addEventListener' to be a function\"\n      );\n      this.document.removeEventListener(\n        'visibilitychange',\n        this.documentVisibilityHandler\n      );\n      this.documentVisibilityHandler = null;\n    }\n  }\n\n  /**\n   * Attaches a window.unload handler that will synchronously write our\n   * clientId to a \"zombie client id\" location in LocalStorage. This can be used\n   * by tabs trying to acquire the primary lease to determine that the lease\n   * is no longer valid even if the timestamp is recent. This is particularly\n   * important for the refresh case (so the tab correctly re-acquires the\n   * primary lease). LocalStorage is used for this rather than IndexedDb because\n   * it is a synchronous API and so can be used reliably from  an unload\n   * handler.\n   */\n  private attachWindowUnloadHook(): void {\n    if (typeof this.window?.addEventListener === 'function') {\n      this.windowUnloadHandler = () => {\n        // Note: In theory, this should be scheduled on the AsyncQueue since it\n        // accesses internal state. We execute this code directly during shutdown\n        // to make sure it gets a chance to run.\n        this.markClientZombied();\n\n        this.queue.enqueueAndForget(() => {\n          // Attempt graceful shutdown (including releasing our primary lease),\n          // but there's no guarantee it will complete.\n          return this.shutdown();\n        });\n      };\n      this.window.addEventListener('unload', this.windowUnloadHandler);\n    }\n  }\n\n  private detachWindowUnloadHook(): void {\n    if (this.windowUnloadHandler) {\n      debugAssert(\n        typeof this.window?.removeEventListener === 'function',\n        \"Expected 'window.removeEventListener' to be a function\"\n      );\n      this.window!.removeEventListener('unload', this.windowUnloadHandler);\n      this.windowUnloadHandler = null;\n    }\n  }\n\n  /**\n   * Returns whether a client is \"zombied\" based on its LocalStorage entry.\n   * Clients become zombied when their tab closes without running all of the\n   * cleanup logic in `shutdown()`.\n   */\n  private isClientZombied(clientId: ClientId): boolean {\n    try {\n      const isZombied =\n        this.webStorage?.getItem(\n          this.zombiedClientLocalStorageKey(clientId)\n        ) !== null;\n      logDebug(\n        LOG_TAG,\n        `Client '${clientId}' ${\n          isZombied ? 'is' : 'is not'\n        } zombied in LocalStorage`\n      );\n      return isZombied;\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't working.\n      logError(LOG_TAG, 'Failed to get zombied client id.', e);\n      return false;\n    }\n  }\n\n  /**\n   * Record client as zombied (a client that had its tab closed). Zombied\n   * clients are ignored during primary tab selection.\n   */\n  private markClientZombied(): void {\n    if (!this.webStorage) {\n      return;\n    }\n    try {\n      this.webStorage.setItem(\n        this.zombiedClientLocalStorageKey(this.clientId),\n        String(Date.now())\n      );\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't available / working.\n      logError('Failed to set zombie client id.', e);\n    }\n  }\n\n  /** Removes the zombied client entry if it exists. */\n  private removeClientZombiedEntry(): void {\n    if (!this.webStorage) {\n      return;\n    }\n    try {\n      this.webStorage.removeItem(\n        this.zombiedClientLocalStorageKey(this.clientId)\n      );\n    } catch (e) {\n      // Ignore\n    }\n  }\n\n  private zombiedClientLocalStorageKey(clientId: ClientId): string {\n    return `${ZOMBIED_CLIENTS_KEY_PREFIX}_${this.persistenceKey}_${clientId}`;\n  }\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the primary client object store.\n */\nfunction primaryClientStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbPrimaryClientKey, DbPrimaryClient> {\n  return IndexedDbPersistence.getStore<DbPrimaryClientKey, DbPrimaryClient>(\n    txn,\n    DbPrimaryClient.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the client metadata object store.\n */\nfunction clientMetadataStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbClientMetadataKey, DbClientMetadata> {\n  return IndexedDbPersistence.getStore<DbClientMetadataKey, DbClientMetadata>(\n    txn,\n    DbClientMetadata.store\n  );\n}\n\n/** Provides LRU functionality for IndexedDB persistence. */\nexport class IndexedDbLruDelegate implements ReferenceDelegate, LruDelegate {\n  readonly garbageCollector: LruGarbageCollector;\n\n  constructor(private readonly db: IndexedDbPersistence, params: LruParams) {\n    this.garbageCollector = new LruGarbageCollector(this, params);\n  }\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.db.getTargetCache().getTargetCount(txn);\n    return targetCountPromise.next(targetCount =>\n      docCountPromise.next(docCount => targetCount + docCount)\n    );\n  }\n\n  private orphanedDocumentCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return this.db.getTargetCache().forEachTarget(txn, f);\n  }\n\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    return this.forEachOrphanedDocument(txn, (docKey, sequenceNumber) =>\n      f(sequenceNumber)\n    );\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.db\n      .getTargetCache()\n      .removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  /**\n   * Returns true if anything would prevent this document from being garbage\n   * collected, given that the document in question is not present in any\n   * targets and has a sequence number less than or equal to the upper bound for\n   * the collection run.\n   */\n  private isPinned(\n    txn: PersistenceTransaction,\n    docKey: DocumentKey\n  ): PersistencePromise<boolean> {\n    return mutationQueuesContainKey(txn, docKey);\n  }\n\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    const documentCache = this.db.getRemoteDocumentCache();\n    const changeBuffer = documentCache.newChangeBuffer();\n\n    const promises: Array<PersistencePromise<void>> = [];\n    let documentCount = 0;\n\n    const iteration = this.forEachOrphanedDocument(\n      txn,\n      (docKey, sequenceNumber) => {\n        if (sequenceNumber <= upperBound) {\n          const p = this.isPinned(txn, docKey).next(isPinned => {\n            if (!isPinned) {\n              documentCount++;\n              // Our size accounting requires us to read all documents before\n              // removing them.\n              return changeBuffer.getEntry(txn, docKey).next(() => {\n                changeBuffer.removeEntry(docKey);\n                return documentTargetStore(txn).delete(sentinelKey(docKey));\n              });\n            }\n          });\n          promises.push(p);\n        }\n      }\n    );\n\n    return iteration\n      .next(() => PersistencePromise.waitFor(promises))\n      .next(() => changeBuffer.apply(txn))\n      .next(() => documentCount);\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.db.getTargetCache().updateTargetData(txn, updated);\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  /**\n   * Call provided function for each document in the cache that is 'orphaned'. Orphaned\n   * means not a part of any target, so the only entry in the target-document index for\n   * that document will be the sentinel row (targetId 0), which will also have the sequence\n   * number for the last time the document was accessed.\n   */\n  private forEachOrphanedDocument(\n    txn: PersistenceTransaction,\n    f: (docKey: DocumentKey, sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    const store = documentTargetStore(txn);\n    let nextToReport: ListenSequenceNumber = ListenSequence.INVALID;\n    let nextPath: EncodedResourcePath;\n    return store\n      .iterate(\n        {\n          index: DbTargetDocument.documentTargetsIndex\n        },\n        ([targetId, docKey], { path, sequenceNumber }) => {\n          if (targetId === 0) {\n            // if nextToReport is valid, report it, this is a new key so the\n            // last one must not be a member of any targets.\n            if (nextToReport !== ListenSequence.INVALID) {\n              f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n            }\n            // set nextToReport to be this sequence number. It's the next one we\n            // might report, if we don't find any targets for this document.\n            // Note that the sequence number must be defined when the targetId\n            // is 0.\n            nextToReport = sequenceNumber!;\n            nextPath = path;\n          } else {\n            // set nextToReport to be invalid, we know we don't need to report\n            // this one since we found a target for it.\n            nextToReport = ListenSequence.INVALID;\n          }\n        }\n      )\n      .next(() => {\n        // Since we report sequence numbers after getting to the next key, we\n        // need to check if the last key we iterated over was an orphaned\n        // document and report it.\n        if (nextToReport !== ListenSequence.INVALID) {\n          f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n        }\n      });\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.db.getRemoteDocumentCache().getSize(txn);\n  }\n}\n\nfunction sentinelKey(key: DocumentKey): [TargetId, EncodedResourcePath] {\n  return [0, encodeResourcePath(key.path)];\n}\n\n/**\n * @return A value suitable for writing a sentinel row in the target-document\n * store.\n */\nfunction sentinelRow(\n  key: DocumentKey,\n  sequenceNumber: ListenSequenceNumber\n): DbTargetDocument {\n  return new DbTargetDocument(0, encodeResourcePath(key.path), sequenceNumber);\n}\n\nfunction writeSentinelKey(\n  txn: PersistenceTransaction,\n  key: DocumentKey\n): PersistencePromise<void> {\n  return documentTargetStore(txn).put(\n    sentinelRow(key, txn.currentSequenceNumber)\n  );\n}\n\n/**\n * Generates a string used as a prefix when storing data in IndexedDB and\n * LocalStorage.\n */\nexport function indexedDbStoragePrefix(\n  databaseId: DatabaseId,\n  persistenceKey: string\n): string {\n  // Use two different prefix formats:\n  //\n  //   * firestore / persistenceKey / projectID . databaseID / ...\n  //   * firestore / persistenceKey / projectID / ...\n  //\n  // projectIDs are DNS-compatible names and cannot contain dots\n  // so there's no danger of collisions.\n  let database = databaseId.projectId;\n  if (!databaseId.isDefaultDatabase) {\n    database += '.' + databaseId.database;\n  }\n\n  return 'firestore/' + persistenceKey + '/' + database + '/';\n}\n\nexport async function indexedDbClearPersistence(\n  persistenceKey: string\n): Promise<void> {\n  if (!SimpleDb.isAvailable()) {\n    return Promise.resolve();\n  }\n  const dbName = persistenceKey + MAIN_DATABASE;\n  await SimpleDb.delete(dbName);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { User } from '../auth/user';\nimport { Query, queryToTarget } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { canonifyTarget, Target, targetEquals } from '../core/target';\nimport { BatchId, TargetId } from '../core/types';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  maybeDocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  Mutation,\n  PatchMutation,\n  Precondition,\n  extractMutationBaseValue\n} from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport { debugAssert, debugCast, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { LocalDocumentsView } from './local_documents_view';\nimport { LocalViewChanges } from './local_view_changes';\nimport { LruGarbageCollector, LruResults } from './lru_garbage_collector';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PRIMARY_LEASE_LOST_ERROR_MSG\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { QueryEngine } from './query_engine';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nimport { ClientId } from './shared_client_state';\nimport { TargetData, TargetPurpose } from './target_data';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport {\n  remoteDocumentCacheGetLastReadTime,\n  remoteDocumentCacheGetNewDocumentChanges\n} from './indexeddb_remote_document_cache';\nimport { IndexedDbTargetCache } from './indexeddb_target_cache';\nimport { extractFieldMask } from '../model/object_value';\nimport { isIndexedDbTransactionError } from './simple_db';\n\nconst LOG_TAG = 'LocalStore';\n\n/**\n * The maximum time to leave a resume token buffered without writing it out.\n * This value is arbitrary: it's long enough to avoid several writes\n * (possibly indefinitely if updates come more frequently than this) but\n * short enough that restarting after crashing will still have a pretty\n * recent resume token.\n */\nconst RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;\n\n/** The result of a write to the local store. */\nexport interface LocalWriteResult {\n  batchId: BatchId;\n  changes: MaybeDocumentMap;\n}\n\n/** The result of a user-change operation in the local store. */\nexport interface UserChangeResult {\n  readonly affectedDocuments: MaybeDocumentMap;\n  readonly removedBatchIds: BatchId[];\n  readonly addedBatchIds: BatchId[];\n}\n\n/** The result of executing a query against the local store. */\nexport interface QueryResult {\n  readonly documents: DocumentMap;\n  readonly remoteKeys: DocumentKeySet;\n}\n\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n *\n * This interface retains one method to help TypeScript narrow down the type.\n * All other methods are free functions.\n */\nexport interface LocalStore {\n  collectGarbage(garbageCollector: LruGarbageCollector): Promise<LruResults>;\n}\n\n/**\n * Implements `LocalStore` interface.\n *\n * Note: some field defined in this class might have public access level, but\n * the class is not exported so they are only accessible from this module.\n * This is useful to implement optional features (like bundles) in free\n * functions, such that they are tree-shakeable.\n */\nclass LocalStoreImpl implements LocalStore {\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  mutationQueue: MutationQueue;\n\n  /** The set of all cached remote documents. */\n  remoteDocuments: RemoteDocumentCache;\n\n  /**\n   * The \"local\" view of all documents (layering mutationQueue on top of\n   * remoteDocumentCache).\n   */\n  localDocuments: LocalDocumentsView;\n\n  /** Maps a target to its `TargetData`. */\n  targetCache: TargetCache;\n\n  /**\n   * Maps a targetID to data about its target.\n   *\n   * PORTING NOTE: We are using an immutable data structure on Web to make re-runs\n   * of `applyRemoteEvent()` idempotent.\n   */\n  targetDataByTarget = new SortedMap<TargetId, TargetData>(primitiveComparator);\n\n  /** Maps a target to its targetID. */\n  // TODO(wuandy): Evaluate if TargetId can be part of Target.\n  targetIdByTarget = new ObjectMap<Target, TargetId>(\n    t => canonifyTarget(t),\n    targetEquals\n  );\n\n  /**\n   * The read time of the last entry processed by `getNewDocumentChanges()`.\n   *\n   * PORTING NOTE: This is only used for multi-tab synchronization.\n   */\n  lastDocumentChangeReadTime = SnapshotVersion.min();\n\n  constructor(\n    /** Manages our in-memory or durable persistence. */\n    readonly persistence: Persistence,\n    readonly queryEngine: QueryEngine,\n    initialUser: User\n  ) {\n    debugAssert(\n      persistence.started,\n      'LocalStore was passed an unstarted persistence implementation'\n    );\n    this.mutationQueue = persistence.getMutationQueue(initialUser);\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n    this.localDocuments = new LocalDocumentsView(\n      this.remoteDocuments,\n      this.mutationQueue,\n      this.persistence.getIndexManager()\n    );\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n  }\n\n  collectGarbage(garbageCollector: LruGarbageCollector): Promise<LruResults> {\n    return this.persistence.runTransaction(\n      'Collect garbage',\n      'readwrite-primary',\n      txn => garbageCollector.collect(txn, this.targetDataByTarget)\n    );\n  }\n}\n\nexport function newLocalStore(\n  /** Manages our in-memory or durable persistence. */\n  persistence: Persistence,\n  queryEngine: QueryEngine,\n  initialUser: User\n): LocalStore {\n  return new LocalStoreImpl(persistence, queryEngine, initialUser);\n}\n\n/**\n * Tells the LocalStore that the currently authenticated user has changed.\n *\n * In response the local store switches the mutation queue to the new user and\n * returns any resulting document changes.\n */\n// PORTING NOTE: Android and iOS only return the documents affected by the\n// change.\nexport async function handleUserChange(\n  localStore: LocalStore,\n  user: User\n): Promise<UserChangeResult> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  let newMutationQueue = localStoreImpl.mutationQueue;\n  let newLocalDocuments = localStoreImpl.localDocuments;\n\n  const result = await localStoreImpl.persistence.runTransaction(\n    'Handle user change',\n    'readonly',\n    txn => {\n      // Swap out the mutation queue, grabbing the pending mutation batches\n      // before and after.\n      let oldBatches: MutationBatch[];\n      return localStoreImpl.mutationQueue\n        .getAllMutationBatches(txn)\n        .next(promisedOldBatches => {\n          oldBatches = promisedOldBatches;\n\n          newMutationQueue = localStoreImpl.persistence.getMutationQueue(user);\n\n          // Recreate our LocalDocumentsView using the new\n          // MutationQueue.\n          newLocalDocuments = new LocalDocumentsView(\n            localStoreImpl.remoteDocuments,\n            newMutationQueue,\n            localStoreImpl.persistence.getIndexManager()\n          );\n          return newMutationQueue.getAllMutationBatches(txn);\n        })\n        .next(newBatches => {\n          const removedBatchIds: BatchId[] = [];\n          const addedBatchIds: BatchId[] = [];\n\n          // Union the old/new changed keys.\n          let changedKeys = documentKeySet();\n\n          for (const batch of oldBatches) {\n            removedBatchIds.push(batch.batchId);\n            for (const mutation of batch.mutations) {\n              changedKeys = changedKeys.add(mutation.key);\n            }\n          }\n\n          for (const batch of newBatches) {\n            addedBatchIds.push(batch.batchId);\n            for (const mutation of batch.mutations) {\n              changedKeys = changedKeys.add(mutation.key);\n            }\n          }\n\n          // Return the set of all (potentially) changed documents and the list\n          // of mutation batch IDs that were affected by change.\n          return newLocalDocuments\n            .getDocuments(txn, changedKeys)\n            .next(affectedDocuments => {\n              return {\n                affectedDocuments,\n                removedBatchIds,\n                addedBatchIds\n              };\n            });\n        });\n    }\n  );\n\n  localStoreImpl.mutationQueue = newMutationQueue;\n  localStoreImpl.localDocuments = newLocalDocuments;\n  localStoreImpl.queryEngine.setLocalDocumentsView(\n    localStoreImpl.localDocuments\n  );\n\n  return result;\n}\n\n/* Accepts locally generated Mutations and commit them to storage. */\nexport function localWrite(\n  localStore: LocalStore,\n  mutations: Mutation[]\n): Promise<LocalWriteResult> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  const localWriteTime = Timestamp.now();\n  const keys = mutations.reduce((keys, m) => keys.add(m.key), documentKeySet());\n\n  let existingDocs: MaybeDocumentMap;\n\n  return localStoreImpl.persistence\n    .runTransaction('Locally write mutations', 'readwrite', txn => {\n      // Load and apply all existing mutations. This lets us compute the\n      // current base state for all non-idempotent transforms before applying\n      // any additional user-provided writes.\n      return localStoreImpl.localDocuments\n        .getDocuments(txn, keys)\n        .next(docs => {\n          existingDocs = docs;\n\n          // For non-idempotent mutations (such as `FieldValue.increment()`),\n          // we record the base state in a separate patch mutation. This is\n          // later used to guarantee consistent values and prevents flicker\n          // even if the backend sends us an update that already includes our\n          // transform.\n          const baseMutations: Mutation[] = [];\n\n          for (const mutation of mutations) {\n            const baseValue = extractMutationBaseValue(\n              mutation,\n              existingDocs.get(mutation.key)\n            );\n            if (baseValue != null) {\n              // NOTE: The base state should only be applied if there's some\n              // existing document to override, so use a Precondition of\n              // exists=true\n              baseMutations.push(\n                new PatchMutation(\n                  mutation.key,\n                  baseValue,\n                  extractFieldMask(baseValue.proto.mapValue!),\n                  Precondition.exists(true)\n                )\n              );\n            }\n          }\n\n          return localStoreImpl.mutationQueue.addMutationBatch(\n            txn,\n            localWriteTime,\n            baseMutations,\n            mutations\n          );\n        });\n    })\n    .then(batch => {\n      const changes = batch.applyToLocalDocumentSet(existingDocs);\n      return { batchId: batch.batchId, changes };\n    });\n}\n\n/**\n * Acknowledges the given batch.\n *\n * On the happy path when a batch is acknowledged, the local store will\n *\n *  + remove the batch from the mutation queue;\n *  + apply the changes to the remote document cache;\n *  + recalculate the latency compensated view implied by those changes (there\n *    may be mutations in the queue that affect the documents but haven't been\n *    acknowledged yet); and\n *  + give the changed documents back the sync engine\n *\n * @returns The resulting (modified) documents.\n */\nexport function acknowledgeBatch(\n  localStore: LocalStore,\n  batchResult: MutationBatchResult\n): Promise<MaybeDocumentMap> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  return localStoreImpl.persistence.runTransaction(\n    'Acknowledge batch',\n    'readwrite-primary',\n    txn => {\n      const affected = batchResult.batch.keys();\n      const documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\n        trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n      });\n      return applyWriteToRemoteDocuments(\n        localStoreImpl,\n        txn,\n        batchResult,\n        documentBuffer\n      )\n        .next(() => documentBuffer.apply(txn))\n        .next(() => localStoreImpl.mutationQueue.performConsistencyCheck(txn))\n        .next(() => localStoreImpl.localDocuments.getDocuments(txn, affected));\n    }\n  );\n}\n\n/**\n * Removes mutations from the MutationQueue for the specified batch;\n * LocalDocuments will be recalculated.\n *\n * @returns The resulting modified documents.\n */\nexport function rejectBatch(\n  localStore: LocalStore,\n  batchId: BatchId\n): Promise<MaybeDocumentMap> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  return localStoreImpl.persistence.runTransaction(\n    'Reject batch',\n    'readwrite-primary',\n    txn => {\n      let affectedKeys: DocumentKeySet;\n      return localStoreImpl.mutationQueue\n        .lookupMutationBatch(txn, batchId)\n        .next((batch: MutationBatch | null) => {\n          hardAssert(batch !== null, 'Attempt to reject nonexistent batch!');\n          affectedKeys = batch.keys();\n          return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);\n        })\n        .next(() => localStoreImpl.mutationQueue.performConsistencyCheck(txn))\n        .next(() =>\n          localStoreImpl.localDocuments.getDocuments(txn, affectedKeys)\n        );\n    }\n  );\n}\n\n/**\n * Returns the largest (latest) batch id in mutation queue that is pending\n * server response.\n *\n * Returns `BATCHID_UNKNOWN` if the queue is empty.\n */\nexport function getHighestUnacknowledgedBatchId(\n  localStore: LocalStore\n): Promise<BatchId> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  return localStoreImpl.persistence.runTransaction(\n    'Get highest unacknowledged batch id',\n    'readonly',\n    txn => localStoreImpl.mutationQueue.getHighestUnacknowledgedBatchId(txn)\n  );\n}\n\n/**\n * Returns the last consistent snapshot processed (used by the RemoteStore to\n * determine whether to buffer incoming snapshots from the backend).\n */\nexport function getLastRemoteSnapshotVersion(\n  localStore: LocalStore\n): Promise<SnapshotVersion> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  return localStoreImpl.persistence.runTransaction(\n    'Get last remote snapshot version',\n    'readonly',\n    txn => localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn)\n  );\n}\n\n/**\n * Updates the \"ground-state\" (remote) documents. We assume that the remote\n * event reflects any write batches that have been acknowledged or rejected\n * (i.e. we do not re-apply local mutations to updates from this event).\n *\n * LocalDocuments are re-calculated if there are remaining mutations in the\n * queue.\n */\nexport function applyRemoteEventToLocalCache(\n  localStore: LocalStore,\n  remoteEvent: RemoteEvent\n): Promise<MaybeDocumentMap> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  const remoteVersion = remoteEvent.snapshotVersion;\n  let newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\n\n  return localStoreImpl.persistence\n    .runTransaction('Apply remote event', 'readwrite-primary', txn => {\n      const documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\n        trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n      });\n\n      // Reset newTargetDataByTargetMap in case this transaction gets re-run.\n      newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\n\n      const promises = [] as Array<PersistencePromise<void>>;\n      remoteEvent.targetChanges.forEach((change, targetId) => {\n        const oldTargetData = newTargetDataByTargetMap.get(targetId);\n        if (!oldTargetData) {\n          return;\n        }\n\n        // Only update the remote keys if the target is still active. This\n        // ensures that we can persist the updated target data along with\n        // the updated assignment.\n        promises.push(\n          localStoreImpl.targetCache\n            .removeMatchingKeys(txn, change.removedDocuments, targetId)\n            .next(() => {\n              return localStoreImpl.targetCache.addMatchingKeys(\n                txn,\n                change.addedDocuments,\n                targetId\n              );\n            })\n        );\n\n        const resumeToken = change.resumeToken;\n        // Update the resume token if the change includes one.\n        if (resumeToken.approximateByteSize() > 0) {\n          const newTargetData = oldTargetData\n            .withResumeToken(resumeToken, remoteVersion)\n            .withSequenceNumber(txn.currentSequenceNumber);\n          newTargetDataByTargetMap = newTargetDataByTargetMap.insert(\n            targetId,\n            newTargetData\n          );\n\n          // Update the target data if there are target changes (or if\n          // sufficient time has passed since the last update).\n          if (shouldPersistTargetData(oldTargetData, newTargetData, change)) {\n            promises.push(\n              localStoreImpl.targetCache.updateTargetData(txn, newTargetData)\n            );\n          }\n        }\n      });\n\n      let changedDocs = maybeDocumentMap();\n      let updatedKeys = documentKeySet();\n      remoteEvent.documentUpdates.forEach((key, doc) => {\n        updatedKeys = updatedKeys.add(key);\n      });\n\n      // Each loop iteration only affects its \"own\" doc, so it's safe to get all the remote\n      // documents in advance in a single call.\n      promises.push(\n        documentBuffer.getEntries(txn, updatedKeys).next(existingDocs => {\n          remoteEvent.documentUpdates.forEach((key, doc) => {\n            const existingDoc = existingDocs.get(key);\n\n            // Note: The order of the steps below is important, since we want\n            // to ensure that rejected limbo resolutions (which fabricate\n            // NoDocuments with SnapshotVersion.min()) never add documents to\n            // cache.\n            if (\n              doc instanceof NoDocument &&\n              doc.version.isEqual(SnapshotVersion.min())\n            ) {\n              // NoDocuments with SnapshotVersion.min() are used in manufactured\n              // events. We remove these documents from cache since we lost\n              // access.\n              documentBuffer.removeEntry(key, remoteVersion);\n              changedDocs = changedDocs.insert(key, doc);\n            } else if (\n              existingDoc == null ||\n              doc.version.compareTo(existingDoc.version) > 0 ||\n              (doc.version.compareTo(existingDoc.version) === 0 &&\n                existingDoc.hasPendingWrites)\n            ) {\n              debugAssert(\n                !SnapshotVersion.min().isEqual(remoteVersion),\n                'Cannot add a document when the remote version is zero'\n              );\n              documentBuffer.addEntry(doc, remoteVersion);\n              changedDocs = changedDocs.insert(key, doc);\n            } else {\n              logDebug(\n                LOG_TAG,\n                'Ignoring outdated watch update for ',\n                key,\n                '. Current version:',\n                existingDoc.version,\n                ' Watch version:',\n                doc.version\n              );\n            }\n\n            if (remoteEvent.resolvedLimboDocuments.has(key)) {\n              promises.push(\n                localStoreImpl.persistence.referenceDelegate.updateLimboDocument(\n                  txn,\n                  key\n                )\n              );\n            }\n          });\n        })\n      );\n\n      // HACK: The only reason we allow a null snapshot version is so that we\n      // can synthesize remote events when we get permission denied errors while\n      // trying to resolve the state of a locally cached document that is in\n      // limbo.\n      if (!remoteVersion.isEqual(SnapshotVersion.min())) {\n        const updateRemoteVersion = localStoreImpl.targetCache\n          .getLastRemoteSnapshotVersion(txn)\n          .next(lastRemoteSnapshotVersion => {\n            debugAssert(\n              remoteVersion.compareTo(lastRemoteSnapshotVersion) >= 0,\n              'Watch stream reverted to previous snapshot?? ' +\n                remoteVersion +\n                ' < ' +\n                lastRemoteSnapshotVersion\n            );\n            return localStoreImpl.targetCache.setTargetsMetadata(\n              txn,\n              txn.currentSequenceNumber,\n              remoteVersion\n            );\n          });\n        promises.push(updateRemoteVersion);\n      }\n\n      return PersistencePromise.waitFor(promises)\n        .next(() => documentBuffer.apply(txn))\n        .next(() => {\n          return localStoreImpl.localDocuments.getLocalViewOfDocuments(\n            txn,\n            changedDocs\n          );\n        });\n    })\n    .then(changedDocs => {\n      localStoreImpl.targetDataByTarget = newTargetDataByTargetMap;\n      return changedDocs;\n    });\n}\n\n/**\n * Returns true if the newTargetData should be persisted during an update of\n * an active target. TargetData should always be persisted when a target is\n * being released and should not call this function.\n *\n * While the target is active, TargetData updates can be omitted when nothing\n * about the target has changed except metadata like the resume token or\n * snapshot version. Occasionally it's worth the extra write to prevent these\n * values from getting too stale after a crash, but this doesn't have to be\n * too frequent.\n */\nfunction shouldPersistTargetData(\n  oldTargetData: TargetData,\n  newTargetData: TargetData,\n  change: TargetChange\n): boolean {\n  hardAssert(\n    newTargetData.resumeToken.approximateByteSize() > 0,\n    'Attempted to persist target data with no resume token'\n  );\n\n  // Always persist target data if we don't already have a resume token.\n  if (oldTargetData.resumeToken.approximateByteSize() === 0) {\n    return true;\n  }\n\n  // Don't allow resume token changes to be buffered indefinitely. This\n  // allows us to be reasonably up-to-date after a crash and avoids needing\n  // to loop over all active queries on shutdown. Especially in the browser\n  // we may not get time to do anything interesting while the current tab is\n  // closing.\n  const timeDelta =\n    newTargetData.snapshotVersion.toMicroseconds() -\n    oldTargetData.snapshotVersion.toMicroseconds();\n  if (timeDelta >= RESUME_TOKEN_MAX_AGE_MICROS) {\n    return true;\n  }\n\n  // Otherwise if the only thing that has changed about a target is its resume\n  // token it's not worth persisting. Note that the RemoteStore keeps an\n  // in-memory view of the currently active targets which includes the current\n  // resume token, so stream failure or user changes will still use an\n  // up-to-date resume token regardless of what we do here.\n  const changes =\n    change.addedDocuments.size +\n    change.modifiedDocuments.size +\n    change.removedDocuments.size;\n  return changes > 0;\n}\n\n/**\n * Notifies local store of the changed views to locally pin documents.\n */\nexport async function notifyLocalViewChanges(\n  localStore: LocalStore,\n  viewChanges: LocalViewChanges[]\n): Promise<void> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  try {\n    await localStoreImpl.persistence.runTransaction(\n      'notifyLocalViewChanges',\n      'readwrite',\n      txn => {\n        return PersistencePromise.forEach(\n          viewChanges,\n          (viewChange: LocalViewChanges) => {\n            return PersistencePromise.forEach(\n              viewChange.addedKeys,\n              (key: DocumentKey) =>\n                localStoreImpl.persistence.referenceDelegate.addReference(\n                  txn,\n                  viewChange.targetId,\n                  key\n                )\n            ).next(() =>\n              PersistencePromise.forEach(\n                viewChange.removedKeys,\n                (key: DocumentKey) =>\n                  localStoreImpl.persistence.referenceDelegate.removeReference(\n                    txn,\n                    viewChange.targetId,\n                    key\n                  )\n              )\n            );\n          }\n        );\n      }\n    );\n  } catch (e) {\n    if (isIndexedDbTransactionError(e)) {\n      // If `notifyLocalViewChanges` fails, we did not advance the sequence\n      // number for the documents that were included in this transaction.\n      // This might trigger them to be deleted earlier than they otherwise\n      // would have, but it should not invalidate the integrity of the data.\n      logDebug(LOG_TAG, 'Failed to update sequence numbers: ' + e);\n    } else {\n      throw e;\n    }\n  }\n\n  for (const viewChange of viewChanges) {\n    const targetId = viewChange.targetId;\n\n    if (!viewChange.fromCache) {\n      const targetData = localStoreImpl.targetDataByTarget.get(targetId);\n      debugAssert(\n        targetData !== null,\n        `Can't set limbo-free snapshot version for unknown target: ${targetId}`\n      );\n\n      // Advance the last limbo free snapshot version\n      const lastLimboFreeSnapshotVersion = targetData.snapshotVersion;\n      const updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(\n        lastLimboFreeSnapshotVersion\n      );\n      localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(\n        targetId,\n        updatedTargetData\n      );\n    }\n  }\n}\n\n/**\n * Gets the mutation batch after the passed in batchId in the mutation queue\n * or null if empty.\n * @param afterBatchId If provided, the batch to search after.\n * @returns The next mutation or null if there wasn't one.\n */\nexport function nextMutationBatch(\n  localStore: LocalStore,\n  afterBatchId?: BatchId\n): Promise<MutationBatch | null> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  return localStoreImpl.persistence.runTransaction(\n    'Get next mutation batch',\n    'readonly',\n    txn => {\n      if (afterBatchId === undefined) {\n        afterBatchId = BATCHID_UNKNOWN;\n      }\n      return localStoreImpl.mutationQueue.getNextMutationBatchAfterBatchId(\n        txn,\n        afterBatchId\n      );\n    }\n  );\n}\n\n/**\n * Reads the current value of a Document with a given key or null if not\n * found - used for testing.\n */\nexport function readLocalDocument(\n  localStore: LocalStore,\n  key: DocumentKey\n): Promise<MaybeDocument | null> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  return localStoreImpl.persistence.runTransaction(\n    'read document',\n    'readonly',\n    txn => localStoreImpl.localDocuments.getDocument(txn, key)\n  );\n}\n\n/**\n * Assigns the given target an internal ID so that its results can be pinned so\n * they don't get GC'd. A target must be allocated in the local store before\n * the store can be used to manage its view.\n *\n * Allocating an already allocated `Target` will return the existing `TargetData`\n * for that `Target`.\n */\nexport function allocateTarget(\n  localStore: LocalStore,\n  target: Target\n): Promise<TargetData> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  return localStoreImpl.persistence\n    .runTransaction('Allocate target', 'readwrite', txn => {\n      let targetData: TargetData;\n      return localStoreImpl.targetCache\n        .getTargetData(txn, target)\n        .next((cached: TargetData | null) => {\n          if (cached) {\n            // This target has been listened to previously, so reuse the\n            // previous targetID.\n            // TODO(mcg): freshen last accessed date?\n            targetData = cached;\n            return PersistencePromise.resolve(targetData);\n          } else {\n            return localStoreImpl.targetCache\n              .allocateTargetId(txn)\n              .next(targetId => {\n                targetData = new TargetData(\n                  target,\n                  targetId,\n                  TargetPurpose.Listen,\n                  txn.currentSequenceNumber\n                );\n                return localStoreImpl.targetCache\n                  .addTargetData(txn, targetData)\n                  .next(() => targetData);\n              });\n          }\n        });\n    })\n    .then(targetData => {\n      // If Multi-Tab is enabled, the existing target data may be newer than\n      // the in-memory data\n      const cachedTargetData = localStoreImpl.targetDataByTarget.get(\n        targetData.targetId\n      );\n      if (\n        cachedTargetData === null ||\n        targetData.snapshotVersion.compareTo(cachedTargetData.snapshotVersion) >\n          0\n      ) {\n        localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(\n          targetData.targetId,\n          targetData\n        );\n        localStoreImpl.targetIdByTarget.set(target, targetData.targetId);\n      }\n      return targetData;\n    });\n}\n\n/**\n * Returns the TargetData as seen by the LocalStore, including updates that may\n * have not yet been persisted to the TargetCache.\n */\n// Visible for testing.\nexport function getLocalTargetData(\n  localStore: LocalStore,\n  transaction: PersistenceTransaction,\n  target: Target\n): PersistencePromise<TargetData | null> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  const targetId = localStoreImpl.targetIdByTarget.get(target);\n  if (targetId !== undefined) {\n    return PersistencePromise.resolve<TargetData | null>(\n      localStoreImpl.targetDataByTarget.get(targetId)\n    );\n  } else {\n    return localStoreImpl.targetCache.getTargetData(transaction, target);\n  }\n}\n\n/**\n * Unpins all the documents associated with the given target. If\n * `keepPersistedTargetData` is set to false and Eager GC enabled, the method\n * directly removes the associated target data from the target cache.\n *\n * Releasing a non-existing `Target` is a no-op.\n */\n// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.\nexport async function releaseTarget(\n  localStore: LocalStore,\n  targetId: number,\n  keepPersistedTargetData: boolean\n): Promise<void> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  const targetData = localStoreImpl.targetDataByTarget.get(targetId);\n  debugAssert(\n    targetData !== null,\n    `Tried to release nonexistent target: ${targetId}`\n  );\n\n  const mode = keepPersistedTargetData ? 'readwrite' : 'readwrite-primary';\n\n  try {\n    if (!keepPersistedTargetData) {\n      await localStoreImpl.persistence.runTransaction(\n        'Release target',\n        mode,\n        txn => {\n          return localStoreImpl.persistence.referenceDelegate.removeTarget(\n            txn,\n            targetData!\n          );\n        }\n      );\n    }\n  } catch (e) {\n    if (isIndexedDbTransactionError(e)) {\n      // All `releaseTarget` does is record the final metadata state for the\n      // target, but we've been recording this periodically during target\n      // activity. If we lose this write this could cause a very slight\n      // difference in the order of target deletion during GC, but we\n      // don't define exact LRU semantics so this is acceptable.\n      logDebug(\n        LOG_TAG,\n        `Failed to update sequence numbers for target ${targetId}: ${e}`\n      );\n    } else {\n      throw e;\n    }\n  }\n\n  localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.remove(\n    targetId\n  );\n  localStoreImpl.targetIdByTarget.delete(targetData!.target);\n}\n\n/**\n * Runs the specified query against the local store and returns the results,\n * potentially taking advantage of query data from previous executions (such\n * as the set of remote keys).\n *\n * @param usePreviousResults Whether results from previous executions can\n * be used to optimize this query execution.\n */\nexport function executeQuery(\n  localStore: LocalStore,\n  query: Query,\n  usePreviousResults: boolean\n): Promise<QueryResult> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  let lastLimboFreeSnapshotVersion = SnapshotVersion.min();\n  let remoteKeys = documentKeySet();\n\n  return localStoreImpl.persistence.runTransaction(\n    'Execute query',\n    'readonly',\n    txn => {\n      return getLocalTargetData(localStoreImpl, txn, queryToTarget(query))\n        .next(targetData => {\n          if (targetData) {\n            lastLimboFreeSnapshotVersion =\n              targetData.lastLimboFreeSnapshotVersion;\n            return localStoreImpl.targetCache\n              .getMatchingKeysForTargetId(txn, targetData.targetId)\n              .next(result => {\n                remoteKeys = result;\n              });\n          }\n        })\n        .next(() =>\n          localStoreImpl.queryEngine.getDocumentsMatchingQuery(\n            txn,\n            query,\n            usePreviousResults\n              ? lastLimboFreeSnapshotVersion\n              : SnapshotVersion.min(),\n            usePreviousResults ? remoteKeys : documentKeySet()\n          )\n        )\n        .next(documents => {\n          return { documents, remoteKeys };\n        });\n    }\n  );\n}\n\nfunction applyWriteToRemoteDocuments(\n  localStoreImpl: LocalStoreImpl,\n  txn: PersistenceTransaction,\n  batchResult: MutationBatchResult,\n  documentBuffer: RemoteDocumentChangeBuffer\n): PersistencePromise<void> {\n  const batch = batchResult.batch;\n  const docKeys = batch.keys();\n  let promiseChain = PersistencePromise.resolve();\n  docKeys.forEach(docKey => {\n    promiseChain = promiseChain\n      .next(() => {\n        return documentBuffer.getEntry(txn, docKey);\n      })\n      .next((remoteDoc: MaybeDocument | null) => {\n        let doc = remoteDoc;\n        const ackVersion = batchResult.docVersions.get(docKey);\n        hardAssert(\n          ackVersion !== null,\n          'ackVersions should contain every doc in the write.'\n        );\n        if (!doc || doc.version.compareTo(ackVersion!) < 0) {\n          doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n          if (!doc) {\n            debugAssert(\n              !remoteDoc,\n              'Mutation batch ' +\n                batch +\n                ' applied to document ' +\n                remoteDoc +\n                ' resulted in null'\n            );\n          } else {\n            // We use the commitVersion as the readTime rather than the\n            // document's updateTime since the updateTime is not advanced\n            // for updates that do not modify the underlying document.\n            documentBuffer.addEntry(doc, batchResult.commitVersion);\n          }\n        }\n      });\n  });\n  return promiseChain.next(() =>\n    localStoreImpl.mutationQueue.removeMutationBatch(txn, batch)\n  );\n}\n\n/** Returns the local view of the documents affected by a mutation batch. */\n// PORTING NOTE: Multi-Tab only.\nexport function lookupMutationDocuments(\n  localStore: LocalStore,\n  batchId: BatchId\n): Promise<MaybeDocumentMap | null> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  const mutationQueueImpl = debugCast(\n    localStoreImpl.mutationQueue,\n    IndexedDbMutationQueue // We only support IndexedDb in multi-tab mode.\n  );\n  return localStoreImpl.persistence.runTransaction(\n    'Lookup mutation documents',\n    'readonly',\n    txn => {\n      return mutationQueueImpl.lookupMutationKeys(txn, batchId).next(keys => {\n        if (keys) {\n          return localStoreImpl.localDocuments.getDocuments(\n            txn,\n            keys\n          ) as PersistencePromise<MaybeDocumentMap | null>;\n        } else {\n          return PersistencePromise.resolve<MaybeDocumentMap | null>(null);\n        }\n      });\n    }\n  );\n}\n\n// PORTING NOTE: Multi-Tab only.\nexport function removeCachedMutationBatchMetadata(\n  localStore: LocalStore,\n  batchId: BatchId\n): void {\n  const mutationQueueImpl = debugCast(\n    debugCast(localStore, LocalStoreImpl).mutationQueue,\n    IndexedDbMutationQueue // We only support IndexedDb in multi-tab mode.\n  );\n  mutationQueueImpl.removeCachedMutationKeys(batchId);\n}\n\n// PORTING NOTE: Multi-Tab only.\nexport function getActiveClientsFromPersistence(\n  localStore: LocalStore\n): Promise<ClientId[]> {\n  const persistenceImpl = debugCast(\n    debugCast(localStore, LocalStoreImpl).persistence,\n    IndexedDbPersistence // We only support IndexedDb in multi-tab mode.\n  );\n  return persistenceImpl.getActiveClients();\n}\n\n// PORTING NOTE: Multi-Tab only.\nexport function getCachedTarget(\n  localStore: LocalStore,\n  targetId: TargetId\n): Promise<Target | null> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  const targetCacheImpl = debugCast(\n    localStoreImpl.targetCache,\n    IndexedDbTargetCache // We only support IndexedDb in multi-tab mode.\n  );\n  const cachedTargetData = localStoreImpl.targetDataByTarget.get(targetId);\n  if (cachedTargetData) {\n    return Promise.resolve(cachedTargetData.target);\n  } else {\n    return localStoreImpl.persistence.runTransaction(\n      'Get target data',\n      'readonly',\n      txn => {\n        return targetCacheImpl\n          .getTargetDataForTarget(txn, targetId)\n          .next(targetData => (targetData ? targetData.target : null));\n      }\n    );\n  }\n}\n\n/**\n * Returns the set of documents that have been updated since the last call.\n * If this is the first call, returns the set of changes since client\n * initialization. Further invocations will return document that have changed\n * since the prior call.\n */\n// PORTING NOTE: Multi-Tab only.\nexport function getNewDocumentChanges(\n  localStore: LocalStore\n): Promise<MaybeDocumentMap> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  return localStoreImpl.persistence\n    .runTransaction('Get new document changes', 'readonly', txn =>\n      remoteDocumentCacheGetNewDocumentChanges(\n        localStoreImpl.remoteDocuments,\n        txn,\n        localStoreImpl.lastDocumentChangeReadTime\n      )\n    )\n    .then(({ changedDocs, readTime }) => {\n      localStoreImpl.lastDocumentChangeReadTime = readTime;\n      return changedDocs;\n    });\n}\n\n/**\n * Reads the newest document change from persistence and moves the internal\n * synchronization marker forward so that calls to `getNewDocumentChanges()`\n * only return changes that happened after client initialization.\n */\n// PORTING NOTE: Multi-Tab only.\nexport async function synchronizeLastDocumentChangeReadTime(\n  localStore: LocalStore\n): Promise<void> {\n  const localStoreImpl = debugCast(localStore, LocalStoreImpl);\n  return localStoreImpl.persistence\n    .runTransaction(\n      'Synchronize last document change read time',\n      'readonly',\n      txn => remoteDocumentCacheGetLastReadTime(txn)\n    )\n    .then(readTime => {\n      localStoreImpl.lastDocumentChangeReadTime = readTime;\n    });\n}\n\n/**\n * Verifies the error thrown by a LocalStore operation. If a LocalStore\n * operation fails because the primary lease has been taken by another client,\n * we ignore the error (the persistence layer will immediately call\n * `applyPrimaryLease` to propagate the primary state change). All other errors\n * are re-thrown.\n *\n * @param err An error returned by a LocalStore operation.\n * @return A Promise that resolves after we recovered, or the original error.\n */\nexport async function ignoreIfPrimaryLeaseLoss(\n  err: FirestoreError\n): Promise<void> {\n  if (\n    err.code === Code.FAILED_PRECONDITION &&\n    err.message === PRIMARY_LEASE_LOST_ERROR_MSG\n  ) {\n    logDebug(LOG_TAG, 'Unexpectedly lost primary lease');\n  } else {\n    throw err;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider, Token } from '../api/credentials';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { TargetData } from '../local/target_data';\nimport { Mutation, MutationResult } from '../model/mutation';\nimport {\n  ListenRequest as ProtoListenRequest,\n  ListenResponse as ProtoListenResponse,\n  WriteRequest as ProtoWriteRequest,\n  WriteResponse as ProtoWriteResponse\n} from '../protos/firestore_proto_api';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\n\nimport { isNullOrUndefined } from '../util/types';\nimport { ExponentialBackoff } from './backoff';\nimport { Connection, Stream } from './connection';\nimport {\n  fromVersion,\n  fromWatchChange,\n  fromWriteResults,\n  getEncodedDatabaseId,\n  JsonProtoSerializer,\n  toListenRequestLabels,\n  toMutation,\n  toTarget,\n  versionFromListenResponse\n} from './serializer';\nimport { WatchChange } from './watch_change';\n\nconst LOG_TAG = 'PersistentStream';\n\n// The generated proto interfaces for these class are missing the database\n// field. So we add it here.\n// TODO(b/36015800): Remove this once the api generator is fixed.\ninterface ListenRequest extends ProtoListenRequest {\n  database?: string;\n}\nexport interface WriteRequest extends ProtoWriteRequest {\n  database?: string;\n}\n/**\n * PersistentStream can be in one of 5 states (each described in detail below)\n * based on the following state transition diagram:\n *\n *          start() called             auth & connection succeeded\n * INITIAL ----------------> STARTING -----------------------------> OPEN\n *                             ^  |                                   |\n *                             |  |                    error occurred |\n *                             |  \\-----------------------------v-----/\n *                             |                                |\n *                    backoff  |                                |\n *                    elapsed  |              start() called    |\n *                             \\--- BACKOFF <---------------- ERROR\n *\n * [any state] --------------------------> INITIAL\n *               stop() called or\n *               idle timer expired\n */\nconst enum PersistentStreamState {\n  /**\n   * The streaming RPC is not yet running and there's no error condition.\n   * Calling start() will start the stream immediately without backoff.\n   * While in this state isStarted() will return false.\n   */\n  Initial,\n\n  /**\n   * The stream is starting, either waiting for an auth token or for the stream\n   * to successfully open. While in this state, isStarted() will return true but\n   * isOpen() will return false.\n   */\n  Starting,\n\n  /**\n   * The streaming RPC is up and running. Requests and responses can flow\n   * freely. Both isStarted() and isOpen() will return true.\n   */\n  Open,\n\n  /**\n   * The stream encountered an error. The next start attempt will back off.\n   * While in this state isStarted() will return false.\n   */\n  Error,\n\n  /**\n   * An in-between state after an error where the stream is waiting before\n   * re-starting. After waiting is complete, the stream will try to open.\n   * While in this state isStarted() will return true but isOpen() will return\n   * false.\n   */\n  Backoff\n}\n\n/**\n * Provides a common interface that is shared by the listeners for stream\n * events by the concrete implementation classes.\n */\nexport interface PersistentStreamListener {\n  /**\n   * Called after the stream was established and can accept outgoing\n   * messages\n   */\n  onOpen: () => Promise<void>;\n  /**\n   * Called after the stream has closed. If there was an error, the\n   * FirestoreError will be set.\n   */\n  onClose: (err?: FirestoreError) => Promise<void>;\n}\n\n/** The time a stream stays open after it is marked idle. */\nconst IDLE_TIMEOUT_MS = 60 * 1000;\n\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *   - Closing idle streams after 60 seconds of inactivity\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be start()ed before messages can\n * be sent and received. The PersistentStream will call the onOpen() function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a start() fail, PersistentStream will call the registered onClose()\n * listener with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nexport abstract class PersistentStream<\n  SendType,\n  ReceiveType,\n  ListenerType extends PersistentStreamListener\n> {\n  private state = PersistentStreamState.Initial;\n  /**\n   * A close count that's incremented every time the stream is closed; used by\n   * getCloseGuardedDispatcher() to invalidate callbacks that happen after\n   * close.\n   */\n  private closeCount = 0;\n\n  private idleTimer: DelayedOperation<void> | null = null;\n  private stream: Stream<SendType, ReceiveType> | null = null;\n\n  protected backoff: ExponentialBackoff;\n\n  constructor(\n    private queue: AsyncQueue,\n    connectionTimerId: TimerId,\n    private idleTimerId: TimerId,\n    protected connection: Connection,\n    private credentialsProvider: CredentialsProvider,\n    protected listener: ListenerType\n  ) {\n    this.backoff = new ExponentialBackoff(queue, connectionTimerId);\n  }\n\n  /**\n   * Returns true if start() has been called and no error has occurred. True\n   * indicates the stream is open or in the process of opening (which\n   * encompasses respecting backoff, getting auth tokens, and starting the\n   * actual RPC). Use isOpen() to determine if the stream is open and ready for\n   * outbound requests.\n   */\n  isStarted(): boolean {\n    return (\n      this.state === PersistentStreamState.Starting ||\n      this.state === PersistentStreamState.Open ||\n      this.state === PersistentStreamState.Backoff\n    );\n  }\n\n  /**\n   * Returns true if the underlying RPC is open (the onOpen() listener has been\n   * called) and the stream is ready for outbound requests.\n   */\n  isOpen(): boolean {\n    return this.state === PersistentStreamState.Open;\n  }\n\n  /**\n   * Starts the RPC. Only allowed if isStarted() returns false. The stream is\n   * not immediately ready for use: onOpen() will be invoked when the RPC is\n   * ready for outbound requests, at which point isOpen() will return true.\n   *\n   * When start returns, isStarted() will return true.\n   */\n  start(): void {\n    if (this.state === PersistentStreamState.Error) {\n      this.performBackoff();\n      return;\n    }\n\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Already started'\n    );\n    this.auth();\n  }\n\n  /**\n   * Stops the RPC. This call is idempotent and allowed regardless of the\n   * current isStarted() state.\n   *\n   * When stop returns, isStarted() and isOpen() will both return false.\n   */\n  async stop(): Promise<void> {\n    if (this.isStarted()) {\n      await this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /**\n   * After an error the stream will usually back off on the next attempt to\n   * start it. If the error warrants an immediate restart of the stream, the\n   * sender can use this to indicate that the receiver should not back off.\n   *\n   * Each error will call the onClose() listener. That function can decide to\n   * inhibit backoff if required.\n   */\n  inhibitBackoff(): void {\n    debugAssert(\n      !this.isStarted(),\n      'Can only inhibit backoff in a stopped state'\n    );\n\n    this.state = PersistentStreamState.Initial;\n    this.backoff.reset();\n  }\n\n  /**\n   * Marks this stream as idle. If no further actions are performed on the\n   * stream for one minute, the stream will automatically close itself and\n   * notify the stream's onClose() handler with Status.OK. The stream will then\n   * be in a !isStarted() state, requiring the caller to start the stream again\n   * before further use.\n   *\n   * Only streams that are in state 'Open' can be marked idle, as all other\n   * states imply pending network operations.\n   */\n  markIdle(): void {\n    // Starts the idle time if we are in state 'Open' and are not yet already\n    // running a timer (in which case the previous idle timeout still applies).\n    if (this.isOpen() && this.idleTimer === null) {\n      this.idleTimer = this.queue.enqueueAfterDelay(\n        this.idleTimerId,\n        IDLE_TIMEOUT_MS,\n        () => this.handleIdleCloseTimer()\n      );\n    }\n  }\n\n  /** Sends a message to the underlying stream. */\n  protected sendRequest(msg: SendType): void {\n    this.cancelIdleCheck();\n    this.stream!.send(msg);\n  }\n\n  /** Called by the idle timer when the stream should close due to inactivity. */\n  private async handleIdleCloseTimer(): Promise<void> {\n    if (this.isOpen()) {\n      // When timing out an idle stream there's no reason to force the stream into backoff when\n      // it restarts so set the stream state to Initial instead of Error.\n      return this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /** Marks the stream as active again. */\n  private cancelIdleCheck(): void {\n    if (this.idleTimer) {\n      this.idleTimer.cancel();\n      this.idleTimer = null;\n    }\n  }\n\n  /**\n   * Closes the stream and cleans up as necessary:\n   *\n   * * closes the underlying GRPC stream;\n   * * calls the onClose handler with the given 'error';\n   * * sets internal stream state to 'finalState';\n   * * adjusts the backoff timer based on the error\n   *\n   * A new stream can be opened by calling start().\n   *\n   * @param finalState the intended state of the stream after closing.\n   * @param error the error the connection was closed with.\n   */\n  private async close(\n    finalState: PersistentStreamState,\n    error?: FirestoreError\n  ): Promise<void> {\n    debugAssert(this.isStarted(), 'Only started streams should be closed.');\n    debugAssert(\n      finalState === PersistentStreamState.Error || isNullOrUndefined(error),\n      \"Can't provide an error when not in an error state.\"\n    );\n\n    // Cancel any outstanding timers (they're guaranteed not to execute).\n    this.cancelIdleCheck();\n    this.backoff.cancel();\n\n    // Invalidates any stream-related callbacks (e.g. from auth or the\n    // underlying stream), guaranteeing they won't execute.\n    this.closeCount++;\n\n    if (finalState !== PersistentStreamState.Error) {\n      // If this is an intentional close ensure we don't delay our next connection attempt.\n      this.backoff.reset();\n    } else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n      logError(error.toString());\n      logError(\n        'Using maximum backoff delay to prevent overloading the backend.'\n      );\n      this.backoff.resetToMax();\n    } else if (error && error.code === Code.UNAUTHENTICATED) {\n      // \"unauthenticated\" error means the token was rejected. Try force refreshing it in case it\n      // just expired.\n      this.credentialsProvider.invalidateToken();\n    }\n\n    // Clean up the underlying stream because we are no longer interested in events.\n    if (this.stream !== null) {\n      this.tearDown();\n      this.stream.close();\n      this.stream = null;\n    }\n\n    // This state must be assigned before calling onClose() to allow the callback to\n    // inhibit backoff or otherwise manipulate the state in its non-started state.\n    this.state = finalState;\n\n    // Notify the listener that the stream closed.\n    await this.listener.onClose(error);\n  }\n\n  /**\n   * Can be overridden to perform additional cleanup before the stream is closed.\n   * Calling super.tearDown() is not required.\n   */\n  protected tearDown(): void {}\n\n  /**\n   * Used by subclasses to start the concrete RPC and return the underlying\n   * connection stream.\n   */\n  protected abstract startRpc(\n    token: Token | null\n  ): Stream<SendType, ReceiveType>;\n\n  /**\n   * Called after the stream has received a message. The function will be\n   * called on the right queue and must return a Promise.\n   * @param message The message received from the stream.\n   */\n  protected abstract onMessage(message: ReceiveType): Promise<void>;\n\n  private auth(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Must be in initial state to auth'\n    );\n\n    this.state = PersistentStreamState.Starting;\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.\n    const closeCount = this.closeCount;\n\n    this.credentialsProvider.getToken().then(\n      token => {\n        // Stream can be stopped while waiting for authentication.\n        // TODO(mikelehen): We really should just use dispatchIfNotClosed\n        // and let this dispatch onto the queue, but that opened a spec test can\n        // of worms that I don't want to deal with in this PR.\n        if (this.closeCount === closeCount) {\n          // Normally we'd have to schedule the callback on the AsyncQueue.\n          // However, the following calls are safe to be called outside the\n          // AsyncQueue since they don't chain asynchronous calls\n          this.startStream(token);\n        }\n      },\n      (error: Error) => {\n        dispatchIfNotClosed(() => {\n          const rpcError = new FirestoreError(\n            Code.UNKNOWN,\n            'Fetching auth token failed: ' + error.message\n          );\n          return this.handleStreamClose(rpcError);\n        });\n      }\n    );\n  }\n\n  private startStream(token: Token | null): void {\n    debugAssert(\n      this.state === PersistentStreamState.Starting,\n      'Trying to start stream in a non-starting state'\n    );\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    this.stream = this.startRpc(token);\n    this.stream.onOpen(() => {\n      dispatchIfNotClosed(() => {\n        debugAssert(\n          this.state === PersistentStreamState.Starting,\n          'Expected stream to be in state Starting, but was ' + this.state\n        );\n        this.state = PersistentStreamState.Open;\n        return this.listener!.onOpen();\n      });\n    });\n    this.stream.onClose((error?: FirestoreError) => {\n      dispatchIfNotClosed(() => {\n        return this.handleStreamClose(error);\n      });\n    });\n    this.stream.onMessage((msg: ReceiveType) => {\n      dispatchIfNotClosed(() => {\n        return this.onMessage(msg);\n      });\n    });\n  }\n\n  private performBackoff(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Error,\n      'Should only perform backoff when in Error state'\n    );\n    this.state = PersistentStreamState.Backoff;\n\n    this.backoff.backoffAndRun(async () => {\n      debugAssert(\n        this.state === PersistentStreamState.Backoff,\n        'Backoff elapsed but state is now: ' + this.state\n      );\n\n      this.state = PersistentStreamState.Initial;\n      this.start();\n      debugAssert(this.isStarted(), 'PersistentStream should have started');\n    });\n  }\n\n  // Visible for tests\n  handleStreamClose(error?: FirestoreError): Promise<void> {\n    debugAssert(\n      this.isStarted(),\n      \"Can't handle server close on non-started stream\"\n    );\n    logDebug(LOG_TAG, `close with error: ${error}`);\n\n    this.stream = null;\n\n    // In theory the stream could close cleanly, however, in our current model\n    // we never expect this to happen because if we stop a stream ourselves,\n    // this callback will never be called. To prevent cases where we retry\n    // without a backoff accidentally, we set the stream to error in all cases.\n    return this.close(PersistentStreamState.Error, error);\n  }\n\n  /**\n   * Returns a \"dispatcher\" function that dispatches operations onto the\n   * AsyncQueue but only runs them if closeCount remains unchanged. This allows\n   * us to turn auth / stream callbacks into no-ops if the stream is closed /\n   * re-opened, etc.\n   */\n  private getCloseGuardedDispatcher(\n    startCloseCount: number\n  ): (fn: () => Promise<void>) => void {\n    return (fn: () => Promise<void>): void => {\n      this.queue.enqueueAndForget(() => {\n        if (this.closeCount === startCloseCount) {\n          return fn();\n        } else {\n          logDebug(\n            LOG_TAG,\n            'stream callback skipped by getCloseGuardedDispatcher.'\n          );\n          return Promise.resolve();\n        }\n      });\n    };\n  }\n}\n\n/** Listener for the PersistentWatchStream */\nexport interface WatchStreamListener extends PersistentStreamListener {\n  /**\n   * Called on a watchChange. The snapshot parameter will be MIN if the watch\n   * change did not have a snapshot associated with it.\n   */\n  onWatchChange: (\n    watchChange: WatchChange,\n    snapshot: SnapshotVersion\n  ) => Promise<void>;\n}\n\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the onOpen() listener, any number of\n * listen() and unlisten() calls can be made to control what changes will be\n * sent from the server for ListenResponses.\n */\nexport class PersistentListenStream extends PersistentStream<\n  ProtoListenRequest,\n  ProtoListenResponse,\n  WatchStreamListener\n> {\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WatchStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.ListenStreamConnectionBackoff,\n      TimerId.ListenStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<ProtoListenRequest, ProtoListenResponse> {\n    return this.connection.openStream<ProtoListenRequest, ProtoListenResponse>(\n      'Listen',\n      token\n    );\n  }\n\n  protected onMessage(watchChangeProto: ProtoListenResponse): Promise<void> {\n    // A successful response means the stream is healthy\n    this.backoff.reset();\n\n    const watchChange = fromWatchChange(this.serializer, watchChangeProto);\n    const snapshot = versionFromListenResponse(watchChangeProto);\n    return this.listener!.onWatchChange(watchChange, snapshot);\n  }\n\n  /**\n   * Registers interest in the results of the given target. If the target\n   * includes a resumeToken it will be included in the request. Results that\n   * affect the target will be streamed back as WatchChange messages that\n   * reference the targetId.\n   */\n  watch(targetData: TargetData): void {\n    const request: ListenRequest = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.addTarget = toTarget(this.serializer, targetData);\n\n    const labels = toListenRequestLabels(this.serializer, targetData);\n    if (labels) {\n      request.labels = labels;\n    }\n\n    this.sendRequest(request);\n  }\n\n  /**\n   * Unregisters interest in the results of the target associated with the\n   * given targetId.\n   */\n  unwatch(targetId: TargetId): void {\n    const request: ListenRequest = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.removeTarget = targetId;\n    this.sendRequest(request);\n  }\n}\n\n/** Listener for the PersistentWriteStream */\nexport interface WriteStreamListener extends PersistentStreamListener {\n  /**\n   * Called by the PersistentWriteStream upon a successful handshake response\n   * from the server, which is the receiver's cue to send any pending writes.\n   */\n  onHandshakeComplete: () => Promise<void>;\n\n  /**\n   * Called by the PersistentWriteStream upon receiving a StreamingWriteResponse\n   * from the server that contains a mutation result.\n   */\n  onMutationResult: (\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ) => Promise<void>;\n}\n\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nexport class PersistentWriteStream extends PersistentStream<\n  ProtoWriteRequest,\n  ProtoWriteResponse,\n  WriteStreamListener\n> {\n  private handshakeComplete_ = false;\n\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WriteStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.WriteStreamConnectionBackoff,\n      TimerId.WriteStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  /**\n   * The last received stream token from the server, used to acknowledge which\n   * responses the client has processed. Stream tokens are opaque checkpoint\n   * markers whose only real value is their inclusion in the next request.\n   *\n   * PersistentWriteStream manages propagating this value from responses to the\n   * next request.\n   */\n  private lastStreamToken: string | Uint8Array | undefined;\n\n  /**\n   * Tracks whether or not a handshake has been successfully exchanged and\n   * the stream is ready to accept mutations.\n   */\n  get handshakeComplete(): boolean {\n    return this.handshakeComplete_;\n  }\n\n  // Override of PersistentStream.start\n  start(): void {\n    this.handshakeComplete_ = false;\n    this.lastStreamToken = undefined;\n    super.start();\n  }\n\n  protected tearDown(): void {\n    if (this.handshakeComplete_) {\n      this.writeMutations([]);\n    }\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<ProtoWriteRequest, ProtoWriteResponse> {\n    return this.connection.openStream<ProtoWriteRequest, ProtoWriteResponse>(\n      'Write',\n      token\n    );\n  }\n\n  protected onMessage(responseProto: ProtoWriteResponse): Promise<void> {\n    // Always capture the last stream token.\n    hardAssert(\n      !!responseProto.streamToken,\n      'Got a write response without a stream token'\n    );\n    this.lastStreamToken = responseProto.streamToken;\n\n    if (!this.handshakeComplete_) {\n      // The first response is always the handshake response\n      hardAssert(\n        !responseProto.writeResults || responseProto.writeResults.length === 0,\n        'Got mutation results for handshake'\n      );\n      this.handshakeComplete_ = true;\n      return this.listener!.onHandshakeComplete();\n    } else {\n      // A successful first write response means the stream is healthy,\n      // Note, that we could consider a successful handshake healthy, however,\n      // the write itself might be causing an error we want to back off from.\n      this.backoff.reset();\n\n      const results = fromWriteResults(\n        responseProto.writeResults,\n        responseProto.commitTime\n      );\n      const commitVersion = fromVersion(responseProto.commitTime!);\n      return this.listener!.onMutationResult(commitVersion, results);\n    }\n  }\n\n  /**\n   * Sends an initial streamToken to the server, performing the handshake\n   * required to make the StreamingWrite RPC work. Subsequent\n   * calls should wait until onHandshakeComplete was called.\n   */\n  writeHandshake(): void {\n    debugAssert(this.isOpen(), 'Writing handshake requires an opened stream');\n    debugAssert(!this.handshakeComplete_, 'Handshake already completed');\n    debugAssert(\n      !this.lastStreamToken,\n      'Stream token should be empty during handshake'\n    );\n    // TODO(dimond): Support stream resumption. We intentionally do not set the\n    // stream token on the handshake, ignoring any stream token we might have.\n    const request: WriteRequest = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    this.sendRequest(request);\n  }\n\n  /** Sends a group of mutations to the Firestore backend to apply. */\n  writeMutations(mutations: Mutation[]): void {\n    debugAssert(this.isOpen(), 'Writing mutations requires an opened stream');\n    debugAssert(\n      this.handshakeComplete_,\n      'Handshake must be complete before writing mutations'\n    );\n    debugAssert(\n      !!this.lastStreamToken,\n      'Trying to write mutation without a token'\n    );\n\n    const request: WriteRequest = {\n      streamToken: this.lastStreamToken,\n      writes: mutations.map(mutation => toMutation(this.serializer, mutation))\n    };\n\n    this.sendRequest(request);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport {\n  BatchGetDocumentsRequest as ProtoBatchGetDocumentsRequest,\n  BatchGetDocumentsResponse as ProtoBatchGetDocumentsResponse,\n  RunQueryRequest as ProtoRunQueryRequest,\n  RunQueryResponse as ProtoRunQueryResponse\n} from '../protos/firestore_proto_api';\nimport { debugAssert, debugCast, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { Connection } from './connection';\nimport {\n  fromDocument,\n  fromMaybeDocument,\n  getEncodedDatabaseId,\n  JsonProtoSerializer,\n  toMutation,\n  toName,\n  toQueryTarget\n} from './serializer';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream,\n  WatchStreamListener,\n  WriteStreamListener\n} from './persistent_stream';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Query, queryToTarget } from '../core/query';\n\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\nexport abstract class Datastore {\n  abstract terminate(): void;\n}\n\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass DatastoreImpl extends Datastore {\n  terminated = false;\n\n  constructor(\n    readonly credentials: CredentialsProvider,\n    readonly connection: Connection,\n    readonly serializer: JsonProtoSerializer\n  ) {\n    super();\n  }\n\n  verifyInitialized(): void {\n    debugAssert(!!this.connection, 'Datastore.start() not called');\n    if (this.terminated) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  /** Gets an auth token and invokes the provided RPC. */\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    request: Req\n  ): Promise<Resp> {\n    this.verifyInitialized();\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeRPC<Req, Resp>(\n          rpcName,\n          path,\n          request,\n          token\n        );\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n\n  /** Gets an auth token and invokes the provided RPC with streamed results. */\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    request: Req\n  ): Promise<Resp[]> {\n    this.verifyInitialized();\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeStreamingRPC<Req, Resp>(\n          rpcName,\n          path,\n          request,\n          token\n        );\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n\n  terminate(): void {\n    this.terminated = false;\n  }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nexport function newDatastore(\n  credentials: CredentialsProvider,\n  connection: Connection,\n  serializer: JsonProtoSerializer\n): Datastore {\n  return new DatastoreImpl(credentials, connection, serializer);\n}\n\nexport async function invokeCommitRpc(\n  datastore: Datastore,\n  mutations: Mutation[]\n): Promise<void> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\n  const request = {\n    writes: mutations.map(m => toMutation(datastoreImpl.serializer, m))\n  };\n  await datastoreImpl.invokeRPC('Commit', path, request);\n}\n\nexport async function invokeBatchGetDocumentsRpc(\n  datastore: Datastore,\n  keys: DocumentKey[]\n): Promise<MaybeDocument[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\n  const request = {\n    documents: keys.map(k => toName(datastoreImpl.serializer, k))\n  };\n  const response = await datastoreImpl.invokeStreamingRPC<\n    ProtoBatchGetDocumentsRequest,\n    ProtoBatchGetDocumentsResponse\n  >('BatchGetDocuments', path, request);\n\n  const docs = new Map<string, MaybeDocument>();\n  response.forEach(proto => {\n    const doc = fromMaybeDocument(datastoreImpl.serializer, proto);\n    docs.set(doc.key.toString(), doc);\n  });\n  const result: MaybeDocument[] = [];\n  keys.forEach(key => {\n    const doc = docs.get(key.toString());\n    hardAssert(!!doc, 'Missing entity in write response for ' + key);\n    result.push(doc);\n  });\n  return result;\n}\n\nexport async function invokeRunQueryRpc(\n  datastore: Datastore,\n  query: Query\n): Promise<Document[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const request = toQueryTarget(datastoreImpl.serializer, queryToTarget(query));\n  const response = await datastoreImpl.invokeStreamingRPC<\n    ProtoRunQueryRequest,\n    ProtoRunQueryResponse\n  >('RunQuery', request.parent!, { structuredQuery: request.structuredQuery });\n  return (\n    response\n      // Omit RunQueryResponses that only contain readTimes.\n      .filter(proto => !!proto.document)\n      .map(proto =>\n        fromDocument(datastoreImpl.serializer, proto.document!, undefined)\n      )\n  );\n}\n\nexport function newPersistentWriteStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WriteStreamListener\n): PersistentWriteStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  datastoreImpl.verifyInitialized();\n  return new PersistentWriteStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.credentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n\nexport function newPersistentWatchStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WatchStreamListener\n): PersistentListenStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  datastoreImpl.verifyInitialized();\n  return new PersistentListenStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.credentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnlineState } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\n\nconst LOG_TAG = 'OnlineStateTracker';\n\n// To deal with transient failures, we allow multiple stream attempts before\n// giving up and transitioning from OnlineState.Unknown to Offline.\n// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.\n// @jdimond thinks that bug is sufficiently fixed so that we can set this back\n// to 1. If that works okay, we could potentially remove this logic entirely.\nconst MAX_WATCH_STREAM_FAILURES = 1;\n\n// To deal with stream attempts that don't succeed or fail in a timely manner,\n// we have a timeout for OnlineState to reach Online or Offline.\n// If the timeout is reached, we transition to Offline rather than waiting\n// indefinitely.\nconst ONLINE_STATE_TIMEOUT_MS = 10 * 1000;\n\n/**\n * A component used by the RemoteStore to track the OnlineState (that is,\n * whether or not the client as a whole should be considered to be online or\n * offline), implementing the appropriate heuristics.\n *\n * In particular, when the client is trying to connect to the backend, we\n * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for\n * a connection to succeed. If we have too many failures or the timeout elapses,\n * then we set the OnlineState to Offline, and the client will behave as if\n * it is offline (get()s will return cached data, etc.).\n */\nexport class OnlineStateTracker {\n  /** The current OnlineState. */\n  private state = OnlineState.Unknown;\n\n  /**\n   * A count of consecutive failures to open the stream. If it reaches the\n   * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to\n   * Offline.\n   */\n  private watchStreamFailures = 0;\n\n  /**\n   * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we\n   * transition from OnlineState.Unknown to OnlineState.Offline without waiting\n   * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).\n   */\n  private onlineStateTimer: DelayedOperation<void> | null = null;\n\n  /**\n   * Whether the client should log a warning message if it fails to connect to\n   * the backend (initially true, cleared after a successful stream, or if we've\n   * logged the message already).\n   */\n  private shouldWarnClientIsOffline = true;\n\n  constructor(\n    private asyncQueue: AsyncQueue,\n    private onlineStateHandler: (onlineState: OnlineState) => void\n  ) {}\n\n  /**\n   * Called by RemoteStore when a watch stream is started (including on each\n   * backoff attempt).\n   *\n   * If this is the first attempt, it sets the OnlineState to Unknown and starts\n   * the onlineStateTimer.\n   */\n  handleWatchStreamStart(): void {\n    if (this.watchStreamFailures === 0) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      debugAssert(\n        this.onlineStateTimer === null,\n        `onlineStateTimer shouldn't be started yet`\n      );\n      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(\n        TimerId.OnlineStateTimeout,\n        ONLINE_STATE_TIMEOUT_MS,\n        () => {\n          this.onlineStateTimer = null;\n          debugAssert(\n            this.state === OnlineState.Unknown,\n            'Timer should be canceled if we transitioned to a different state.'\n          );\n          this.logClientOfflineWarningIfNecessary(\n            `Backend didn't respond within ${ONLINE_STATE_TIMEOUT_MS / 1000} ` +\n              `seconds.`\n          );\n          this.setAndBroadcast(OnlineState.Offline);\n\n          // NOTE: handleWatchStreamFailure() will continue to increment\n          // watchStreamFailures even though we are already marked Offline,\n          // but this is non-harmful.\n\n          return Promise.resolve();\n        }\n      );\n    }\n  }\n\n  /**\n   * Updates our OnlineState as appropriate after the watch stream reports a\n   * failure. The first failure moves us to the 'Unknown' state. We then may\n   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we\n   * actually transition to the 'Offline' state.\n   */\n  handleWatchStreamFailure(error: FirestoreError): void {\n    if (this.state === OnlineState.Online) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      // To get to OnlineState.Online, set() must have been called which would\n      // have reset our heuristics.\n      debugAssert(\n        this.watchStreamFailures === 0,\n        'watchStreamFailures must be 0'\n      );\n      debugAssert(\n        this.onlineStateTimer === null,\n        'onlineStateTimer must be null'\n      );\n    } else {\n      this.watchStreamFailures++;\n      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {\n        this.clearOnlineStateTimer();\n\n        this.logClientOfflineWarningIfNecessary(\n          `Connection failed ${MAX_WATCH_STREAM_FAILURES} ` +\n            `times. Most recent error: ${error.toString()}`\n        );\n\n        this.setAndBroadcast(OnlineState.Offline);\n      }\n    }\n  }\n\n  /**\n   * Explicitly sets the OnlineState to the specified state.\n   *\n   * Note that this resets our timers / failure counters, etc. used by our\n   * Offline heuristics, so must not be used in place of\n   * handleWatchStreamStart() and handleWatchStreamFailure().\n   */\n  set(newState: OnlineState): void {\n    this.clearOnlineStateTimer();\n    this.watchStreamFailures = 0;\n\n    if (newState === OnlineState.Online) {\n      // We've connected to watch at least once. Don't warn the developer\n      // about being offline going forward.\n      this.shouldWarnClientIsOffline = false;\n    }\n\n    this.setAndBroadcast(newState);\n  }\n\n  private setAndBroadcast(newState: OnlineState): void {\n    if (newState !== this.state) {\n      this.state = newState;\n      this.onlineStateHandler(newState);\n    }\n  }\n\n  private logClientOfflineWarningIfNecessary(details: string): void {\n    const message =\n      `Could not reach Cloud Firestore backend. ${details}\\n` +\n      `This typically indicates that your device does not have a healthy ` +\n      `Internet connection at the moment. The client will operate in offline ` +\n      `mode until it is able to successfully connect to the backend.`;\n    if (this.shouldWarnClientIsOffline) {\n      logError(message);\n      this.shouldWarnClientIsOffline = false;\n    } else {\n      logDebug(LOG_TAG, message);\n    }\n  }\n\n  private clearOnlineStateTimer(): void {\n    if (this.onlineStateTimer !== null) {\n      this.onlineStateTimer.cancel();\n      this.onlineStateTimer = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { OnlineState, TargetId } from '../core/types';\nimport {\n  LocalStore,\n  getLastRemoteSnapshotVersion,\n  nextMutationBatch\n} from '../local/local_store';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { MutationResult } from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { debugAssert, debugCast } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { AsyncQueue } from '../util/async_queue';\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\nimport {\n  Datastore,\n  newPersistentWatchStream,\n  newPersistentWriteStream\n} from './datastore';\nimport { OnlineStateTracker } from './online_state_tracker';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream\n} from './persistent_stream';\nimport { RemoteSyncer } from './remote_syncer';\nimport { isPermanentWriteError } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  WatchChange,\n  WatchChangeAggregator,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { ByteString } from '../util/byte_string';\nimport { isIndexedDbTransactionError } from '../local/simple_db';\nimport { User } from '../auth/user';\n\nconst LOG_TAG = 'RemoteStore';\n\n// TODO(b/35853402): Negotiate this with the stream.\nconst MAX_PENDING_WRITES = 10;\n\n/** Reasons for why the RemoteStore may be offline. */\nconst enum OfflineCause {\n  /** The user has explicitly disabled the network (via `disableNetwork()`). */\n  UserDisabled,\n  /** An IndexedDb failure occurred while persisting a stream update. */\n  IndexedDbFailed,\n  /** The tab is not the primary tab (only relevant with multi-tab). */\n  IsSecondary,\n  /** We are restarting the streams due to an Auth credential change. */\n  CredentialChange,\n  /** The connectivity state of the environment has changed. */\n  ConnectivityChange,\n  /** The RemoteStore has been shut down. */\n  Shutdown\n}\n\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nexport interface RemoteStore {\n  /**\n   * SyncEngine to notify of watch and write events. This must be set\n   * immediately after construction.\n   */\n  remoteSyncer: RemoteSyncer;\n}\n\nclass RemoteStoreImpl implements RemoteStore {\n  remoteSyncer: RemoteSyncer = {};\n\n  /**\n   * A list of up to MAX_PENDING_WRITES writes that we have fetched from the\n   * LocalStore via fillWritePipeline() and have or will send to the write\n   * stream.\n   *\n   * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or\n   * restart the write stream. When the stream is established the writes in the\n   * pipeline will be sent in order.\n   *\n   * Writes remain in writePipeline until they are acknowledged by the backend\n   * and thus will automatically be re-sent if the stream is interrupted /\n   * restarted before they're acknowledged.\n   *\n   * Write responses from the backend are linked to their originating request\n   * purely based on order, and so we can just shift() writes from the front of\n   * the writePipeline as we receive responses.\n   */\n  writePipeline: MutationBatch[] = [];\n\n  /**\n   * A mapping of watched targets that the client cares about tracking and the\n   * user has explicitly called a 'listen' for this target.\n   *\n   * These targets may or may not have been sent to or acknowledged by the\n   * server. On re-establishing the listen stream, these targets should be sent\n   * to the server. The targets removed with unlistens are removed eagerly\n   * without waiting for confirmation from the listen stream.\n   */\n  listenTargets = new Map<TargetId, TargetData>();\n\n  connectivityMonitor: ConnectivityMonitor;\n  watchStream?: PersistentListenStream;\n  writeStream?: PersistentWriteStream;\n  watchChangeAggregator?: WatchChangeAggregator;\n\n  /**\n   * A set of reasons for why the RemoteStore may be offline. If empty, the\n   * RemoteStore may start its network connections.\n   */\n  offlineCauses = new Set<OfflineCause>();\n\n  /**\n   * Event handlers that get called when the network is disabled or enabled.\n   *\n   * PORTING NOTE: These functions are used on the Web client to create the\n   * underlying streams (to support tree-shakeable streams). On Android and iOS,\n   * the streams are created during construction of RemoteStore.\n   */\n  onNetworkStatusChange: Array<(enabled: boolean) => Promise<void>> = [];\n\n  onlineStateTracker: OnlineStateTracker;\n\n  constructor(\n    /**\n     * The local store, used to fill the write pipeline with outbound mutations.\n     */\n    readonly localStore: LocalStore,\n    /** The client-side proxy for interacting with the backend. */\n    readonly datastore: Datastore,\n    readonly asyncQueue: AsyncQueue,\n    onlineStateHandler: (onlineState: OnlineState) => void,\n    connectivityMonitor: ConnectivityMonitor\n  ) {\n    this.connectivityMonitor = connectivityMonitor;\n    this.connectivityMonitor.addCallback((_: NetworkStatus) => {\n      asyncQueue.enqueueAndForget(async () => {\n        // Porting Note: Unlike iOS, `restartNetwork()` is called even when the\n        // network becomes unreachable as we don't have any other way to tear\n        // down our streams.\n        if (canUseNetwork(this)) {\n          logDebug(\n            LOG_TAG,\n            'Restarting streams for network reachability change.'\n          );\n          await restartNetwork(this);\n        }\n      });\n    });\n\n    this.onlineStateTracker = new OnlineStateTracker(\n      asyncQueue,\n      onlineStateHandler\n    );\n  }\n}\n\nexport function newRemoteStore(\n  localStore: LocalStore,\n  datastore: Datastore,\n  asyncQueue: AsyncQueue,\n  onlineStateHandler: (onlineState: OnlineState) => void,\n  connectivityMonitor: ConnectivityMonitor\n): RemoteStore {\n  return new RemoteStoreImpl(\n    localStore,\n    datastore,\n    asyncQueue,\n    onlineStateHandler,\n    connectivityMonitor\n  );\n}\n\n/** Re-enables the network. Idempotent. */\nexport function remoteStoreEnableNetwork(\n  remoteStore: RemoteStore\n): Promise<void> {\n  const remoteStoreImpl = debugCast(remoteStore, RemoteStoreImpl);\n  remoteStoreImpl.offlineCauses.delete(OfflineCause.UserDisabled);\n  return enableNetworkInternal(remoteStoreImpl);\n}\n\nasync function enableNetworkInternal(\n  remoteStoreImpl: RemoteStoreImpl\n): Promise<void> {\n  if (canUseNetwork(remoteStoreImpl)) {\n    for (const networkStatusHandler of remoteStoreImpl.onNetworkStatusChange) {\n      await networkStatusHandler(/* enabled= */ true);\n    }\n  }\n}\n\n/**\n * Temporarily disables the network. The network can be re-enabled using\n * enableNetwork().\n */\nexport async function remoteStoreDisableNetwork(\n  remoteStore: RemoteStore\n): Promise<void> {\n  const remoteStoreImpl = debugCast(remoteStore, RemoteStoreImpl);\n  remoteStoreImpl.offlineCauses.add(OfflineCause.UserDisabled);\n  await disableNetworkInternal(remoteStoreImpl);\n\n  // Set the OnlineState to Offline so get()s return from cache, etc.\n  remoteStoreImpl.onlineStateTracker.set(OnlineState.Offline);\n}\n\nasync function disableNetworkInternal(\n  remoteStoreImpl: RemoteStoreImpl\n): Promise<void> {\n  for (const networkStatusHandler of remoteStoreImpl.onNetworkStatusChange) {\n    await networkStatusHandler(/* enabled= */ false);\n  }\n}\n\nexport async function remoteStoreShutdown(\n  remoteStore: RemoteStore\n): Promise<void> {\n  const remoteStoreImpl = debugCast(remoteStore, RemoteStoreImpl);\n  logDebug(LOG_TAG, 'RemoteStore shutting down.');\n  remoteStoreImpl.offlineCauses.add(OfflineCause.Shutdown);\n  await disableNetworkInternal(remoteStoreImpl);\n  remoteStoreImpl.connectivityMonitor.shutdown();\n\n  // Set the OnlineState to Unknown (rather than Offline) to avoid potentially\n  // triggering spurious listener events with cached data, etc.\n  remoteStoreImpl.onlineStateTracker.set(OnlineState.Unknown);\n}\n\n/**\n * Starts new listen for the given target. Uses resume token if provided. It\n * is a no-op if the target of given `TargetData` is already being listened to.\n */\nexport function remoteStoreListen(\n  remoteStore: RemoteStore,\n  targetData: TargetData\n): void {\n  const remoteStoreImpl = debugCast(remoteStore, RemoteStoreImpl);\n\n  if (remoteStoreImpl.listenTargets.has(targetData.targetId)) {\n    return;\n  }\n\n  // Mark this as something the client is currently listening for.\n  remoteStoreImpl.listenTargets.set(targetData.targetId, targetData);\n\n  if (shouldStartWatchStream(remoteStoreImpl)) {\n    // The listen will be sent in onWatchStreamOpen\n    startWatchStream(remoteStoreImpl);\n  } else if (ensureWatchStream(remoteStoreImpl).isOpen()) {\n    sendWatchRequest(remoteStoreImpl, targetData);\n  }\n}\n\n/**\n * Removes the listen from server. It is a no-op if the given target id is\n * not being listened to.\n */\nexport function remoteStoreUnlisten(\n  remoteStore: RemoteStore,\n  targetId: TargetId\n): void {\n  const remoteStoreImpl = debugCast(remoteStore, RemoteStoreImpl);\n  const watchStream = ensureWatchStream(remoteStoreImpl);\n\n  debugAssert(\n    remoteStoreImpl.listenTargets.has(targetId),\n    `unlisten called on target no currently watched: ${targetId}`\n  );\n\n  remoteStoreImpl.listenTargets.delete(targetId);\n  if (watchStream.isOpen()) {\n    sendUnwatchRequest(remoteStoreImpl, targetId);\n  }\n\n  if (remoteStoreImpl.listenTargets.size === 0) {\n    if (watchStream.isOpen()) {\n      watchStream.markIdle();\n    } else if (canUseNetwork(remoteStoreImpl)) {\n      // Revert to OnlineState.Unknown if the watch stream is not open and we\n      // have no listeners, since without any listens to send we cannot\n      // confirm if the stream is healthy and upgrade to OnlineState.Online.\n      remoteStoreImpl.onlineStateTracker.set(OnlineState.Unknown);\n    }\n  }\n}\n\n/**\n * We need to increment the the expected number of pending responses we're due\n * from watch so we wait for the ack to process any messages from this target.\n */\nfunction sendWatchRequest(\n  remoteStoreImpl: RemoteStoreImpl,\n  targetData: TargetData\n): void {\n  remoteStoreImpl.watchChangeAggregator!.recordPendingTargetRequest(\n    targetData.targetId\n  );\n  ensureWatchStream(remoteStoreImpl).watch(targetData);\n}\n\n/**\n * We need to increment the expected number of pending responses we're due\n * from watch so we wait for the removal on the server before we process any\n * messages from this target.\n */\nfunction sendUnwatchRequest(\n  remoteStoreImpl: RemoteStoreImpl,\n  targetId: TargetId\n): void {\n  remoteStoreImpl.watchChangeAggregator!.recordPendingTargetRequest(targetId);\n  ensureWatchStream(remoteStoreImpl).unwatch(targetId);\n}\n\nfunction startWatchStream(remoteStoreImpl: RemoteStoreImpl): void {\n  debugAssert(\n    shouldStartWatchStream(remoteStoreImpl),\n    'startWatchStream() called when shouldStartWatchStream() is false.'\n  );\n  debugAssert(\n    !!remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget,\n    'getRemoteKeysForTarget() not set'\n  );\n\n  remoteStoreImpl.watchChangeAggregator = new WatchChangeAggregator({\n    getRemoteKeysForTarget: targetId =>\n      remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget!(targetId),\n    getTargetDataForTarget: targetId =>\n      remoteStoreImpl.listenTargets.get(targetId) || null\n  });\n  ensureWatchStream(remoteStoreImpl).start();\n  remoteStoreImpl.onlineStateTracker.handleWatchStreamStart();\n}\n\n/**\n * Returns whether the watch stream should be started because it's necessary\n * and has not yet been started.\n */\nfunction shouldStartWatchStream(remoteStoreImpl: RemoteStoreImpl): boolean {\n  return (\n    canUseNetwork(remoteStoreImpl) &&\n    !ensureWatchStream(remoteStoreImpl).isStarted() &&\n    remoteStoreImpl.listenTargets.size > 0\n  );\n}\n\nexport function canUseNetwork(remoteStore: RemoteStore): boolean {\n  const remoteStoreImpl = debugCast(remoteStore, RemoteStoreImpl);\n  return remoteStoreImpl.offlineCauses.size === 0;\n}\n\nfunction cleanUpWatchStreamState(remoteStoreImpl: RemoteStoreImpl): void {\n  remoteStoreImpl.watchChangeAggregator = undefined;\n}\n\nasync function onWatchStreamOpen(\n  remoteStoreImpl: RemoteStoreImpl\n): Promise<void> {\n  remoteStoreImpl.listenTargets.forEach((targetData, targetId) => {\n    sendWatchRequest(remoteStoreImpl, targetData);\n  });\n}\n\nasync function onWatchStreamClose(\n  remoteStoreImpl: RemoteStoreImpl,\n  error?: FirestoreError\n): Promise<void> {\n  if (error === undefined) {\n    // Graceful stop (due to stop() or idle timeout). Make sure that's\n    // desirable.\n    debugAssert(\n      !shouldStartWatchStream(remoteStoreImpl),\n      'Watch stream was stopped gracefully while still needed.'\n    );\n  }\n\n  cleanUpWatchStreamState(remoteStoreImpl);\n\n  // If we still need the watch stream, retry the connection.\n  if (shouldStartWatchStream(remoteStoreImpl)) {\n    remoteStoreImpl.onlineStateTracker.handleWatchStreamFailure(error!);\n\n    startWatchStream(remoteStoreImpl);\n  } else {\n    // No need to restart watch stream because there are no active targets.\n    // The online state is set to unknown because there is no active attempt\n    // at establishing a connection\n    remoteStoreImpl.onlineStateTracker.set(OnlineState.Unknown);\n  }\n}\n\nasync function onWatchStreamChange(\n  remoteStoreImpl: RemoteStoreImpl,\n  watchChange: WatchChange,\n  snapshotVersion: SnapshotVersion\n): Promise<void> {\n  // Mark the client as online since we got a message from the server\n  remoteStoreImpl.onlineStateTracker.set(OnlineState.Online);\n\n  if (\n    watchChange instanceof WatchTargetChange &&\n    watchChange.state === WatchTargetChangeState.Removed &&\n    watchChange.cause\n  ) {\n    // There was an error on a target, don't wait for a consistent snapshot\n    // to raise events\n    try {\n      await handleTargetError(remoteStoreImpl, watchChange);\n    } catch (e) {\n      logDebug(\n        LOG_TAG,\n        'Failed to remove targets %s: %s ',\n        watchChange.targetIds.join(','),\n        e\n      );\n      await disableNetworkUntilRecovery(remoteStoreImpl, e);\n    }\n    return;\n  }\n\n  if (watchChange instanceof DocumentWatchChange) {\n    remoteStoreImpl.watchChangeAggregator!.handleDocumentChange(watchChange);\n  } else if (watchChange instanceof ExistenceFilterChange) {\n    remoteStoreImpl.watchChangeAggregator!.handleExistenceFilter(watchChange);\n  } else {\n    debugAssert(\n      watchChange instanceof WatchTargetChange,\n      'Expected watchChange to be an instance of WatchTargetChange'\n    );\n    remoteStoreImpl.watchChangeAggregator!.handleTargetChange(watchChange);\n  }\n\n  if (!snapshotVersion.isEqual(SnapshotVersion.min())) {\n    try {\n      const lastRemoteSnapshotVersion = await getLastRemoteSnapshotVersion(\n        remoteStoreImpl.localStore\n      );\n      if (snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0) {\n        // We have received a target change with a global snapshot if the snapshot\n        // version is not equal to SnapshotVersion.min().\n        await raiseWatchSnapshot(remoteStoreImpl, snapshotVersion);\n      }\n    } catch (e) {\n      logDebug(LOG_TAG, 'Failed to raise snapshot:', e);\n      await disableNetworkUntilRecovery(remoteStoreImpl, e);\n    }\n  }\n}\n\n/**\n * Recovery logic for IndexedDB errors that takes the network offline until\n * `op` succeeds. Retries are scheduled with backoff using\n * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is\n * validated via a generic operation.\n *\n * The returned Promise is resolved once the network is disabled and before\n * any retry attempt.\n */\nasync function disableNetworkUntilRecovery(\n  remoteStoreImpl: RemoteStoreImpl,\n  e: FirestoreError,\n  op?: () => Promise<unknown>\n): Promise<void> {\n  if (isIndexedDbTransactionError(e)) {\n    debugAssert(\n      !remoteStoreImpl.offlineCauses.has(OfflineCause.IndexedDbFailed),\n      'Unexpected network event when IndexedDB was marked failed.'\n    );\n    remoteStoreImpl.offlineCauses.add(OfflineCause.IndexedDbFailed);\n\n    // Disable network and raise offline snapshots\n    await disableNetworkInternal(remoteStoreImpl);\n    remoteStoreImpl.onlineStateTracker.set(OnlineState.Offline);\n\n    if (!op) {\n      // Use a simple read operation to determine if IndexedDB recovered.\n      // Ideally, we would expose a health check directly on SimpleDb, but\n      // RemoteStore only has access to persistence through LocalStore.\n      op = () => getLastRemoteSnapshotVersion(remoteStoreImpl.localStore);\n    }\n\n    // Probe IndexedDB periodically and re-enable network\n    remoteStoreImpl.asyncQueue.enqueueRetryable(async () => {\n      logDebug(LOG_TAG, 'Retrying IndexedDB access');\n      await op!();\n      remoteStoreImpl.offlineCauses.delete(OfflineCause.IndexedDbFailed);\n      await enableNetworkInternal(remoteStoreImpl);\n    });\n  } else {\n    throw e;\n  }\n}\n\n/**\n * Executes `op`. If `op` fails, takes the network offline until `op`\n * succeeds. Returns after the first attempt.\n */\nfunction executeWithRecovery(\n  remoteStoreImpl: RemoteStoreImpl,\n  op: () => Promise<void>\n): Promise<void> {\n  return op().catch(e => disableNetworkUntilRecovery(remoteStoreImpl, e, op));\n}\n\n/**\n * Takes a batch of changes from the Datastore, repackages them as a\n * RemoteEvent, and passes that on to the listener, which is typically the\n * SyncEngine.\n */\nfunction raiseWatchSnapshot(\n  remoteStoreImpl: RemoteStoreImpl,\n  snapshotVersion: SnapshotVersion\n): Promise<void> {\n  debugAssert(\n    !snapshotVersion.isEqual(SnapshotVersion.min()),\n    \"Can't raise event for unknown SnapshotVersion\"\n  );\n  const remoteEvent = remoteStoreImpl.watchChangeAggregator!.createRemoteEvent(\n    snapshotVersion\n  );\n\n  // Update in-memory resume tokens. LocalStore will update the\n  // persistent view of these when applying the completed RemoteEvent.\n  remoteEvent.targetChanges.forEach((change, targetId) => {\n    if (change.resumeToken.approximateByteSize() > 0) {\n      const targetData = remoteStoreImpl.listenTargets.get(targetId);\n      // A watched target might have been removed already.\n      if (targetData) {\n        remoteStoreImpl.listenTargets.set(\n          targetId,\n          targetData.withResumeToken(change.resumeToken, snapshotVersion)\n        );\n      }\n    }\n  });\n\n  // Re-establish listens for the targets that have been invalidated by\n  // existence filter mismatches.\n  remoteEvent.targetMismatches.forEach(targetId => {\n    const targetData = remoteStoreImpl.listenTargets.get(targetId);\n    if (!targetData) {\n      // A watched target might have been removed already.\n      return;\n    }\n\n    // Clear the resume token for the target, since we're in a known mismatch\n    // state.\n    remoteStoreImpl.listenTargets.set(\n      targetId,\n      targetData.withResumeToken(\n        ByteString.EMPTY_BYTE_STRING,\n        targetData.snapshotVersion\n      )\n    );\n\n    // Cause a hard reset by unwatching and rewatching immediately, but\n    // deliberately don't send a resume token so that we get a full update.\n    sendUnwatchRequest(remoteStoreImpl, targetId);\n\n    // Mark the target we send as being on behalf of an existence filter\n    // mismatch, but don't actually retain that in listenTargets. This ensures\n    // that we flag the first re-listen this way without impacting future\n    // listens of this target (that might happen e.g. on reconnect).\n    const requestTargetData = new TargetData(\n      targetData.target,\n      targetId,\n      TargetPurpose.ExistenceFilterMismatch,\n      targetData.sequenceNumber\n    );\n    sendWatchRequest(remoteStoreImpl, requestTargetData);\n  });\n\n  // Finally raise remote event\n  debugAssert(\n    !!remoteStoreImpl.remoteSyncer.applyRemoteEvent,\n    'applyRemoteEvent() not set'\n  );\n  return remoteStoreImpl.remoteSyncer.applyRemoteEvent(remoteEvent);\n}\n\n/** Handles an error on a target */\nasync function handleTargetError(\n  remoteStoreImpl: RemoteStoreImpl,\n  watchChange: WatchTargetChange\n): Promise<void> {\n  debugAssert(\n    !!remoteStoreImpl.remoteSyncer.rejectListen,\n    'rejectListen() not set'\n  );\n  debugAssert(!!watchChange.cause, 'Handling target error without a cause');\n  const error = watchChange.cause!;\n  for (const targetId of watchChange.targetIds) {\n    // A watched target might have been removed already.\n    if (remoteStoreImpl.listenTargets.has(targetId)) {\n      await remoteStoreImpl.remoteSyncer.rejectListen(targetId, error);\n      remoteStoreImpl.listenTargets.delete(targetId);\n      remoteStoreImpl.watchChangeAggregator!.removeTarget(targetId);\n    }\n  }\n}\n\n/**\n * Attempts to fill our write pipeline with writes from the LocalStore.\n *\n * Called internally to bootstrap or refill the write pipeline and by\n * SyncEngine whenever there are new mutations to process.\n *\n * Starts the write stream if necessary.\n */\nexport async function fillWritePipeline(\n  remoteStore: RemoteStore\n): Promise<void> {\n  const remoteStoreImpl = debugCast(remoteStore, RemoteStoreImpl);\n  const writeStream = ensureWriteStream(remoteStoreImpl);\n\n  let lastBatchIdRetrieved =\n    remoteStoreImpl.writePipeline.length > 0\n      ? remoteStoreImpl.writePipeline[remoteStoreImpl.writePipeline.length - 1]\n          .batchId\n      : BATCHID_UNKNOWN;\n\n  while (canAddToWritePipeline(remoteStoreImpl)) {\n    try {\n      const batch = await nextMutationBatch(\n        remoteStoreImpl.localStore,\n        lastBatchIdRetrieved\n      );\n\n      if (batch === null) {\n        if (remoteStoreImpl.writePipeline.length === 0) {\n          writeStream.markIdle();\n        }\n        break;\n      } else {\n        lastBatchIdRetrieved = batch.batchId;\n        addToWritePipeline(remoteStoreImpl, batch);\n      }\n    } catch (e) {\n      await disableNetworkUntilRecovery(remoteStoreImpl, e);\n    }\n  }\n\n  if (shouldStartWriteStream(remoteStoreImpl)) {\n    startWriteStream(remoteStoreImpl);\n  }\n}\n\n/**\n * Returns true if we can add to the write pipeline (i.e. the network is\n * enabled and the write pipeline is not full).\n */\nfunction canAddToWritePipeline(remoteStoreImpl: RemoteStoreImpl): boolean {\n  return (\n    canUseNetwork(remoteStoreImpl) &&\n    remoteStoreImpl.writePipeline.length < MAX_PENDING_WRITES\n  );\n}\n\n// For testing\nexport function outstandingWrites(remoteStore: RemoteStore): number {\n  const remoteStoreImpl = debugCast(remoteStore, RemoteStoreImpl);\n  return remoteStoreImpl.writePipeline.length;\n}\n\n/**\n * Queues additional writes to be sent to the write stream, sending them\n * immediately if the write stream is established.\n */\nfunction addToWritePipeline(\n  remoteStoreImpl: RemoteStoreImpl,\n  batch: MutationBatch\n): void {\n  debugAssert(\n    canAddToWritePipeline(remoteStoreImpl),\n    'addToWritePipeline called when pipeline is full'\n  );\n  remoteStoreImpl.writePipeline.push(batch);\n\n  const writeStream = ensureWriteStream(remoteStoreImpl);\n  if (writeStream.isOpen() && writeStream.handshakeComplete) {\n    writeStream.writeMutations(batch.mutations);\n  }\n}\n\nfunction shouldStartWriteStream(remoteStoreImpl: RemoteStoreImpl): boolean {\n  return (\n    canUseNetwork(remoteStoreImpl) &&\n    !ensureWriteStream(remoteStoreImpl).isStarted() &&\n    remoteStoreImpl.writePipeline.length > 0\n  );\n}\n\nfunction startWriteStream(remoteStoreImpl: RemoteStoreImpl): void {\n  debugAssert(\n    shouldStartWriteStream(remoteStoreImpl),\n    'startWriteStream() called when shouldStartWriteStream() is false.'\n  );\n  ensureWriteStream(remoteStoreImpl).start();\n}\n\nasync function onWriteStreamOpen(\n  remoteStoreImpl: RemoteStoreImpl\n): Promise<void> {\n  ensureWriteStream(remoteStoreImpl).writeHandshake();\n}\n\nasync function onWriteHandshakeComplete(\n  remoteStoreImpl: RemoteStoreImpl\n): Promise<void> {\n  const writeStream = ensureWriteStream(remoteStoreImpl);\n  // Send the write pipeline now that the stream is established.\n  for (const batch of remoteStoreImpl.writePipeline) {\n    writeStream.writeMutations(batch.mutations);\n  }\n}\n\nasync function onMutationResult(\n  remoteStoreImpl: RemoteStoreImpl,\n  commitVersion: SnapshotVersion,\n  results: MutationResult[]\n): Promise<void> {\n  // This is a response to a write containing mutations and should be\n  // correlated to the first write in our write pipeline.\n  debugAssert(\n    remoteStoreImpl.writePipeline.length > 0,\n    'Got result for empty write pipeline'\n  );\n  const batch = remoteStoreImpl.writePipeline.shift()!;\n  const success = MutationBatchResult.from(batch, commitVersion, results);\n\n  debugAssert(\n    !!remoteStoreImpl.remoteSyncer.applySuccessfulWrite,\n    'applySuccessfulWrite() not set'\n  );\n  await executeWithRecovery(remoteStoreImpl, () =>\n    remoteStoreImpl.remoteSyncer.applySuccessfulWrite!(success)\n  );\n\n  // It's possible that with the completion of this mutation another\n  // slot has freed up.\n  await fillWritePipeline(remoteStoreImpl);\n}\n\nasync function onWriteStreamClose(\n  remoteStoreImpl: RemoteStoreImpl,\n  error?: FirestoreError\n): Promise<void> {\n  if (error === undefined) {\n    // Graceful stop (due to stop() or idle timeout). Make sure that's\n    // desirable.\n    debugAssert(\n      !shouldStartWriteStream(remoteStoreImpl),\n      'Write stream was stopped gracefully while still needed.'\n    );\n  }\n\n  // If the write stream closed after the write handshake completes, a write\n  // operation failed and we fail the pending operation.\n  if (error && ensureWriteStream(remoteStoreImpl).handshakeComplete) {\n    // This error affects the actual write.\n    await handleWriteError(remoteStoreImpl, error!);\n  }\n\n  // The write stream might have been started by refilling the write\n  // pipeline for failed writes\n  if (shouldStartWriteStream(remoteStoreImpl)) {\n    startWriteStream(remoteStoreImpl);\n  }\n}\n\nasync function handleWriteError(\n  remoteStoreImpl: RemoteStoreImpl,\n  error: FirestoreError\n): Promise<void> {\n  // Only handle permanent errors here. If it's transient, just let the retry\n  // logic kick in.\n  if (isPermanentWriteError(error.code)) {\n    // This was a permanent error, the request itself was the problem\n    // so it's not going to succeed if we resend it.\n    const batch = remoteStoreImpl.writePipeline.shift()!;\n\n    // In this case it's also unlikely that the server itself is melting\n    // down -- this was just a bad request so inhibit backoff on the next\n    // restart.\n    ensureWriteStream(remoteStoreImpl).inhibitBackoff();\n\n    debugAssert(\n      !!remoteStoreImpl.remoteSyncer.rejectFailedWrite,\n      'rejectFailedWrite() not set'\n    );\n    await executeWithRecovery(remoteStoreImpl, () =>\n      remoteStoreImpl.remoteSyncer.rejectFailedWrite!(batch.batchId, error)\n    );\n\n    // It's possible that with the completion of this mutation\n    // another slot has freed up.\n    await fillWritePipeline(remoteStoreImpl);\n  } else {\n    // Transient error, just let the retry logic kick in.\n  }\n}\n\nasync function restartNetwork(remoteStore: RemoteStore): Promise<void> {\n  const remoteStoreImpl = debugCast(remoteStore, RemoteStoreImpl);\n  remoteStoreImpl.offlineCauses.add(OfflineCause.ConnectivityChange);\n  await disableNetworkInternal(remoteStoreImpl);\n  remoteStoreImpl.onlineStateTracker.set(OnlineState.Unknown);\n  remoteStoreImpl.offlineCauses.delete(OfflineCause.ConnectivityChange);\n  await enableNetworkInternal(remoteStoreImpl);\n}\n\nexport async function remoteStoreHandleCredentialChange(\n  remoteStore: RemoteStore,\n  user: User\n): Promise<void> {\n  const remoteStoreImpl = debugCast(remoteStore, RemoteStoreImpl);\n  remoteStoreImpl.asyncQueue.verifyOperationInProgress();\n  debugAssert(\n    !!remoteStoreImpl.remoteSyncer.handleCredentialChange,\n    'handleCredentialChange() not set'\n  );\n\n  logDebug(LOG_TAG, 'RemoteStore received new credentials');\n  const usesNetwork = canUseNetwork(remoteStoreImpl);\n\n  // Tear down and re-create our network streams. This will ensure we get a\n  // fresh auth token for the new user and re-fill the write pipeline with\n  // new mutations from the LocalStore (since mutations are per-user).\n  remoteStoreImpl.offlineCauses.add(OfflineCause.CredentialChange);\n  await disableNetworkInternal(remoteStoreImpl);\n  if (usesNetwork) {\n    // Don't set the network status to Unknown if we are offline.\n    remoteStoreImpl.onlineStateTracker.set(OnlineState.Unknown);\n  }\n  await remoteStoreImpl.remoteSyncer.handleCredentialChange(user);\n  remoteStoreImpl.offlineCauses.delete(OfflineCause.CredentialChange);\n  await enableNetworkInternal(remoteStoreImpl);\n}\n\n/**\n * Toggles the network state when the client gains or loses its primary lease.\n */\nexport async function remoteStoreApplyPrimaryState(\n  remoteStore: RemoteStore,\n  isPrimary: boolean\n): Promise<void> {\n  const remoteStoreImpl = debugCast(remoteStore, RemoteStoreImpl);\n  if (isPrimary) {\n    remoteStoreImpl.offlineCauses.delete(OfflineCause.IsSecondary);\n    await enableNetworkInternal(remoteStoreImpl);\n  } else if (!isPrimary) {\n    remoteStoreImpl.offlineCauses.add(OfflineCause.IsSecondary);\n    await disableNetworkInternal(remoteStoreImpl);\n    remoteStoreImpl.onlineStateTracker.set(OnlineState.Unknown);\n  }\n}\n\n/**\n * If not yet initialized, registers the WatchStream and its network state\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\n * already available.\n *\n * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.\n * This is not done on Web to allow it to be tree-shaken.\n */\nfunction ensureWatchStream(\n  remoteStoreImpl: RemoteStoreImpl\n): PersistentListenStream {\n  if (!remoteStoreImpl.watchStream) {\n    // Create stream (but note that it is not started yet).\n    remoteStoreImpl.watchStream = newPersistentWatchStream(\n      remoteStoreImpl.datastore,\n      remoteStoreImpl.asyncQueue,\n      {\n        onOpen: onWatchStreamOpen.bind(null, remoteStoreImpl),\n        onClose: onWatchStreamClose.bind(null, remoteStoreImpl),\n        onWatchChange: onWatchStreamChange.bind(null, remoteStoreImpl)\n      }\n    );\n\n    remoteStoreImpl.onNetworkStatusChange.push(async enabled => {\n      if (enabled) {\n        remoteStoreImpl.watchStream!.inhibitBackoff();\n        if (shouldStartWatchStream(remoteStoreImpl)) {\n          startWatchStream(remoteStoreImpl);\n        } else {\n          remoteStoreImpl.onlineStateTracker.set(OnlineState.Unknown);\n        }\n      } else {\n        await remoteStoreImpl.watchStream!.stop();\n        cleanUpWatchStreamState(remoteStoreImpl);\n      }\n    });\n  }\n\n  return remoteStoreImpl.watchStream;\n}\n\n/**\n * If not yet initialized, registers the WriteStream and its network state\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\n * already available.\n *\n * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.\n * This is not done on Web to allow it to be tree-shaken.\n */\nfunction ensureWriteStream(\n  remoteStoreImpl: RemoteStoreImpl\n): PersistentWriteStream {\n  if (!remoteStoreImpl.writeStream) {\n    debugAssert(\n      remoteStoreImpl.writePipeline.length === 0,\n      'Should not issue writes before WriteStream is enabled'\n    );\n\n    // Create stream (but note that it is not started yet).\n    remoteStoreImpl.writeStream = newPersistentWriteStream(\n      remoteStoreImpl.datastore,\n      remoteStoreImpl.asyncQueue,\n      {\n        onOpen: onWriteStreamOpen.bind(null, remoteStoreImpl),\n        onClose: onWriteStreamClose.bind(null, remoteStoreImpl),\n        onHandshakeComplete: onWriteHandshakeComplete.bind(\n          null,\n          remoteStoreImpl\n        ),\n        onMutationResult: onMutationResult.bind(null, remoteStoreImpl)\n      }\n    );\n\n    remoteStoreImpl.onNetworkStatusChange.push(async enabled => {\n      if (enabled) {\n        remoteStoreImpl.writeStream!.inhibitBackoff();\n\n        // This will start the write stream if necessary.\n        await fillWritePipeline(remoteStoreImpl);\n      } else {\n        await remoteStoreImpl.writeStream!.stop();\n\n        if (remoteStoreImpl.writePipeline.length > 0) {\n          logDebug(\n            LOG_TAG,\n            `Stopping write stream with ${remoteStoreImpl.writePipeline.length} pending writes`\n          );\n          remoteStoreImpl.writePipeline = [];\n        }\n      }\n    });\n  }\n\n  return remoteStoreImpl.writeStream;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, TargetId } from '../core/types';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { ResourcePath } from '../model/path';\n\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nexport class ReferenceSet {\n  // A set of outstanding references to a document sorted by key.\n  private refsByKey = new SortedSet(DocReference.compareByKey);\n\n  // A set of outstanding references to a document sorted by target id.\n  private refsByTarget = new SortedSet(DocReference.compareByTargetId);\n\n  /** Returns true if the reference set contains no references. */\n  isEmpty(): boolean {\n    return this.refsByKey.isEmpty();\n  }\n\n  /** Adds a reference to the given document key for the given ID. */\n  addReference(key: DocumentKey, id: TargetId | BatchId): void {\n    const ref = new DocReference(key, id);\n    this.refsByKey = this.refsByKey.add(ref);\n    this.refsByTarget = this.refsByTarget.add(ref);\n  }\n\n  /** Add references to the given document keys for the given ID. */\n  addReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.addReference(key, id));\n  }\n\n  /**\n   * Removes a reference to the given document key for the given\n   * ID.\n   */\n  removeReference(key: DocumentKey, id: TargetId | BatchId): void {\n    this.removeRef(new DocReference(key, id));\n  }\n\n  removeReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.removeReference(key, id));\n  }\n\n  /**\n   * Clears all references with a given ID. Calls removeRef() for each key\n   * removed.\n   */\n  removeReferencesForId(id: TargetId | BatchId): DocumentKey[] {\n    const emptyKey = new DocumentKey(new ResourcePath([]));\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    const keys: DocumentKey[] = [];\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      this.removeRef(ref);\n      keys.push(ref.key);\n    });\n    return keys;\n  }\n\n  removeAllReferences(): void {\n    this.refsByKey.forEach(ref => this.removeRef(ref));\n  }\n\n  private removeRef(ref: DocReference): void {\n    this.refsByKey = this.refsByKey.delete(ref);\n    this.refsByTarget = this.refsByTarget.delete(ref);\n  }\n\n  referencesForId(id: TargetId | BatchId): DocumentKeySet {\n    const emptyKey = new DocumentKey(new ResourcePath([]));\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    let keys = documentKeySet();\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      keys = keys.add(ref.key);\n    });\n    return keys;\n  }\n\n  containsKey(key: DocumentKey): boolean {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.refsByKey.firstAfterOrEqual(ref);\n    return firstRef !== null && key.isEqual(firstRef.key);\n  }\n}\n\nexport class DocReference {\n  constructor(\n    public key: DocumentKey,\n    public targetOrBatchId: TargetId | BatchId\n  ) {}\n\n  /** Compare by key then by ID */\n  static compareByKey(left: DocReference, right: DocReference): number {\n    return (\n      DocumentKey.comparator(left.key, right.key) ||\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId)\n    );\n  }\n\n  /** Compare by ID then by key */\n  static compareByTargetId(left: DocReference, right: DocReference): number {\n    return (\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n      DocumentKey.comparator(left.key, right.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, MutationBatchState, TargetId } from '../core/types';\nimport { QueryTargetState } from './shared_client_state_syncer';\nimport { debugAssert } from '../util/assert';\nimport { ClientId } from './shared_client_state';\nimport { User } from '../auth/user';\n\n// The format of the LocalStorage key that stores the client state is:\n//     firestore_clients_<persistence_prefix>_<instance_key>\nexport const CLIENT_STATE_KEY_PREFIX = 'firestore_clients';\n\n/** Assembles the key for a client state in WebStorage */\nexport function createWebStorageClientStateKey(\n  persistenceKey: string,\n  clientId: ClientId\n): string {\n  debugAssert(\n    clientId.indexOf('_') === -1,\n    `Client key cannot contain '_', but was '${clientId}'`\n  );\n\n  return `${CLIENT_STATE_KEY_PREFIX}_${persistenceKey}_${clientId}`;\n}\n\n/**\n * The JSON representation of a clients's metadata as used during WebStorage\n * serialization. The ClientId is omitted here as it is encoded as part of the\n * key.\n */\nexport interface ClientStateSchema {\n  activeTargetIds: number[];\n  updateTimeMs: number;\n}\n\n// The format of the WebStorage key that stores the mutation state is:\n//     firestore_mutations_<persistence_prefix>_<batch_id>\n//     (for unauthenticated users)\n// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>\n//\n// 'user_uid' is last to avoid needing to escape '_' characters that it might\n// contain.\nexport const MUTATION_BATCH_KEY_PREFIX = 'firestore_mutations';\n\n/** Assembles the key for a mutation batch in WebStorage */\nexport function createWebStorageMutationBatchKey(\n  persistenceKey: string,\n  user: User,\n  batchId: BatchId\n): string {\n  let mutationKey = `${MUTATION_BATCH_KEY_PREFIX}_${persistenceKey}_${batchId}`;\n\n  if (user.isAuthenticated()) {\n    mutationKey += `_${user.uid}`;\n  }\n\n  return mutationKey;\n}\n\n/**\n * The JSON representation of a mutation batch's metadata as used during\n * WebStorage serialization. The UserId and BatchId is omitted as it is\n * encoded as part of the key.\n */\nexport interface MutationMetadataSchema {\n  state: MutationBatchState;\n  error?: { code: string; message: string }; // Only set when state === 'rejected'\n  updateTimeMs: number;\n}\n\n// The format of the WebStorage key that stores a query target's metadata is:\n//     firestore_targets_<persistence_prefix>_<target_id>\nexport const QUERY_TARGET_KEY_PREFIX = 'firestore_targets';\n\n/** Assembles the key for a query state in WebStorage */\nexport function createWebStorageQueryTargetMetadataKey(\n  persistenceKey: string,\n  targetId: TargetId\n): string {\n  return `${QUERY_TARGET_KEY_PREFIX}_${persistenceKey}_${targetId}`;\n}\n\n/**\n * The JSON representation of a query target's state as used during WebStorage\n * serialization. The TargetId is omitted as it is encoded as part of the key.\n */\nexport interface QueryTargetStateSchema {\n  state: QueryTargetState;\n  error?: { code: string; message: string }; // Only set when state === 'rejected'\n  updateTimeMs: number;\n}\n\n// The WebStorage prefix that stores the primary tab's online state. The\n// format of the key is:\n//     firestore_online_state_<persistence_prefix>\nexport const ONLINE_STATE_KEY_PREFIX = 'firestore_online_state';\n\n/** Assembles the key for the online state of the primary tab. */\nexport function createWebStorageOnlineStateKey(persistenceKey: string): string {\n  return `${ONLINE_STATE_KEY_PREFIX}_${persistenceKey}`;\n}\n\n/**\n * The JSON representation of the system's online state, as written by the\n * primary client.\n */\nexport interface SharedOnlineStateSchema {\n  /**\n   * The clientId of the client that wrote this onlineState value. Tracked so\n   * that on startup, clients can check if this client is still active when\n   * determining whether to apply this value or not.\n   */\n  readonly clientId: string;\n  readonly onlineState: string;\n}\n\n// The WebStorage key prefix for the key that stores the last sequence number allocated. The key\n// looks like 'firestore_sequence_number_<persistence_prefix>'.\nexport const SEQUENCE_NUMBER_KEY_PREFIX = 'firestore_sequence_number';\n\n/** Assembles the key for the current sequence number. */\nexport function createWebStorageSequenceNumberKey(\n  persistenceKey: string\n): string {\n  return `${SEQUENCE_NUMBER_KEY_PREFIX}_${persistenceKey}`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequence } from '../core/listen_sequence';\nimport {\n  BatchId,\n  ListenSequenceNumber,\n  MutationBatchState,\n  OnlineState,\n  TargetId\n} from '../core/types';\nimport { TargetIdSet, targetIdSet } from '../model/collections';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\nimport { SortedMap } from '../util/sorted_map';\nimport { primitiveComparator } from '../util/misc';\nimport { isSafeInteger, WindowLike } from '../util/types';\nimport {\n  QueryTargetState,\n  SharedClientStateSyncer\n} from './shared_client_state_syncer';\nimport {\n  CLIENT_STATE_KEY_PREFIX,\n  ClientStateSchema,\n  createWebStorageClientStateKey,\n  createWebStorageMutationBatchKey,\n  createWebStorageOnlineStateKey,\n  createWebStorageQueryTargetMetadataKey,\n  createWebStorageSequenceNumberKey,\n  MUTATION_BATCH_KEY_PREFIX,\n  MutationMetadataSchema,\n  QUERY_TARGET_KEY_PREFIX,\n  QueryTargetStateSchema,\n  SharedOnlineStateSchema\n} from './shared_client_state_schema';\n\nconst LOG_TAG = 'SharedClientState';\n\n/**\n * A randomly-generated key assigned to each Firestore instance at startup.\n */\nexport type ClientId = string;\n\n/**\n * A `SharedClientState` keeps track of the global state of the mutations\n * and query targets for all active clients with the same persistence key (i.e.\n * project ID and FirebaseApp name). It relays local changes to other clients\n * and updates its local state as new state is observed.\n *\n * `SharedClientState` is primarily used for synchronization in Multi-Tab\n * environments. Each tab is responsible for registering its active query\n * targets and mutations. `SharedClientState` will then notify the listener\n * assigned to `.syncEngine` for updates to mutations and queries that\n * originated in other clients.\n *\n * To receive notifications, `.syncEngine` and `.onlineStateHandler` has to be\n * assigned before calling `start()`.\n */\nexport interface SharedClientState {\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n\n  /** Registers the Mutation Batch ID of a newly pending mutation. */\n  addPendingMutation(batchId: BatchId): void;\n\n  /**\n   * Records that a pending mutation has been acknowledged or rejected.\n   * Called by the primary client to notify secondary clients of mutation\n   * results as they come back from the backend.\n   */\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Associates a new Query Target ID with the local Firestore client. Returns\n   * the new query state for the query (which can be 'current' if the query is\n   * already associated with another tab).\n   *\n   * If the target id is already associated with local client, the method simply\n   * returns its `QueryTargetState`.\n   */\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState;\n\n  /** Removes the Query Target ID association from the local client. */\n  removeLocalQueryTarget(targetId: TargetId): void;\n\n  /** Checks whether the target is associated with the local client. */\n  isLocalQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Processes an update to a query target.\n   *\n   * Called by the primary client to notify secondary clients of document\n   * changes or state transitions that affect the provided query target.\n   */\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Removes the target's metadata entry.\n   *\n   * Called by the primary client when all clients stopped listening to a query\n   * target.\n   */\n  clearQueryState(targetId: TargetId): void;\n\n  /**\n   * Gets the active Query Targets IDs for all active clients.\n   *\n   * The implementation for this may require O(n) runtime, where 'n' is the size\n   * of the result set.\n   */\n  // Visible for testing\n  getAllActiveQueryTargets(): SortedSet<TargetId>;\n\n  /**\n   * Checks whether the provided target ID is currently being listened to by\n   * any of the active clients.\n   *\n   * The implementation may require O(n*log m) runtime, where 'n' is the number\n   * of clients and 'm' the number of targets.\n   */\n  isActiveQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Starts the SharedClientState, reads existing client data and registers\n   * listeners for updates to new and existing clients.\n   */\n  start(): Promise<void>;\n\n  /** Shuts down the `SharedClientState` and its listeners. */\n  shutdown(): void;\n\n  /**\n   * Changes the active user and removes all existing user-specific data. The\n   * user change does not call back into SyncEngine (for example, no mutations\n   * will be marked as removed).\n   */\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void;\n\n  /** Changes the shared online state of all clients. */\n  setOnlineState(onlineState: OnlineState): void;\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n}\n\n/**\n * Holds the state of a mutation batch, including its user ID, batch ID and\n * whether the batch is 'pending', 'acknowledged' or 'rejected'.\n */\n// Visible for testing\nexport class MutationMetadata {\n  constructor(\n    readonly user: User,\n    readonly batchId: BatchId,\n    readonly state: MutationBatchState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `MutationMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a MutationMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    user: User,\n    batchId: BatchId,\n    value: string\n  ): MutationMetadata | null {\n    const mutationBatch = JSON.parse(value) as MutationMetadataSchema;\n\n    let validData =\n      typeof mutationBatch === 'object' &&\n      ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !==\n        -1 &&\n      (mutationBatch.error === undefined ||\n        typeof mutationBatch.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && mutationBatch.error) {\n      validData =\n        typeof mutationBatch.error.message === 'string' &&\n        typeof mutationBatch.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          mutationBatch.error.code as Code,\n          mutationBatch.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new MutationMetadata(\n        user,\n        batchId,\n        mutationBatch.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse mutation state for ID '${batchId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const batchMetadata: MutationMetadataSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      batchMetadata.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(batchMetadata);\n  }\n}\n\n/**\n * Holds the state of a query target, including its target ID and whether the\n * target is 'not-current', 'current' or 'rejected'.\n */\n// Visible for testing\nexport class QueryTargetMetadata {\n  constructor(\n    readonly targetId: TargetId,\n    readonly state: QueryTargetState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `QueryTargetMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    targetId: TargetId,\n    value: string\n  ): QueryTargetMetadata | null {\n    const targetState = JSON.parse(value) as QueryTargetStateSchema;\n\n    let validData =\n      typeof targetState === 'object' &&\n      ['not-current', 'current', 'rejected'].indexOf(targetState.state) !==\n        -1 &&\n      (targetState.error === undefined ||\n        typeof targetState.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && targetState.error) {\n      validData =\n        typeof targetState.error.message === 'string' &&\n        typeof targetState.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          targetState.error.code as Code,\n          targetState.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new QueryTargetMetadata(\n        targetId,\n        targetState.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse target state for ID '${targetId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const targetState: QueryTargetStateSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      targetState.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(targetState);\n  }\n}\n\n/**\n * Metadata state of a single client denoting the query targets it is actively\n * listening to.\n */\n// Visible for testing.\nexport interface ClientState {\n  readonly activeTargetIds: TargetIdSet;\n}\n\n/**\n * This class represents the immutable ClientState for a client read from\n * WebStorage, containing the list of active query targets.\n */\nclass RemoteClientState implements ClientState {\n  private constructor(\n    readonly clientId: ClientId,\n    readonly activeTargetIds: TargetIdSet\n  ) {}\n\n  /**\n   * Parses a RemoteClientState from the JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    clientId: ClientId,\n    value: string\n  ): RemoteClientState | null {\n    const clientState = JSON.parse(value) as ClientStateSchema;\n\n    let validData =\n      typeof clientState === 'object' &&\n      clientState.activeTargetIds instanceof Array;\n\n    let activeTargetIdsSet = targetIdSet();\n\n    for (let i = 0; validData && i < clientState.activeTargetIds.length; ++i) {\n      validData = isSafeInteger(clientState.activeTargetIds[i]);\n      activeTargetIdsSet = activeTargetIdsSet.add(\n        clientState.activeTargetIds[i]\n      );\n    }\n\n    if (validData) {\n      return new RemoteClientState(clientId, activeTargetIdsSet);\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse client data for instance '${clientId}': ${value}`\n      );\n      return null;\n    }\n  }\n}\n\n/**\n * This class represents the online state for all clients participating in\n * multi-tab. The online state is only written to by the primary client, and\n * used in secondary clients to update their query views.\n */\nexport class SharedOnlineState {\n  constructor(readonly clientId: string, readonly onlineState: OnlineState) {}\n\n  /**\n   * Parses a SharedOnlineState from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(value: string): SharedOnlineState | null {\n    const onlineState = JSON.parse(value) as SharedOnlineStateSchema;\n\n    const validData =\n      typeof onlineState === 'object' &&\n      ['Unknown', 'Online', 'Offline'].indexOf(onlineState.onlineState) !==\n        -1 &&\n      typeof onlineState.clientId === 'string';\n\n    if (validData) {\n      return new SharedOnlineState(\n        onlineState.clientId,\n        onlineState.onlineState as OnlineState\n      );\n    } else {\n      logError(LOG_TAG, `Failed to parse online state: ${value}`);\n      return null;\n    }\n  }\n}\n\n/**\n * Metadata state of the local client. Unlike `RemoteClientState`, this class is\n * mutable and keeps track of all pending mutations, which allows us to\n * update the range of pending mutation batch IDs as new mutations are added or\n * removed.\n *\n * The data in `LocalClientState` is not read from WebStorage and instead\n * updated via its instance methods. The updated state can be serialized via\n * `toWebStorageJSON()`.\n */\n// Visible for testing.\nexport class LocalClientState implements ClientState {\n  activeTargetIds = targetIdSet();\n\n  addQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.add(targetId);\n  }\n\n  removeQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.delete(targetId);\n  }\n\n  /**\n   * Converts this entry into a JSON-encoded format we can use for WebStorage.\n   * Does not encode `clientId` as it is part of the key in WebStorage.\n   */\n  toWebStorageJSON(): string {\n    const data: ClientStateSchema = {\n      activeTargetIds: this.activeTargetIds.toArray(),\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    return JSON.stringify(data);\n  }\n}\n\n/**\n * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the\n * backing store for the SharedClientState. It keeps track of all active\n * clients and supports modifications of the local client's data.\n */\nexport class WebStorageSharedClientState implements SharedClientState {\n  syncEngine: SharedClientStateSyncer | null = null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  private readonly storage: Storage;\n  private readonly localClientStorageKey: string;\n  private readonly sequenceNumberKey: string;\n  private readonly storageListener = this.handleWebStorageEvent.bind(this);\n  private readonly onlineStateKey: string;\n  private readonly clientStateKeyRe: RegExp;\n  private readonly mutationBatchKeyRe: RegExp;\n  private readonly queryTargetKeyRe: RegExp;\n  private activeClients = new SortedMap<string, ClientState>(\n    primitiveComparator\n  );\n  private started = false;\n  private currentUser: User;\n\n  /**\n   * Captures WebStorage events that occur before `start()` is called. These\n   * events are replayed once `WebStorageSharedClientState` is started.\n   */\n  private earlyEvents: StorageEvent[] = [];\n\n  constructor(\n    private readonly window: WindowLike,\n    private readonly queue: AsyncQueue,\n    private readonly persistenceKey: string,\n    private readonly localClientId: ClientId,\n    initialUser: User\n  ) {\n    // Escape the special characters mentioned here:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n    const escapedPersistenceKey = persistenceKey.replace(\n      /[.*+?^${}()|[\\]\\\\]/g,\n      '\\\\$&'\n    );\n\n    this.storage = this.window.localStorage;\n    this.currentUser = initialUser;\n    this.localClientStorageKey = createWebStorageClientStateKey(\n      this.persistenceKey,\n      this.localClientId\n    );\n    this.sequenceNumberKey = createWebStorageSequenceNumberKey(\n      this.persistenceKey\n    );\n    this.activeClients = this.activeClients.insert(\n      this.localClientId,\n      new LocalClientState()\n    );\n\n    this.clientStateKeyRe = new RegExp(\n      `^${CLIENT_STATE_KEY_PREFIX}_${escapedPersistenceKey}_([^_]*)$`\n    );\n    this.mutationBatchKeyRe = new RegExp(\n      `^${MUTATION_BATCH_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)(?:_(.*))?$`\n    );\n    this.queryTargetKeyRe = new RegExp(\n      `^${QUERY_TARGET_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)$`\n    );\n\n    this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);\n\n    // Rather than adding the storage observer during start(), we add the\n    // storage observer during initialization. This ensures that we collect\n    // events before other components populate their initial state (during their\n    // respective start() calls). Otherwise, we might for example miss a\n    // mutation that is added after LocalStore's start() processed the existing\n    // mutations but before we observe WebStorage events.\n    this.window.addEventListener('storage', this.storageListener);\n  }\n\n  /** Returns 'true' if WebStorage is available in the current environment. */\n  static isAvailable(window: WindowLike | null): window is WindowLike {\n    return !!(window && window.localStorage);\n  }\n\n  async start(): Promise<void> {\n    debugAssert(!this.started, 'WebStorageSharedClientState already started');\n    debugAssert(\n      this.syncEngine !== null,\n      'syncEngine property must be set before calling start()'\n    );\n    debugAssert(\n      this.onlineStateHandler !== null,\n      'onlineStateHandler property must be set before calling start()'\n    );\n\n    // Retrieve the list of existing clients to backfill the data in\n    // SharedClientState.\n    const existingClients = await this.syncEngine!.getActiveClients();\n\n    for (const clientId of existingClients) {\n      if (clientId === this.localClientId) {\n        continue;\n      }\n\n      const storageItem = this.getItem(\n        createWebStorageClientStateKey(this.persistenceKey, clientId)\n      );\n      if (storageItem) {\n        const clientState = RemoteClientState.fromWebStorageEntry(\n          clientId,\n          storageItem\n        );\n        if (clientState) {\n          this.activeClients = this.activeClients.insert(\n            clientState.clientId,\n            clientState\n          );\n        }\n      }\n    }\n\n    this.persistClientState();\n\n    // Check if there is an existing online state and call the callback handler\n    // if applicable.\n    const onlineStateJSON = this.storage.getItem(this.onlineStateKey);\n    if (onlineStateJSON) {\n      const onlineState = this.fromWebStorageOnlineState(onlineStateJSON);\n      if (onlineState) {\n        this.handleOnlineStateEvent(onlineState);\n      }\n    }\n\n    for (const event of this.earlyEvents) {\n      this.handleWebStorageEvent(event);\n    }\n\n    this.earlyEvents = [];\n\n    // Register a window unload hook to remove the client metadata entry from\n    // WebStorage even if `shutdown()` was not called.\n    this.window.addEventListener('unload', () => this.shutdown());\n\n    this.started = true;\n  }\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {\n    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.extractActiveQueryTargets(this.activeClients);\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    let found = false;\n    this.activeClients.forEach((key, value) => {\n      if (value.activeTargetIds.has(targetId)) {\n        found = true;\n      }\n    });\n    return found;\n  }\n\n  addPendingMutation(batchId: BatchId): void {\n    this.persistMutationState(batchId, 'pending');\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    this.persistMutationState(batchId, state, error);\n\n    // Once a final mutation result is observed by other clients, they no longer\n    // access the mutation's metadata entry. Since WebStorage replays events\n    // in order, it is safe to delete the entry right after updating it.\n    this.removeMutationState(batchId);\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    let queryState: QueryTargetState = 'not-current';\n\n    // Lookup an existing query state if the target ID was already registered\n    // by another tab\n    if (this.isActiveQueryTarget(targetId)) {\n      const storageItem = this.storage.getItem(\n        createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n      );\n\n      if (storageItem) {\n        const metadata = QueryTargetMetadata.fromWebStorageEntry(\n          targetId,\n          storageItem\n        );\n        if (metadata) {\n          queryState = metadata.state;\n        }\n      }\n    }\n\n    this.localClientState.addQueryTarget(targetId);\n    this.persistClientState();\n\n    return queryState;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localClientState.removeQueryTarget(targetId);\n    this.persistClientState();\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localClientState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    this.removeItem(\n      createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n    );\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.persistQueryTargetState(targetId, state, error);\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    removedBatchIds.forEach(batchId => {\n      this.removeMutationState(batchId);\n    });\n    this.currentUser = user;\n    addedBatchIds.forEach(batchId => {\n      this.addPendingMutation(batchId);\n    });\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    this.persistOnlineState(onlineState);\n  }\n\n  shutdown(): void {\n    if (this.started) {\n      this.window.removeEventListener('storage', this.storageListener);\n      this.removeItem(this.localClientStorageKey);\n      this.started = false;\n    }\n  }\n\n  private getItem(key: string): string | null {\n    const value = this.storage.getItem(key);\n    logDebug(LOG_TAG, 'READ', key, value);\n    return value;\n  }\n\n  private setItem(key: string, value: string): void {\n    logDebug(LOG_TAG, 'SET', key, value);\n    this.storage.setItem(key, value);\n  }\n\n  private removeItem(key: string): void {\n    logDebug(LOG_TAG, 'REMOVE', key);\n    this.storage.removeItem(key);\n  }\n\n  private handleWebStorageEvent(event: Event): void {\n    // Note: The function is typed to take Event to be interface-compatible with\n    // `Window.addEventListener`.\n    const storageEvent = event as StorageEvent;\n    if (storageEvent.storageArea === this.storage) {\n      logDebug(LOG_TAG, 'EVENT', storageEvent.key, storageEvent.newValue);\n\n      if (storageEvent.key === this.localClientStorageKey) {\n        logError(\n          'Received WebStorage notification for local change. Another client might have ' +\n            'garbage-collected our state'\n        );\n        return;\n      }\n\n      this.queue.enqueueRetryable(async () => {\n        if (!this.started) {\n          this.earlyEvents.push(storageEvent);\n          return;\n        }\n\n        if (storageEvent.key === null) {\n          return;\n        }\n\n        if (this.clientStateKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue != null) {\n            const clientState = this.fromWebStorageClientState(\n              storageEvent.key,\n              storageEvent.newValue\n            );\n            if (clientState) {\n              return this.handleClientStateEvent(\n                clientState.clientId,\n                clientState\n              );\n            }\n          } else {\n            const clientId = this.fromWebStorageClientStateKey(\n              storageEvent.key\n            )!;\n            return this.handleClientStateEvent(clientId, null);\n          }\n        } else if (this.mutationBatchKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue !== null) {\n            const mutationMetadata = this.fromWebStorageMutationMetadata(\n              storageEvent.key,\n              storageEvent.newValue\n            );\n            if (mutationMetadata) {\n              return this.handleMutationBatchEvent(mutationMetadata);\n            }\n          }\n        } else if (this.queryTargetKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue !== null) {\n            const queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(\n              storageEvent.key,\n              storageEvent.newValue\n            );\n            if (queryTargetMetadata) {\n              return this.handleQueryTargetEvent(queryTargetMetadata);\n            }\n          }\n        } else if (storageEvent.key === this.onlineStateKey) {\n          if (storageEvent.newValue !== null) {\n            const onlineState = this.fromWebStorageOnlineState(\n              storageEvent.newValue\n            );\n            if (onlineState) {\n              return this.handleOnlineStateEvent(onlineState);\n            }\n          }\n        } else if (storageEvent.key === this.sequenceNumberKey) {\n          debugAssert(\n            !!this.sequenceNumberHandler,\n            'Missing sequenceNumberHandler'\n          );\n          const sequenceNumber = fromWebStorageSequenceNumber(\n            storageEvent.newValue\n          );\n          if (sequenceNumber !== ListenSequence.INVALID) {\n            this.sequenceNumberHandler!(sequenceNumber);\n          }\n        }\n      });\n    }\n  }\n\n  private get localClientState(): LocalClientState {\n    return this.activeClients.get(this.localClientId) as LocalClientState;\n  }\n\n  private persistClientState(): void {\n    this.setItem(\n      this.localClientStorageKey,\n      this.localClientState.toWebStorageJSON()\n    );\n  }\n\n  private persistMutationState(\n    batchId: BatchId,\n    state: MutationBatchState,\n    error?: FirestoreError\n  ): void {\n    const mutationState = new MutationMetadata(\n      this.currentUser,\n      batchId,\n      state,\n      error\n    );\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.setItem(mutationKey, mutationState.toWebStorageJSON());\n  }\n\n  private removeMutationState(batchId: BatchId): void {\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.removeItem(mutationKey);\n  }\n\n  private persistOnlineState(onlineState: OnlineState): void {\n    const entry: SharedOnlineStateSchema = {\n      clientId: this.localClientId,\n      onlineState\n    };\n    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));\n  }\n\n  private persistQueryTargetState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    const targetKey = createWebStorageQueryTargetMetadataKey(\n      this.persistenceKey,\n      targetId\n    );\n    const targetMetadata = new QueryTargetMetadata(targetId, state, error);\n    this.setItem(targetKey, targetMetadata.toWebStorageJSON());\n  }\n\n  /**\n   * Parses a client state key in WebStorage. Returns null if the key does not\n   * match the expected key format.\n   */\n  private fromWebStorageClientStateKey(key: string): ClientId | null {\n    const match = this.clientStateKeyRe.exec(key);\n    return match ? match[1] : null;\n  }\n\n  /**\n   * Parses a client state in WebStorage. Returns 'null' if the value could not\n   * be parsed.\n   */\n  private fromWebStorageClientState(\n    key: string,\n    value: string\n  ): RemoteClientState | null {\n    const clientId = this.fromWebStorageClientStateKey(key);\n    debugAssert(clientId !== null, `Cannot parse client state key '${key}'`);\n    return RemoteClientState.fromWebStorageEntry(clientId, value);\n  }\n\n  /**\n   * Parses a mutation batch state in WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageMutationMetadata(\n    key: string,\n    value: string\n  ): MutationMetadata | null {\n    const match = this.mutationBatchKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse mutation batch key '${key}'`);\n\n    const batchId = Number(match[1]);\n    const userId = match[2] !== undefined ? match[2] : null;\n    return MutationMetadata.fromWebStorageEntry(\n      new User(userId),\n      batchId,\n      value\n    );\n  }\n\n  /**\n   * Parses a query target state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageQueryTargetMetadata(\n    key: string,\n    value: string\n  ): QueryTargetMetadata | null {\n    const match = this.queryTargetKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse query target key '${key}'`);\n\n    const targetId = Number(match[1]);\n    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);\n  }\n\n  /**\n   * Parses an online state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageOnlineState(value: string): SharedOnlineState | null {\n    return SharedOnlineState.fromWebStorageEntry(value);\n  }\n\n  private async handleMutationBatchEvent(\n    mutationBatch: MutationMetadata\n  ): Promise<void> {\n    if (mutationBatch.user.uid !== this.currentUser.uid) {\n      logDebug(\n        LOG_TAG,\n        `Ignoring mutation for non-active user ${mutationBatch.user.uid}`\n      );\n      return;\n    }\n\n    return this.syncEngine!.applyBatchState(\n      mutationBatch.batchId,\n      mutationBatch.state,\n      mutationBatch.error\n    );\n  }\n\n  private handleQueryTargetEvent(\n    targetMetadata: QueryTargetMetadata\n  ): Promise<void> {\n    return this.syncEngine!.applyTargetState(\n      targetMetadata.targetId,\n      targetMetadata.state,\n      targetMetadata.error\n    );\n  }\n\n  private handleClientStateEvent(\n    clientId: ClientId,\n    clientState: RemoteClientState | null\n  ): Promise<void> {\n    const updatedClients = clientState\n      ? this.activeClients.insert(clientId, clientState)\n      : this.activeClients.remove(clientId);\n\n    const existingTargets = this.extractActiveQueryTargets(this.activeClients);\n    const newTargets = this.extractActiveQueryTargets(updatedClients);\n\n    const addedTargets: TargetId[] = [];\n    const removedTargets: TargetId[] = [];\n\n    newTargets.forEach(targetId => {\n      if (!existingTargets.has(targetId)) {\n        addedTargets.push(targetId);\n      }\n    });\n\n    existingTargets.forEach(targetId => {\n      if (!newTargets.has(targetId)) {\n        removedTargets.push(targetId);\n      }\n    });\n\n    return this.syncEngine!.applyActiveTargetsChange(\n      addedTargets,\n      removedTargets\n    ).then(() => {\n      this.activeClients = updatedClients;\n    });\n  }\n\n  private handleOnlineStateEvent(onlineState: SharedOnlineState): void {\n    // We check whether the client that wrote this online state is still active\n    // by comparing its client ID to the list of clients kept active in\n    // IndexedDb. If a client does not update their IndexedDb client state\n    // within 5 seconds, it is considered inactive and we don't emit an online\n    // state event.\n    if (this.activeClients.get(onlineState.clientId)) {\n      this.onlineStateHandler!(onlineState.onlineState);\n    }\n  }\n\n  private extractActiveQueryTargets(\n    clients: SortedMap<string, ClientState>\n  ): SortedSet<TargetId> {\n    let activeTargets = targetIdSet();\n    clients.forEach((kev, value) => {\n      activeTargets = activeTargets.unionWith(value.activeTargetIds);\n    });\n    return activeTargets;\n  }\n}\n\nfunction fromWebStorageSequenceNumber(\n  seqString: string | null\n): ListenSequenceNumber {\n  let sequenceNumber = ListenSequence.INVALID;\n  if (seqString != null) {\n    try {\n      const parsed = JSON.parse(seqString);\n      hardAssert(\n        typeof parsed === 'number',\n        'Found non-numeric sequence number'\n      );\n      sequenceNumber = parsed;\n    } catch (e) {\n      logError(LOG_TAG, 'Failed to read sequence number from WebStorage', e);\n    }\n  }\n  return sequenceNumber;\n}\n\n/**\n * `MemorySharedClientState` is a simple implementation of SharedClientState for\n * clients using memory persistence. The state in this class remains fully\n * isolated and no synchronization is performed.\n */\nexport class MemorySharedClientState implements SharedClientState {\n  private localState = new LocalClientState();\n  private queryState: { [targetId: number]: QueryTargetState } = {};\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  addPendingMutation(batchId: BatchId): void {\n    // No op.\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    // No op.\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    this.localState.addQueryTarget(targetId);\n    return this.queryState[targetId] || 'not-current';\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.queryState[targetId] = state;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localState.removeQueryTarget(targetId);\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    delete this.queryState[targetId];\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.localState.activeTargetIds;\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  start(): Promise<void> {\n    this.localState = new LocalClientState();\n    return Promise.resolve();\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    // No op.\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    // No op.\n  }\n\n  shutdown(): void {}\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryResult } from '../local/local_store';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { TargetChange } from '../remote/remote_event';\nimport { debugAssert, fail } from '../util/assert';\n\nimport {\n  hasLimitToFirst,\n  hasLimitToLast,\n  newQueryComparator,\n  Query,\n  queryMatches\n} from './query';\nimport { OnlineState } from './types';\nimport {\n  ChangeType,\n  DocumentChangeSet,\n  SyncState,\n  ViewSnapshot\n} from './view_snapshot';\n\nexport type LimboDocumentChange = AddedLimboDocument | RemovedLimboDocument;\nexport class AddedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\nexport class RemovedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\n\n/** The result of applying a set of doc changes to a view. */\nexport interface ViewDocumentChanges {\n  /** The new set of docs that should be in the view. */\n  documentSet: DocumentSet;\n  /** The diff of these docs with the previous set of docs. */\n  changeSet: DocumentChangeSet;\n  /**\n   * Whether the set of documents passed in was not sufficient to calculate the\n   * new state of the view and there needs to be another pass based on the\n   * local cache.\n   */\n  needsRefill: boolean;\n\n  mutatedKeys: DocumentKeySet;\n}\n\nexport interface ViewChange {\n  snapshot?: ViewSnapshot;\n  limboChanges: LimboDocumentChange[];\n}\n\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nexport class View {\n  private syncState: SyncState | null = null;\n  /**\n   * A flag whether the view is current with the backend. A view is considered\n   * current after it has seen the current flag from the backend and did not\n   * lose consistency within the watch stream (e.g. because of an existence\n   * filter mismatch).\n   */\n  private current = false;\n  private documentSet: DocumentSet;\n  /** Documents in the view but not in the remote target */\n  private limboDocuments = documentKeySet();\n  /** Document Keys that have local changes */\n  private mutatedKeys = documentKeySet();\n  /** Query comparator that defines the document order in this view. */\n  private docComparator: (d1: Document, d2: Document) => number;\n\n  constructor(\n    private query: Query,\n    /** Documents included in the remote target */\n    private _syncedDocuments: DocumentKeySet\n  ) {\n    this.docComparator = newQueryComparator(query);\n    this.documentSet = new DocumentSet(this.docComparator);\n  }\n\n  /**\n   * The set of remote documents that the server has told us belongs to the target associated with\n   * this view.\n   */\n  get syncedDocuments(): DocumentKeySet {\n    return this._syncedDocuments;\n  }\n\n  /**\n   * Iterates over a set of doc changes, applies the query limit, and computes\n   * what the new results should be, what the changes were, and whether we may\n   * need to go back to the local cache for more results. Does not make any\n   * changes to the view.\n   * @param docChanges The doc changes to apply to this view.\n   * @param previousChanges If this is being called with a refill, then start\n   *        with this set of docs and changes instead of the current view.\n   * @return a new set of docs, changes, and refill flag.\n   */\n  computeDocChanges(\n    docChanges: MaybeDocumentMap,\n    previousChanges?: ViewDocumentChanges\n  ): ViewDocumentChanges {\n    const changeSet = previousChanges\n      ? previousChanges.changeSet\n      : new DocumentChangeSet();\n    const oldDocumentSet = previousChanges\n      ? previousChanges.documentSet\n      : this.documentSet;\n    let newMutatedKeys = previousChanges\n      ? previousChanges.mutatedKeys\n      : this.mutatedKeys;\n    let newDocumentSet = oldDocumentSet;\n    let needsRefill = false;\n\n    // Track the last doc in a (full) limit. This is necessary, because some\n    // update (a delete, or an update moving a doc past the old limit) might\n    // mean there is some other document in the local cache that either should\n    // come (1) between the old last limit doc and the new last document, in the\n    // case of updates, or (2) after the new last document, in the case of\n    // deletes. So we keep this doc at the old limit to compare the updates to.\n    //\n    // Note that this should never get used in a refill (when previousChanges is\n    // set), because there will only be adds -- no deletes or updates.\n    const lastDocInLimit =\n      hasLimitToFirst(this.query) && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.last()\n        : null;\n    const firstDocInLimit =\n      hasLimitToLast(this.query) && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.first()\n        : null;\n\n    docChanges.inorderTraversal(\n      (key: DocumentKey, newMaybeDoc: MaybeDocument) => {\n        const oldDoc = oldDocumentSet.get(key);\n        let newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;\n        if (newDoc) {\n          debugAssert(\n            key.isEqual(newDoc.key),\n            'Mismatching keys found in document changes: ' +\n              key +\n              ' != ' +\n              newDoc.key\n          );\n          newDoc = queryMatches(this.query, newDoc) ? newDoc : null;\n        }\n\n        const oldDocHadPendingMutations = oldDoc\n          ? this.mutatedKeys.has(oldDoc.key)\n          : false;\n        const newDocHasPendingMutations = newDoc\n          ? newDoc.hasLocalMutations ||\n            // We only consider committed mutations for documents that were\n            // mutated during the lifetime of the view.\n            (this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations)\n          : false;\n\n        let changeApplied = false;\n\n        // Calculate change\n        if (oldDoc && newDoc) {\n          const docsEqual = oldDoc.data().isEqual(newDoc.data());\n          if (!docsEqual) {\n            if (!this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {\n              changeSet.track({\n                type: ChangeType.Modified,\n                doc: newDoc\n              });\n              changeApplied = true;\n\n              if (\n                (lastDocInLimit &&\n                  this.docComparator(newDoc, lastDocInLimit) > 0) ||\n                (firstDocInLimit &&\n                  this.docComparator(newDoc, firstDocInLimit) < 0)\n              ) {\n                // This doc moved from inside the limit to outside the limit.\n                // That means there may be some other doc in the local cache\n                // that should be included instead.\n                needsRefill = true;\n              }\n            }\n          } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {\n            changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n            changeApplied = true;\n          }\n        } else if (!oldDoc && newDoc) {\n          changeSet.track({ type: ChangeType.Added, doc: newDoc });\n          changeApplied = true;\n        } else if (oldDoc && !newDoc) {\n          changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n          changeApplied = true;\n\n          if (lastDocInLimit || firstDocInLimit) {\n            // A doc was removed from a full limit query. We'll need to\n            // requery from the local cache to see if we know about some other\n            // doc that should be in the results.\n            needsRefill = true;\n          }\n        }\n\n        if (changeApplied) {\n          if (newDoc) {\n            newDocumentSet = newDocumentSet.add(newDoc);\n            if (newDocHasPendingMutations) {\n              newMutatedKeys = newMutatedKeys.add(key);\n            } else {\n              newMutatedKeys = newMutatedKeys.delete(key);\n            }\n          } else {\n            newDocumentSet = newDocumentSet.delete(key);\n            newMutatedKeys = newMutatedKeys.delete(key);\n          }\n        }\n      }\n    );\n\n    // Drop documents out to meet limit/limitToLast requirement.\n    if (hasLimitToFirst(this.query) || hasLimitToLast(this.query)) {\n      while (newDocumentSet.size > this.query.limit!) {\n        const oldDoc = hasLimitToFirst(this.query)\n          ? newDocumentSet.last()\n          : newDocumentSet.first();\n        newDocumentSet = newDocumentSet.delete(oldDoc!.key);\n        newMutatedKeys = newMutatedKeys.delete(oldDoc!.key);\n        changeSet.track({ type: ChangeType.Removed, doc: oldDoc! });\n      }\n    }\n\n    debugAssert(\n      !needsRefill || !previousChanges,\n      'View was refilled using docs that themselves needed refilling.'\n    );\n    return {\n      documentSet: newDocumentSet,\n      changeSet,\n      needsRefill,\n      mutatedKeys: newMutatedKeys\n    };\n  }\n\n  private shouldWaitForSyncedDocument(\n    oldDoc: Document,\n    newDoc: Document\n  ): boolean {\n    // We suppress the initial change event for documents that were modified as\n    // part of a write acknowledgment (e.g. when the value of a server transform\n    // is applied) as Watch will send us the same document again.\n    // By suppressing the event, we only raise two user visible events (one with\n    // `hasPendingWrites` and the final state of the document) instead of three\n    // (one with `hasPendingWrites`, the modified document with\n    // `hasPendingWrites` and the final state of the document).\n    return (\n      oldDoc.hasLocalMutations &&\n      newDoc.hasCommittedMutations &&\n      !newDoc.hasLocalMutations\n    );\n  }\n\n  /**\n   * Updates the view with the given ViewDocumentChanges and optionally updates\n   * limbo docs and sync state from the provided target change.\n   * @param docChanges The set of changes to make to the view's docs.\n   * @param updateLimboDocuments Whether to update limbo documents based on this\n   *        change.\n   * @param targetChange A target change to apply for computing limbo docs and\n   *        sync state.\n   * @return A new ViewChange with the given docs, changes, and sync state.\n   */\n  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.\n  applyChanges(\n    docChanges: ViewDocumentChanges,\n    updateLimboDocuments: boolean,\n    targetChange?: TargetChange\n  ): ViewChange {\n    debugAssert(\n      !docChanges.needsRefill,\n      'Cannot apply changes that need a refill'\n    );\n    const oldDocs = this.documentSet;\n    this.documentSet = docChanges.documentSet;\n    this.mutatedKeys = docChanges.mutatedKeys;\n    // Sort changes based on type and query comparator\n    const changes = docChanges.changeSet.getChanges();\n    changes.sort((c1, c2) => {\n      return (\n        compareChangeType(c1.type, c2.type) ||\n        this.docComparator(c1.doc, c2.doc)\n      );\n    });\n\n    this.applyTargetChange(targetChange);\n    const limboChanges = updateLimboDocuments\n      ? this.updateLimboDocuments()\n      : [];\n    const synced = this.limboDocuments.size === 0 && this.current;\n    const newSyncState = synced ? SyncState.Synced : SyncState.Local;\n    const syncStateChanged = newSyncState !== this.syncState;\n    this.syncState = newSyncState;\n\n    if (changes.length === 0 && !syncStateChanged) {\n      // no changes\n      return { limboChanges };\n    } else {\n      const snap: ViewSnapshot = new ViewSnapshot(\n        this.query,\n        docChanges.documentSet,\n        oldDocs,\n        changes,\n        docChanges.mutatedKeys,\n        newSyncState === SyncState.Local,\n        syncStateChanged,\n        /* excludesMetadataChanges= */ false\n      );\n      return {\n        snapshot: snap,\n        limboChanges\n      };\n    }\n  }\n\n  /**\n   * Applies an OnlineState change to the view, potentially generating a\n   * ViewChange if the view's syncState changes as a result.\n   */\n  applyOnlineStateChange(onlineState: OnlineState): ViewChange {\n    if (this.current && onlineState === OnlineState.Offline) {\n      // If we're offline, set `current` to false and then call applyChanges()\n      // to refresh our syncState and generate a ViewChange as appropriate. We\n      // are guaranteed to get a new TargetChange that sets `current` back to\n      // true once the client is back online.\n      this.current = false;\n      return this.applyChanges(\n        {\n          documentSet: this.documentSet,\n          changeSet: new DocumentChangeSet(),\n          mutatedKeys: this.mutatedKeys,\n          needsRefill: false\n        },\n        /* updateLimboDocuments= */ false\n      );\n    } else {\n      // No effect, just return a no-op ViewChange.\n      return { limboChanges: [] };\n    }\n  }\n\n  /**\n   * Returns whether the doc for the given key should be in limbo.\n   */\n  private shouldBeInLimbo(key: DocumentKey): boolean {\n    // If the remote end says it's part of this query, it's not in limbo.\n    if (this._syncedDocuments.has(key)) {\n      return false;\n    }\n    // The local store doesn't think it's a result, so it shouldn't be in limbo.\n    if (!this.documentSet.has(key)) {\n      return false;\n    }\n    // If there are local changes to the doc, they might explain why the server\n    // doesn't know that it's part of the query. So don't put it in limbo.\n    // TODO(klimt): Ideally, we would only consider changes that might actually\n    // affect this specific query.\n    if (this.documentSet.get(key)!.hasLocalMutations) {\n      return false;\n    }\n    // Everything else is in limbo.\n    return true;\n  }\n\n  /**\n   * Updates syncedDocuments, current, and limbo docs based on the given change.\n   * Returns the list of changes to which docs are in limbo.\n   */\n  private applyTargetChange(targetChange?: TargetChange): void {\n    if (targetChange) {\n      targetChange.addedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.add(key))\n      );\n      targetChange.modifiedDocuments.forEach(key => {\n        debugAssert(\n          this._syncedDocuments.has(key),\n          `Modified document ${key} not found in view.`\n        );\n      });\n      targetChange.removedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.delete(key))\n      );\n      this.current = targetChange.current;\n    }\n  }\n\n  private updateLimboDocuments(): LimboDocumentChange[] {\n    // We can only determine limbo documents when we're in-sync with the server.\n    if (!this.current) {\n      return [];\n    }\n\n    // TODO(klimt): Do this incrementally so that it's not quadratic when\n    // updating many documents.\n    const oldLimboDocuments = this.limboDocuments;\n    this.limboDocuments = documentKeySet();\n    this.documentSet.forEach(doc => {\n      if (this.shouldBeInLimbo(doc.key)) {\n        this.limboDocuments = this.limboDocuments.add(doc.key);\n      }\n    });\n\n    // Diff the new limbo docs with the old limbo docs.\n    const changes: LimboDocumentChange[] = [];\n    oldLimboDocuments.forEach(key => {\n      if (!this.limboDocuments.has(key)) {\n        changes.push(new RemovedLimboDocument(key));\n      }\n    });\n    this.limboDocuments.forEach(key => {\n      if (!oldLimboDocuments.has(key)) {\n        changes.push(new AddedLimboDocument(key));\n      }\n    });\n    return changes;\n  }\n\n  /**\n   * Update the in-memory state of the current view with the state read from\n   * persistence.\n   *\n   * We update the query view whenever a client's primary status changes:\n   * - When a client transitions from primary to secondary, it can miss\n   *   LocalStorage updates and its query views may temporarily not be\n   *   synchronized with the state on disk.\n   * - For secondary to primary transitions, the client needs to update the list\n   *   of `syncedDocuments` since secondary clients update their query views\n   *   based purely on synthesized RemoteEvents.\n   *\n   * @param queryResult.documents - The documents that match the query according\n   * to the LocalStore.\n   * @param queryResult.remoteKeys - The keys of the documents that match the\n   * query according to the backend.\n   *\n   * @return The ViewChange that resulted from this synchronization.\n   */\n  // PORTING NOTE: Multi-tab only.\n  synchronizeWithPersistedState(queryResult: QueryResult): ViewChange {\n    this._syncedDocuments = queryResult.remoteKeys;\n    this.limboDocuments = documentKeySet();\n    const docChanges = this.computeDocChanges(queryResult.documents);\n    return this.applyChanges(docChanges, /*updateLimboDocuments=*/ true);\n  }\n\n  /**\n   * Returns a view snapshot as if this query was just listened to. Contains\n   * a document add for every existing document and the `fromCache` and\n   * `hasPendingWrites` status of the already established view.\n   */\n  // PORTING NOTE: Multi-tab only.\n  computeInitialSnapshot(): ViewSnapshot {\n    return ViewSnapshot.fromInitialDocuments(\n      this.query,\n      this.documentSet,\n      this.mutatedKeys,\n      this.syncState === SyncState.Local\n    );\n  }\n}\n\nfunction compareChangeType(c1: ChangeType, c2: ChangeType): number {\n  const order = (change: ChangeType): 0 | 1 | 2 => {\n    switch (change) {\n      case ChangeType.Added:\n        return 1;\n      case ChangeType.Modified:\n        return 2;\n      case ChangeType.Metadata:\n        // A metadata change is converted to a modified change at the public\n        // api layer.  Since we sort by document key and then change type,\n        // metadata and modified changes must be sorted equivalently.\n        return 2;\n      case ChangeType.Removed:\n        return 0;\n      default:\n        return fail('Unknown ChangeType: ' + change);\n    }\n  };\n\n  return order(c1) - order(c2);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport {\n  getNewDocumentChanges,\n  getCachedTarget,\n  ignoreIfPrimaryLeaseLoss,\n  LocalStore,\n  getActiveClientsFromPersistence,\n  lookupMutationDocuments,\n  removeCachedMutationBatchMetadata,\n  allocateTarget,\n  executeQuery,\n  releaseTarget,\n  applyRemoteEventToLocalCache,\n  rejectBatch,\n  handleUserChange,\n  localWrite,\n  acknowledgeBatch,\n  getHighestUnacknowledgedBatchId,\n  notifyLocalViewChanges\n} from '../local/local_store';\nimport { LocalViewChanges } from '../local/local_view_changes';\nimport { ReferenceSet } from '../local/reference_set';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { BATCHID_UNKNOWN, MutationBatchResult } from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport {\n  canUseNetwork,\n  fillWritePipeline,\n  RemoteStore,\n  remoteStoreApplyPrimaryState,\n  remoteStoreListen,\n  remoteStoreUnlisten\n} from '../remote/remote_store';\nimport { debugAssert, debugCast, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { Deferred } from '../util/promise';\nimport { SortedMap } from '../util/sorted_map';\nimport { ClientId, SharedClientState } from '../local/shared_client_state';\nimport { QueryTargetState } from '../local/shared_client_state_syncer';\nimport { SortedSet } from '../util/sorted_set';\nimport { ListenSequence } from './listen_sequence';\nimport {\n  canonifyQuery,\n  LimitType,\n  newQuery,\n  newQueryForPath,\n  Query,\n  queryEquals,\n  queryToTarget,\n  stringifyQuery\n} from './query';\nimport { SnapshotVersion } from './snapshot_version';\nimport { Target } from './target';\nimport { TargetIdGenerator } from './target_id_generator';\nimport {\n  BatchId,\n  MutationBatchState,\n  OnlineState,\n  OnlineStateSource,\n  TargetId\n} from './types';\nimport {\n  AddedLimboDocument,\n  LimboDocumentChange,\n  RemovedLimboDocument,\n  View,\n  ViewChange\n} from './view';\nimport { ViewSnapshot } from './view_snapshot';\nimport { wrapInUserErrorIfRecoverable } from '../util/async_queue';\nimport {\n  EventManager,\n  eventManagerOnOnlineStateChange,\n  eventManagerOnWatchChange,\n  eventManagerOnWatchError\n} from './event_manager';\n\nconst LOG_TAG = 'SyncEngine';\n\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nclass QueryView {\n  constructor(\n    /**\n     * The query itself.\n     */\n    public query: Query,\n    /**\n     * The target number created by the client that is used in the watch\n     * stream to identify this query.\n     */\n    public targetId: TargetId,\n    /**\n     * The view is responsible for computing the final merged truth of what\n     * docs are in the query. It gets notified of local and remote changes,\n     * and applies the query filters and limits to determine the most correct\n     * possible results.\n     */\n    public view: View\n  ) {}\n}\n\n/** Tracks a limbo resolution. */\nclass LimboResolution {\n  constructor(public key: DocumentKey) {}\n\n  /**\n   * Set to true once we've received a document. This is used in\n   * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to\n   * decide whether it needs to manufacture a delete event for the target once\n   * the target is CURRENT.\n   */\n  receivedDocument: boolean = false;\n}\n\n/**\n * A function that updates a QueryView with a set of document changes (and a\n * remote event if applicable).\n */\ntype ApplyDocChangesHandler = (\n  queryView: QueryView,\n  changes: MaybeDocumentMap,\n  remoteEvent?: RemoteEvent\n) => Promise<ViewSnapshot | undefined>;\n\n/**\n * Callbacks implemented by EventManager to handle notifications from\n * SyncEngine.\n */\ninterface SyncEngineListener {\n  /** Handles new view snapshots. */\n  onWatchChange?(snapshots: ViewSnapshot[]): void;\n\n  /** Handles the failure of a query. */\n  onWatchError?(query: Query, error: FirestoreError): void;\n}\n\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n *\n * PORTING NOTE: On Web, SyncEngine does not have an explicit subscribe()\n * function. Instead, it directly depends on EventManager's tree-shakeable API\n * (via `ensureWatchStream()`).\n */\nexport interface SyncEngine {\n  isPrimaryClient: boolean;\n}\n\n/**\n * An implementation of `SyncEngine` coordinating with other parts of SDK.\n *\n * The parts of SyncEngine that act as a callback to RemoteStore need to be\n * registered individually. This is done in `syncEngineWrite()` and\n * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods\n * serve as entry points to RemoteStore's functionality.\n *\n * Note: some field defined in this class might have public access level, but\n * the class is not exported so they are only accessible from this module.\n * This is useful to implement optional features (like bundles) in free\n * functions, such that they are tree-shakeable.\n */\nclass SyncEngineImpl implements SyncEngine {\n  syncEngineListener: SyncEngineListener = {};\n\n  /**\n   * A callback that updates the QueryView based on the provided change.\n   *\n   * PORTING NOTE: On other platforms, this logic lives in\n   * `emitNewSnapshotsAndNotifyLocalStore()`, but on Web it is extracted to\n   *  ensure that all view logic only exists in bundles that include views.\n   */\n  applyDocChanges?: ApplyDocChangesHandler;\n\n  queryViewsByQuery = new ObjectMap<Query, QueryView>(\n    q => canonifyQuery(q),\n    queryEquals\n  );\n  queriesByTarget = new Map<TargetId, Query[]>();\n  /**\n   * The keys of documents that are in limbo for which we haven't yet started a\n   * limbo resolution query.\n   */\n  enqueuedLimboResolutions: DocumentKey[] = [];\n  /**\n   * Keeps track of the target ID for each document that is in limbo with an\n   * active target.\n   */\n  activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n    DocumentKey.comparator\n  );\n  /**\n   * Keeps track of the information about an active limbo resolution for each\n   * active target ID that was started for the purpose of limbo resolution.\n   */\n  activeLimboResolutionsByTarget = new Map<TargetId, LimboResolution>();\n  limboDocumentRefs = new ReferenceSet();\n  /** Stores user completion handlers, indexed by User and BatchId. */\n  mutationUserCallbacks = {} as {\n    [uidKey: string]: SortedMap<BatchId, Deferred<void>>;\n  };\n  /** Stores user callbacks waiting for all pending writes to be acknowledged. */\n  pendingWritesCallbacks = new Map<BatchId, Array<Deferred<void>>>();\n  limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();\n\n  onlineState = OnlineState.Unknown;\n\n  // The primary state is set to `true` or `false` immediately after Firestore\n  // startup. In the interim, a client should only be considered primary if\n  // `isPrimary` is true.\n  _isPrimaryClient: undefined | boolean = undefined;\n\n  constructor(\n    readonly localStore: LocalStore,\n    readonly remoteStore: RemoteStore,\n    readonly eventManager: EventManager,\n    // PORTING NOTE: Manages state synchronization in multi-tab environments.\n    readonly sharedClientState: SharedClientState,\n    public currentUser: User,\n    readonly maxConcurrentLimboResolutions: number\n  ) {}\n\n  get isPrimaryClient(): boolean {\n    return this._isPrimaryClient === true;\n  }\n}\n\nexport function newSyncEngine(\n  localStore: LocalStore,\n  remoteStore: RemoteStore,\n  eventManager: EventManager,\n  // PORTING NOTE: Manages state synchronization in multi-tab environments.\n  sharedClientState: SharedClientState,\n  currentUser: User,\n  maxConcurrentLimboResolutions: number,\n  isPrimary: boolean\n): SyncEngine {\n  const syncEngine = new SyncEngineImpl(\n    localStore,\n    remoteStore,\n    eventManager,\n    sharedClientState,\n    currentUser,\n    maxConcurrentLimboResolutions\n  );\n  if (isPrimary) {\n    syncEngine._isPrimaryClient = true;\n  }\n  return syncEngine;\n}\n\n/**\n * Initiates the new listen, resolves promise when listen enqueued to the\n * server. All the subsequent view snapshots or errors are sent to the\n * subscribed handlers. Returns the initial snapshot.\n */\nexport async function syncEngineListen(\n  syncEngine: SyncEngine,\n  query: Query\n): Promise<ViewSnapshot> {\n  const syncEngineImpl = ensureWatchCallbacks(syncEngine);\n\n  let targetId;\n  let viewSnapshot;\n\n  const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n  if (queryView) {\n    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view\n    // already exists when EventManager calls us for the first time. This\n    // happens when the primary tab is already listening to this query on\n    // behalf of another tab and the user of the primary also starts listening\n    // to the query. EventManager will not have an assigned target ID in this\n    // case and calls `listen` to obtain this ID.\n    targetId = queryView.targetId;\n    syncEngineImpl.sharedClientState.addLocalQueryTarget(targetId);\n    viewSnapshot = queryView.view.computeInitialSnapshot();\n  } else {\n    const targetData = await allocateTarget(\n      syncEngineImpl.localStore,\n      queryToTarget(query)\n    );\n\n    const status = syncEngineImpl.sharedClientState.addLocalQueryTarget(\n      targetData.targetId\n    );\n    targetId = targetData.targetId;\n    viewSnapshot = await initializeViewAndComputeSnapshot(\n      syncEngineImpl,\n      query,\n      targetId,\n      status === 'current'\n    );\n    if (syncEngineImpl.isPrimaryClient) {\n      remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n    }\n  }\n\n  return viewSnapshot;\n}\n\n/**\n * Registers a view for a previously unknown query and computes its initial\n * snapshot.\n */\nasync function initializeViewAndComputeSnapshot(\n  syncEngineImpl: SyncEngineImpl,\n  query: Query,\n  targetId: TargetId,\n  current: boolean\n): Promise<ViewSnapshot> {\n  // PORTING NOTE: On Web only, we inject the code that registers new Limbo\n  // targets based on view changes. This allows us to only depend on Limbo\n  // changes when user code includes queries.\n  syncEngineImpl.applyDocChanges = (queryView, changes, remoteEvent) =>\n    applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent);\n\n  const queryResult = await executeQuery(\n    syncEngineImpl.localStore,\n    query,\n    /* usePreviousResults= */ true\n  );\n  const view = new View(query, queryResult.remoteKeys);\n  const viewDocChanges = view.computeDocChanges(queryResult.documents);\n  const synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(\n    targetId,\n    current && syncEngineImpl.onlineState !== OnlineState.Offline\n  );\n  const viewChange = view.applyChanges(\n    viewDocChanges,\n    /* updateLimboDocuments= */ syncEngineImpl.isPrimaryClient,\n    synthesizedTargetChange\n  );\n  updateTrackedLimbos(syncEngineImpl, targetId, viewChange.limboChanges);\n\n  debugAssert(\n    !!viewChange.snapshot,\n    'applyChanges for new view should always return a snapshot'\n  );\n\n  const data = new QueryView(query, targetId, view);\n\n  syncEngineImpl.queryViewsByQuery.set(query, data);\n  if (syncEngineImpl.queriesByTarget.has(targetId)) {\n    syncEngineImpl.queriesByTarget.get(targetId)!.push(query);\n  } else {\n    syncEngineImpl.queriesByTarget.set(targetId, [query]);\n  }\n\n  return viewChange.snapshot;\n}\n\n/** Stops listening to the query. */\nexport async function syncEngineUnlisten(\n  syncEngine: SyncEngine,\n  query: Query\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  const queryView = syncEngineImpl.queryViewsByQuery.get(query)!;\n  debugAssert(\n    !!queryView,\n    'Trying to unlisten on query not found:' + stringifyQuery(query)\n  );\n\n  // Only clean up the query view and target if this is the only query mapped\n  // to the target.\n  const queries = syncEngineImpl.queriesByTarget.get(queryView.targetId)!;\n  if (queries.length > 1) {\n    syncEngineImpl.queriesByTarget.set(\n      queryView.targetId,\n      queries.filter(q => !queryEquals(q, query))\n    );\n    syncEngineImpl.queryViewsByQuery.delete(query);\n    return;\n  }\n\n  // No other queries are mapped to the target, clean up the query and the target.\n  if (syncEngineImpl.isPrimaryClient) {\n    // We need to remove the local query target first to allow us to verify\n    // whether any other client is still interested in this target.\n    syncEngineImpl.sharedClientState.removeLocalQueryTarget(queryView.targetId);\n    const targetRemainsActive = syncEngineImpl.sharedClientState.isActiveQueryTarget(\n      queryView.targetId\n    );\n\n    if (!targetRemainsActive) {\n      await releaseTarget(\n        syncEngineImpl.localStore,\n        queryView.targetId,\n        /*keepPersistedTargetData=*/ false\n      )\n        .then(() => {\n          syncEngineImpl.sharedClientState.clearQueryState(queryView.targetId);\n          remoteStoreUnlisten(syncEngineImpl.remoteStore, queryView.targetId);\n          removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\n        })\n        .catch(ignoreIfPrimaryLeaseLoss);\n    }\n  } else {\n    removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\n    await releaseTarget(\n      syncEngineImpl.localStore,\n      queryView.targetId,\n      /*keepPersistedTargetData=*/ true\n    );\n  }\n}\n\n/**\n * Initiates the write of local mutation batch which involves adding the\n * writes to the mutation queue, notifying the remote store about new\n * mutations and raising events for any changes this write caused.\n *\n * The promise returned by this call is resolved when the above steps\n * have completed, *not* when the write was acked by the backend. The\n * userCallback is resolved once the write was acked/rejected by the\n * backend (or failed locally for any other reason).\n */\nexport async function syncEngineWrite(\n  syncEngine: SyncEngine,\n  batch: Mutation[],\n  userCallback: Deferred<void>\n): Promise<void> {\n  const syncEngineImpl = ensureWriteCallbacks(syncEngine);\n\n  try {\n    const result = await localWrite(syncEngineImpl.localStore, batch);\n    syncEngineImpl.sharedClientState.addPendingMutation(result.batchId);\n    addMutationCallback(syncEngineImpl, result.batchId, userCallback);\n    await emitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.changes);\n    await fillWritePipeline(syncEngineImpl.remoteStore);\n  } catch (e) {\n    // If we can't persist the mutation, we reject the user callback and\n    // don't send the mutation. The user can then retry the write.\n    const error = wrapInUserErrorIfRecoverable(e, `Failed to persist write`);\n    userCallback.reject(error);\n  }\n}\n\n/**\n * Applies one remote event to the sync engine, notifying any views of the\n * changes, and releasing any pending mutation batches that would become\n * visible because of the snapshot version the remote event contains.\n */\nexport async function applyRemoteEvent(\n  syncEngine: SyncEngine,\n  remoteEvent: RemoteEvent\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n\n  try {\n    const changes = await applyRemoteEventToLocalCache(\n      syncEngineImpl.localStore,\n      remoteEvent\n    );\n    // Update `receivedDocument` as appropriate for any limbo targets.\n    remoteEvent.targetChanges.forEach((targetChange, targetId) => {\n      const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(\n        targetId\n      );\n      if (limboResolution) {\n        // Since this is a limbo resolution lookup, it's for a single document\n        // and it could be added, modified, or removed, but not a combination.\n        hardAssert(\n          targetChange.addedDocuments.size +\n            targetChange.modifiedDocuments.size +\n            targetChange.removedDocuments.size <=\n            1,\n          'Limbo resolution for single document contains multiple changes.'\n        );\n        if (targetChange.addedDocuments.size > 0) {\n          limboResolution.receivedDocument = true;\n        } else if (targetChange.modifiedDocuments.size > 0) {\n          hardAssert(\n            limboResolution.receivedDocument,\n            'Received change for limbo target document without add.'\n          );\n        } else if (targetChange.removedDocuments.size > 0) {\n          hardAssert(\n            limboResolution.receivedDocument,\n            'Received remove for limbo target document without add.'\n          );\n          limboResolution.receivedDocument = false;\n        } else {\n          // This was probably just a CURRENT targetChange or similar.\n        }\n      }\n    });\n    await emitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, remoteEvent);\n  } catch (error) {\n    await ignoreIfPrimaryLeaseLoss(error);\n  }\n}\n\n/**\n * Applies an OnlineState change to the sync engine and notifies any views of\n * the change.\n */\nexport function applyOnlineStateChange(\n  syncEngine: SyncEngine,\n  onlineState: OnlineState,\n  source: OnlineStateSource\n): void {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  // If we are the secondary client, we explicitly ignore the remote store's\n  // online state (the local client may go offline, even though the primary\n  // tab remains online) and only apply the primary tab's online state from\n  // SharedClientState.\n  if (\n    (syncEngineImpl.isPrimaryClient &&\n      source === OnlineStateSource.RemoteStore) ||\n    (!syncEngineImpl.isPrimaryClient &&\n      source === OnlineStateSource.SharedClientState)\n  ) {\n    const newViewSnapshots = [] as ViewSnapshot[];\n    syncEngineImpl.queryViewsByQuery.forEach((query, queryView) => {\n      const viewChange = queryView.view.applyOnlineStateChange(onlineState);\n      debugAssert(\n        viewChange.limboChanges.length === 0,\n        'OnlineState should not affect limbo documents.'\n      );\n      if (viewChange.snapshot) {\n        newViewSnapshots.push(viewChange.snapshot);\n      }\n    });\n\n    eventManagerOnOnlineStateChange(syncEngineImpl.eventManager, onlineState);\n\n    if (newViewSnapshots.length) {\n      debugAssert(\n        !!syncEngineImpl.syncEngineListener.onWatchChange,\n        'Active views but EventManager callbacks are not assigned'\n      );\n      syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);\n    }\n\n    syncEngineImpl.onlineState = onlineState;\n    if (syncEngineImpl.isPrimaryClient) {\n      syncEngineImpl.sharedClientState.setOnlineState(onlineState);\n    }\n  }\n}\n\n/**\n * Rejects the listen for the given targetID. This can be triggered by the\n * backend for any active target.\n *\n * @param syncEngine The sync engine implementation.\n * @param targetId The targetID corresponds to one previously initiated by the\n * user as part of TargetData passed to listen() on RemoteStore.\n * @param err A description of the condition that has forced the rejection.\n * Nearly always this will be an indication that the user is no longer\n * authorized to see the data matching the target.\n */\nexport async function rejectListen(\n  syncEngine: SyncEngine,\n  targetId: TargetId,\n  err: FirestoreError\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n\n  // PORTING NOTE: Multi-tab only.\n  syncEngineImpl.sharedClientState.updateQueryState(targetId, 'rejected', err);\n\n  const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(\n    targetId\n  );\n  const limboKey = limboResolution && limboResolution.key;\n  if (limboKey) {\n    // TODO(klimt): We really only should do the following on permission\n    // denied errors, but we don't have the cause code here.\n\n    // It's a limbo doc. Create a synthetic event saying it was deleted.\n    // This is kind of a hack. Ideally, we would have a method in the local\n    // store to purge a document. However, it would be tricky to keep all of\n    // the local store's invariants with another method.\n    let documentUpdates = new SortedMap<DocumentKey, MaybeDocument>(\n      DocumentKey.comparator\n    );\n    documentUpdates = documentUpdates.insert(\n      limboKey,\n      new NoDocument(limboKey, SnapshotVersion.min())\n    );\n    const resolvedLimboDocuments = documentKeySet().add(limboKey);\n    const event = new RemoteEvent(\n      SnapshotVersion.min(),\n      /* targetChanges= */ new Map<TargetId, TargetChange>(),\n      /* targetMismatches= */ new SortedSet<TargetId>(primitiveComparator),\n      documentUpdates,\n      resolvedLimboDocuments\n    );\n\n    await applyRemoteEvent(syncEngineImpl, event);\n\n    // Since this query failed, we won't want to manually unlisten to it.\n    // We only remove it from bookkeeping after we successfully applied the\n    // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to\n    // this query when the RemoteStore restarts the Watch stream, which should\n    // re-trigger the target failure.\n    syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(\n      limboKey\n    );\n    syncEngineImpl.activeLimboResolutionsByTarget.delete(targetId);\n    pumpEnqueuedLimboResolutions(syncEngineImpl);\n  } else {\n    await releaseTarget(\n      syncEngineImpl.localStore,\n      targetId,\n      /* keepPersistedTargetData */ false\n    )\n      .then(() => removeAndCleanupTarget(syncEngineImpl, targetId, err))\n      .catch(ignoreIfPrimaryLeaseLoss);\n  }\n}\n\nexport async function applySuccessfulWrite(\n  syncEngine: SyncEngine,\n  mutationBatchResult: MutationBatchResult\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  const batchId = mutationBatchResult.batch.batchId;\n\n  try {\n    const changes = await acknowledgeBatch(\n      syncEngineImpl.localStore,\n      mutationBatchResult\n    );\n\n    // The local store may or may not be able to apply the write result and\n    // raise events immediately (depending on whether the watcher is caught\n    // up), so we raise user callbacks first so that they consistently happen\n    // before listen events.\n    processUserCallback(syncEngineImpl, batchId, /*error=*/ null);\n    triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n\n    syncEngineImpl.sharedClientState.updateMutationState(\n      batchId,\n      'acknowledged'\n    );\n    await emitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes);\n  } catch (error) {\n    await ignoreIfPrimaryLeaseLoss(error);\n  }\n}\n\nexport async function rejectFailedWrite(\n  syncEngine: SyncEngine,\n  batchId: BatchId,\n  error: FirestoreError\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n\n  try {\n    const changes = await rejectBatch(syncEngineImpl.localStore, batchId);\n\n    // The local store may or may not be able to apply the write result and\n    // raise events immediately (depending on whether the watcher is caught up),\n    // so we raise user callbacks first so that they consistently happen before\n    // listen events.\n    processUserCallback(syncEngineImpl, batchId, error);\n    triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n\n    syncEngineImpl.sharedClientState.updateMutationState(\n      batchId,\n      'rejected',\n      error\n    );\n    await emitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes);\n  } catch (error) {\n    await ignoreIfPrimaryLeaseLoss(error);\n  }\n}\n\n/**\n * Registers a user callback that resolves when all pending mutations at the moment of calling\n * are acknowledged .\n */\nexport async function registerPendingWritesCallback(\n  syncEngine: SyncEngine,\n  callback: Deferred<void>\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  if (!canUseNetwork(syncEngineImpl.remoteStore)) {\n    logDebug(\n      LOG_TAG,\n      'The network is disabled. The task returned by ' +\n        \"'awaitPendingWrites()' will not complete until the network is enabled.\"\n    );\n  }\n\n  try {\n    const highestBatchId = await getHighestUnacknowledgedBatchId(\n      syncEngineImpl.localStore\n    );\n    if (highestBatchId === BATCHID_UNKNOWN) {\n      // Trigger the callback right away if there is no pending writes at the moment.\n      callback.resolve();\n      return;\n    }\n\n    const callbacks =\n      syncEngineImpl.pendingWritesCallbacks.get(highestBatchId) || [];\n    callbacks.push(callback);\n    syncEngineImpl.pendingWritesCallbacks.set(highestBatchId, callbacks);\n  } catch (e) {\n    const firestoreError = wrapInUserErrorIfRecoverable(\n      e,\n      'Initialization of waitForPendingWrites() operation failed'\n    );\n    callback.reject(firestoreError);\n  }\n}\n\n/**\n * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,\n * if there are any.\n */\nfunction triggerPendingWritesCallbacks(\n  syncEngineImpl: SyncEngineImpl,\n  batchId: BatchId\n): void {\n  (syncEngineImpl.pendingWritesCallbacks.get(batchId) || []).forEach(\n    callback => {\n      callback.resolve();\n    }\n  );\n\n  syncEngineImpl.pendingWritesCallbacks.delete(batchId);\n}\n\n/** Reject all outstanding callbacks waiting for pending writes to complete. */\nfunction rejectOutstandingPendingWritesCallbacks(\n  syncEngineImpl: SyncEngineImpl,\n  errorMessage: string\n): void {\n  syncEngineImpl.pendingWritesCallbacks.forEach(callbacks => {\n    callbacks.forEach(callback => {\n      callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));\n    });\n  });\n\n  syncEngineImpl.pendingWritesCallbacks.clear();\n}\n\nfunction addMutationCallback(\n  syncEngineImpl: SyncEngineImpl,\n  batchId: BatchId,\n  callback: Deferred<void>\n): void {\n  let newCallbacks =\n    syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];\n  if (!newCallbacks) {\n    newCallbacks = new SortedMap<BatchId, Deferred<void>>(primitiveComparator);\n  }\n  newCallbacks = newCallbacks.insert(batchId, callback);\n  syncEngineImpl.mutationUserCallbacks[\n    syncEngineImpl.currentUser.toKey()\n  ] = newCallbacks;\n}\n\n/**\n * Resolves or rejects the user callback for the given batch and then discards\n * it.\n */\nexport function processUserCallback(\n  syncEngine: SyncEngine,\n  batchId: BatchId,\n  error: FirestoreError | null\n): void {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  let newCallbacks =\n    syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];\n\n  // NOTE: Mutations restored from persistence won't have callbacks, so it's\n  // okay for there to be no callback for this ID.\n  if (newCallbacks) {\n    const callback = newCallbacks.get(batchId);\n    if (callback) {\n      debugAssert(\n        batchId === newCallbacks.minKey(),\n        'Mutation callbacks processed out-of-order?'\n      );\n      if (error) {\n        callback.reject(error);\n      } else {\n        callback.resolve();\n      }\n      newCallbacks = newCallbacks.remove(batchId);\n    }\n    syncEngineImpl.mutationUserCallbacks[\n      syncEngineImpl.currentUser.toKey()\n    ] = newCallbacks;\n  }\n}\n\nfunction removeAndCleanupTarget(\n  syncEngineImpl: SyncEngineImpl,\n  targetId: number,\n  error: FirestoreError | null = null\n): void {\n  syncEngineImpl.sharedClientState.removeLocalQueryTarget(targetId);\n\n  debugAssert(\n    syncEngineImpl.queriesByTarget.has(targetId) &&\n      syncEngineImpl.queriesByTarget.get(targetId)!.length !== 0,\n    `There are no queries mapped to target id ${targetId}`\n  );\n\n  for (const query of syncEngineImpl.queriesByTarget.get(targetId)!) {\n    syncEngineImpl.queryViewsByQuery.delete(query);\n    if (error) {\n      syncEngineImpl.syncEngineListener.onWatchError!(query, error);\n    }\n  }\n\n  syncEngineImpl.queriesByTarget.delete(targetId);\n\n  if (syncEngineImpl.isPrimaryClient) {\n    const limboKeys = syncEngineImpl.limboDocumentRefs.removeReferencesForId(\n      targetId\n    );\n    limboKeys.forEach(limboKey => {\n      const isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(\n        limboKey\n      );\n      if (!isReferenced) {\n        // We removed the last reference for this key\n        removeLimboTarget(syncEngineImpl, limboKey);\n      }\n    });\n  }\n}\n\nfunction removeLimboTarget(\n  syncEngineImpl: SyncEngineImpl,\n  key: DocumentKey\n): void {\n  // It's possible that the target already got removed because the query failed. In that case,\n  // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.\n  const limboTargetId = syncEngineImpl.activeLimboTargetsByKey.get(key);\n  if (limboTargetId === null) {\n    // This target already got removed, because the query failed.\n    return;\n  }\n\n  remoteStoreUnlisten(syncEngineImpl.remoteStore, limboTargetId);\n  syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(\n    key\n  );\n  syncEngineImpl.activeLimboResolutionsByTarget.delete(limboTargetId);\n  pumpEnqueuedLimboResolutions(syncEngineImpl);\n}\n\nfunction updateTrackedLimbos(\n  syncEngineImpl: SyncEngineImpl,\n  targetId: TargetId,\n  limboChanges: LimboDocumentChange[]\n): void {\n  for (const limboChange of limboChanges) {\n    if (limboChange instanceof AddedLimboDocument) {\n      syncEngineImpl.limboDocumentRefs.addReference(limboChange.key, targetId);\n      trackLimboChange(syncEngineImpl, limboChange);\n    } else if (limboChange instanceof RemovedLimboDocument) {\n      logDebug(LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n      syncEngineImpl.limboDocumentRefs.removeReference(\n        limboChange.key,\n        targetId\n      );\n      const isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(\n        limboChange.key\n      );\n      if (!isReferenced) {\n        // We removed the last reference for this key\n        removeLimboTarget(syncEngineImpl, limboChange.key);\n      }\n    } else {\n      fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n    }\n  }\n}\n\nfunction trackLimboChange(\n  syncEngineImpl: SyncEngineImpl,\n  limboChange: AddedLimboDocument\n): void {\n  const key = limboChange.key;\n  if (!syncEngineImpl.activeLimboTargetsByKey.get(key)) {\n    logDebug(LOG_TAG, 'New document in limbo: ' + key);\n    syncEngineImpl.enqueuedLimboResolutions.push(key);\n    pumpEnqueuedLimboResolutions(syncEngineImpl);\n  }\n}\n\n/**\n * Starts listens for documents in limbo that are enqueued for resolution,\n * subject to a maximum number of concurrent resolutions.\n *\n * Without bounding the number of concurrent resolutions, the server can fail\n * with \"resource exhausted\" errors which can lead to pathological client\n * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.\n */\nfunction pumpEnqueuedLimboResolutions(syncEngineImpl: SyncEngineImpl): void {\n  while (\n    syncEngineImpl.enqueuedLimboResolutions.length > 0 &&\n    syncEngineImpl.activeLimboTargetsByKey.size <\n      syncEngineImpl.maxConcurrentLimboResolutions\n  ) {\n    const key = syncEngineImpl.enqueuedLimboResolutions.shift()!;\n    const limboTargetId = syncEngineImpl.limboTargetIdGenerator.next();\n    syncEngineImpl.activeLimboResolutionsByTarget.set(\n      limboTargetId,\n      new LimboResolution(key)\n    );\n    syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.insert(\n      key,\n      limboTargetId\n    );\n    remoteStoreListen(\n      syncEngineImpl.remoteStore,\n      new TargetData(\n        queryToTarget(newQueryForPath(key.path)),\n        limboTargetId,\n        TargetPurpose.LimboResolution,\n        ListenSequence.INVALID\n      )\n    );\n  }\n}\n\n// Visible for testing\nexport function activeLimboDocumentResolutions(\n  syncEngine: SyncEngine\n): SortedMap<DocumentKey, TargetId> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  return syncEngineImpl.activeLimboTargetsByKey;\n}\n\n// Visible for testing\nexport function enqueuedLimboDocumentResolutions(\n  syncEngine: SyncEngine\n): DocumentKey[] {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  return syncEngineImpl.enqueuedLimboResolutions;\n}\n\nexport async function emitNewSnapsAndNotifyLocalStore(\n  syncEngine: SyncEngine,\n  changes: MaybeDocumentMap,\n  remoteEvent?: RemoteEvent\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  const newSnaps: ViewSnapshot[] = [];\n  const docChangesInAllViews: LocalViewChanges[] = [];\n  const queriesProcessed: Array<Promise<void>> = [];\n\n  if (syncEngineImpl.queryViewsByQuery.isEmpty()) {\n    // Return early since `onWatchChange()` might not have been assigned yet.\n    return;\n  }\n\n  syncEngineImpl.queryViewsByQuery.forEach((_, queryView) => {\n    debugAssert(\n      !!syncEngineImpl.applyDocChanges,\n      'ApplyDocChangesHandler not set'\n    );\n    queriesProcessed.push(\n      syncEngineImpl\n        .applyDocChanges(queryView, changes, remoteEvent)\n        .then(viewSnapshot => {\n          if (viewSnapshot) {\n            if (syncEngineImpl.isPrimaryClient) {\n              syncEngineImpl.sharedClientState.updateQueryState(\n                queryView.targetId,\n                viewSnapshot.fromCache ? 'not-current' : 'current'\n              );\n            }\n            newSnaps.push(viewSnapshot);\n            const docChanges = LocalViewChanges.fromSnapshot(\n              queryView.targetId,\n              viewSnapshot\n            );\n            docChangesInAllViews.push(docChanges);\n          }\n        })\n    );\n  });\n\n  await Promise.all(queriesProcessed);\n  syncEngineImpl.syncEngineListener.onWatchChange!(newSnaps);\n  await notifyLocalViewChanges(syncEngineImpl.localStore, docChangesInAllViews);\n}\n\nasync function applyDocChanges(\n  syncEngineImpl: SyncEngineImpl,\n  queryView: QueryView,\n  changes: MaybeDocumentMap,\n  remoteEvent?: RemoteEvent\n): Promise<ViewSnapshot | undefined> {\n  let viewDocChanges = queryView.view.computeDocChanges(changes);\n  if (viewDocChanges.needsRefill) {\n    // The query has a limit and some docs were removed, so we need\n    // to re-run the query against the local store to make sure we\n    // didn't lose any good docs that had been past the limit.\n    viewDocChanges = await executeQuery(\n      syncEngineImpl.localStore,\n      queryView.query,\n      /* usePreviousResults= */ false\n    ).then(({ documents }) => {\n      return queryView.view.computeDocChanges(documents, viewDocChanges);\n    });\n  }\n\n  const targetChange =\n    remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);\n  const viewChange = queryView.view.applyChanges(\n    viewDocChanges,\n    /* updateLimboDocuments= */ syncEngineImpl.isPrimaryClient,\n    targetChange\n  );\n  updateTrackedLimbos(\n    syncEngineImpl,\n    queryView.targetId,\n    viewChange.limboChanges\n  );\n  return viewChange.snapshot;\n}\n\nexport async function syncEngineHandleCredentialChange(\n  syncEngine: SyncEngine,\n  user: User\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  const userChanged = !syncEngineImpl.currentUser.isEqual(user);\n\n  if (userChanged) {\n    logDebug(LOG_TAG, 'User change. New user:', user.toKey());\n\n    const result = await handleUserChange(syncEngineImpl.localStore, user);\n    syncEngineImpl.currentUser = user;\n\n    // Fails tasks waiting for pending writes requested by previous user.\n    rejectOutstandingPendingWritesCallbacks(\n      syncEngineImpl,\n      \"'waitForPendingWrites' promise is rejected due to a user change.\"\n    );\n    // TODO(b/114226417): Consider calling this only in the primary tab.\n    syncEngineImpl.sharedClientState.handleUserChange(\n      user,\n      result.removedBatchIds,\n      result.addedBatchIds\n    );\n    await emitNewSnapsAndNotifyLocalStore(\n      syncEngineImpl,\n      result.affectedDocuments\n    );\n  }\n}\n\nexport function getRemoteKeysForTarget(\n  syncEngine: SyncEngine,\n  targetId: TargetId\n): DocumentKeySet {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(\n    targetId\n  );\n  if (limboResolution && limboResolution.receivedDocument) {\n    return documentKeySet().add(limboResolution.key);\n  } else {\n    let keySet = documentKeySet();\n    const queries = syncEngineImpl.queriesByTarget.get(targetId);\n    if (!queries) {\n      return keySet;\n    }\n    for (const query of queries) {\n      const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n      debugAssert(\n        !!queryView,\n        `No query view found for ${stringifyQuery(query)}`\n      );\n      keySet = keySet.unionWith(queryView.view.syncedDocuments);\n    }\n    return keySet;\n  }\n}\n\n/**\n * Reconcile the list of synced documents in an existing view with those\n * from persistence.\n */\nasync function synchronizeViewAndComputeSnapshot(\n  syncEngine: SyncEngine,\n  queryView: QueryView\n): Promise<ViewChange> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  const queryResult = await executeQuery(\n    syncEngineImpl.localStore,\n    queryView.query,\n    /* usePreviousResults= */ true\n  );\n  const viewSnapshot = queryView.view.synchronizeWithPersistedState(\n    queryResult\n  );\n  if (syncEngineImpl.isPrimaryClient) {\n    updateTrackedLimbos(\n      syncEngineImpl,\n      queryView.targetId,\n      viewSnapshot.limboChanges\n    );\n  }\n  return viewSnapshot;\n}\n\n/** Applies a mutation state to an existing batch.  */\n// PORTING NOTE: Multi-Tab only.\nexport async function applyBatchState(\n  syncEngine: SyncEngine,\n  batchId: BatchId,\n  batchState: MutationBatchState,\n  error?: FirestoreError\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  const documents = await lookupMutationDocuments(\n    syncEngineImpl.localStore,\n    batchId\n  );\n\n  if (documents === null) {\n    // A throttled tab may not have seen the mutation before it was completed\n    // and removed from the mutation queue, in which case we won't have cached\n    // the affected documents. In this case we can safely ignore the update\n    // since that means we didn't apply the mutation locally at all (if we\n    // had, we would have cached the affected documents), and so we will just\n    // see any resulting document changes via normal remote document updates\n    // as applicable.\n    logDebug(LOG_TAG, 'Cannot apply mutation batch with id: ' + batchId);\n    return;\n  }\n\n  if (batchState === 'pending') {\n    // If we are the primary client, we need to send this write to the\n    // backend. Secondary clients will ignore these writes since their remote\n    // connection is disabled.\n    await fillWritePipeline(syncEngineImpl.remoteStore);\n  } else if (batchState === 'acknowledged' || batchState === 'rejected') {\n    // NOTE: Both these methods are no-ops for batches that originated from\n    // other clients.\n    processUserCallback(syncEngineImpl, batchId, error ? error : null);\n    triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n    removeCachedMutationBatchMetadata(syncEngineImpl.localStore, batchId);\n  } else {\n    fail(`Unknown batchState: ${batchState}`);\n  }\n\n  await emitNewSnapsAndNotifyLocalStore(syncEngineImpl, documents);\n}\n\n/** Applies a query target change from a different tab. */\n// PORTING NOTE: Multi-Tab only.\nexport async function applyPrimaryState(\n  syncEngine: SyncEngine,\n  isPrimary: boolean\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  ensureWatchCallbacks(syncEngineImpl);\n  ensureWriteCallbacks(syncEngineImpl);\n  if (isPrimary === true && syncEngineImpl._isPrimaryClient !== true) {\n    // Secondary tabs only maintain Views for their local listeners and the\n    // Views internal state may not be 100% populated (in particular\n    // secondary tabs don't track syncedDocuments, the set of documents the\n    // server considers to be in the target). So when a secondary becomes\n    // primary, we need to need to make sure that all views for all targets\n    // match the state on disk.\n    const activeTargets = syncEngineImpl.sharedClientState.getAllActiveQueryTargets();\n    const activeQueries = await synchronizeQueryViewsAndRaiseSnapshots(\n      syncEngineImpl,\n      activeTargets.toArray(),\n      /*transitionToPrimary=*/ true\n    );\n    syncEngineImpl._isPrimaryClient = true;\n    await remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, true);\n    for (const targetData of activeQueries) {\n      remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n    }\n  } else if (isPrimary === false && syncEngineImpl._isPrimaryClient !== false) {\n    const activeTargets: TargetId[] = [];\n\n    let p = Promise.resolve();\n    syncEngineImpl.queriesByTarget.forEach((_, targetId) => {\n      if (syncEngineImpl.sharedClientState.isLocalQueryTarget(targetId)) {\n        activeTargets.push(targetId);\n      } else {\n        p = p.then(() => {\n          removeAndCleanupTarget(syncEngineImpl, targetId);\n          return releaseTarget(\n            syncEngineImpl.localStore,\n            targetId,\n            /*keepPersistedTargetData=*/ true\n          );\n        });\n      }\n      remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n    });\n    await p;\n\n    await synchronizeQueryViewsAndRaiseSnapshots(\n      syncEngineImpl,\n      activeTargets,\n      /*transitionToPrimary=*/ false\n    );\n    resetLimboDocuments(syncEngineImpl);\n    syncEngineImpl._isPrimaryClient = false;\n    await remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, false);\n  }\n}\n\n// PORTING NOTE: Multi-Tab only.\nfunction resetLimboDocuments(syncEngine: SyncEngine): void {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  syncEngineImpl.activeLimboResolutionsByTarget.forEach((_, targetId) => {\n    remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n  });\n  syncEngineImpl.limboDocumentRefs.removeAllReferences();\n  syncEngineImpl.activeLimboResolutionsByTarget = new Map<\n    TargetId,\n    LimboResolution\n  >();\n  syncEngineImpl.activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n    DocumentKey.comparator\n  );\n}\n\n/**\n * Reconcile the query views of the provided query targets with the state from\n * persistence. Raises snapshots for any changes that affect the local\n * client and returns the updated state of all target's query data.\n *\n * @param syncEngine The sync engine implementation\n * @param targets the list of targets with views that need to be recomputed\n * @param transitionToPrimary `true` iff the tab transitions from a secondary\n * tab to a primary tab\n */\n// PORTING NOTE: Multi-Tab only.\nasync function synchronizeQueryViewsAndRaiseSnapshots(\n  syncEngine: SyncEngine,\n  targets: TargetId[],\n  transitionToPrimary: boolean\n): Promise<TargetData[]> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  const activeQueries: TargetData[] = [];\n  const newViewSnapshots: ViewSnapshot[] = [];\n  for (const targetId of targets) {\n    let targetData: TargetData;\n    const queries = syncEngineImpl.queriesByTarget.get(targetId);\n\n    if (queries && queries.length !== 0) {\n      // For queries that have a local View, we fetch their current state\n      // from LocalStore (as the resume token and the snapshot version\n      // might have changed) and reconcile their views with the persisted\n      // state (the list of syncedDocuments may have gotten out of sync).\n      targetData = await allocateTarget(\n        syncEngineImpl.localStore,\n        queryToTarget(queries[0])\n      );\n\n      for (const query of queries) {\n        const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n        debugAssert(\n          !!queryView,\n          `No query view found for ${stringifyQuery(query)}`\n        );\n\n        const viewChange = await synchronizeViewAndComputeSnapshot(\n          syncEngineImpl,\n          queryView\n        );\n        if (viewChange.snapshot) {\n          newViewSnapshots.push(viewChange.snapshot);\n        }\n      }\n    } else {\n      debugAssert(\n        transitionToPrimary,\n        'A secondary tab should never have an active view without an active target.'\n      );\n      // For queries that never executed on this client, we need to\n      // allocate the target in LocalStore and initialize a new View.\n      const target = await getCachedTarget(syncEngineImpl.localStore, targetId);\n      debugAssert(!!target, `Target for id ${targetId} not found`);\n      targetData = await allocateTarget(syncEngineImpl.localStore, target);\n      await initializeViewAndComputeSnapshot(\n        syncEngineImpl,\n        synthesizeTargetToQuery(target!),\n        targetId,\n        /*current=*/ false\n      );\n    }\n\n    activeQueries.push(targetData!);\n  }\n\n  syncEngineImpl.syncEngineListener.onWatchChange!(newViewSnapshots);\n  return activeQueries;\n}\n\n/**\n * Creates a `Query` object from the specified `Target`. There is no way to\n * obtain the original `Query`, so we synthesize a `Query` from the `Target`\n * object.\n *\n * The synthesized result might be different from the original `Query`, but\n * since the synthesized `Query` should return the same results as the\n * original one (only the presentation of results might differ), the potential\n * difference will not cause issues.\n */\n// PORTING NOTE: Multi-Tab only.\nfunction synthesizeTargetToQuery(target: Target): Query {\n  return newQuery(\n    target.path,\n    target.collectionGroup,\n    target.orderBy,\n    target.filters,\n    target.limit,\n    LimitType.First,\n    target.startAt,\n    target.endAt\n  );\n}\n\n/** Returns the IDs of the clients that are currently active. */\n// PORTING NOTE: Multi-Tab only.\nexport function getActiveClients(syncEngine: SyncEngine): Promise<ClientId[]> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  return getActiveClientsFromPersistence(syncEngineImpl.localStore);\n}\n\n/** Applies a query target change from a different tab. */\n// PORTING NOTE: Multi-Tab only.\nexport async function applyTargetState(\n  syncEngine: SyncEngine,\n  targetId: TargetId,\n  state: QueryTargetState,\n  error?: FirestoreError\n): Promise<void> {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  if (syncEngineImpl._isPrimaryClient) {\n    // If we receive a target state notification via WebStorage, we are\n    // either already secondary or another tab has taken the primary lease.\n    logDebug(LOG_TAG, 'Ignoring unexpected query state notification.');\n    return;\n  }\n\n  if (syncEngineImpl.queriesByTarget.has(targetId)) {\n    switch (state) {\n      case 'current':\n      case 'not-current': {\n        const changes = await getNewDocumentChanges(syncEngineImpl.localStore);\n        const synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(\n          targetId,\n          state === 'current'\n        );\n        await emitNewSnapsAndNotifyLocalStore(\n          syncEngineImpl,\n          changes,\n          synthesizedRemoteEvent\n        );\n        break;\n      }\n      case 'rejected': {\n        await releaseTarget(\n          syncEngineImpl.localStore,\n          targetId,\n          /* keepPersistedTargetData */ true\n        );\n        removeAndCleanupTarget(syncEngineImpl, targetId, error);\n        break;\n      }\n      default:\n        fail('Unexpected target state: ' + state);\n    }\n  }\n}\n\n/** Adds or removes Watch targets for queries from different tabs. */\nexport async function applyActiveTargetsChange(\n  syncEngine: SyncEngine,\n  added: TargetId[],\n  removed: TargetId[]\n): Promise<void> {\n  const syncEngineImpl = ensureWatchCallbacks(syncEngine);\n  if (!syncEngineImpl._isPrimaryClient) {\n    return;\n  }\n\n  for (const targetId of added) {\n    if (syncEngineImpl.queriesByTarget.has(targetId)) {\n      // A target might have been added in a previous attempt\n      logDebug(LOG_TAG, 'Adding an already active target ' + targetId);\n      continue;\n    }\n\n    const target = await getCachedTarget(syncEngineImpl.localStore, targetId);\n    debugAssert(!!target, `Query data for active target ${targetId} not found`);\n    const targetData = await allocateTarget(syncEngineImpl.localStore, target);\n    await initializeViewAndComputeSnapshot(\n      syncEngineImpl,\n      synthesizeTargetToQuery(target),\n      targetData.targetId,\n      /*current=*/ false\n    );\n    remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n  }\n\n  for (const targetId of removed) {\n    // Check that the target is still active since the target might have been\n    // removed if it has been rejected by the backend.\n    if (!syncEngineImpl.queriesByTarget.has(targetId)) {\n      continue;\n    }\n\n    // Release queries that are still active.\n    await releaseTarget(\n      syncEngineImpl.localStore,\n      targetId,\n      /* keepPersistedTargetData */ false\n    )\n      .then(() => {\n        remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n        removeAndCleanupTarget(syncEngineImpl, targetId);\n      })\n      .catch(ignoreIfPrimaryLeaseLoss);\n  }\n}\n\nfunction ensureWatchCallbacks(syncEngine: SyncEngine): SyncEngineImpl {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  syncEngineImpl.remoteStore.remoteSyncer.applyRemoteEvent = applyRemoteEvent.bind(\n    null,\n    syncEngineImpl\n  );\n  syncEngineImpl.remoteStore.remoteSyncer.getRemoteKeysForTarget = getRemoteKeysForTarget.bind(\n    null,\n    syncEngineImpl\n  );\n  syncEngineImpl.remoteStore.remoteSyncer.rejectListen = rejectListen.bind(\n    null,\n    syncEngineImpl\n  );\n  syncEngineImpl.syncEngineListener.onWatchChange = eventManagerOnWatchChange.bind(\n    null,\n    syncEngineImpl.eventManager\n  );\n  syncEngineImpl.syncEngineListener.onWatchError = eventManagerOnWatchError.bind(\n    null,\n    syncEngineImpl.eventManager\n  );\n  return syncEngineImpl;\n}\n\nexport function ensureWriteCallbacks(syncEngine: SyncEngine): SyncEngineImpl {\n  const syncEngineImpl = debugCast(syncEngine, SyncEngineImpl);\n  syncEngineImpl.remoteStore.remoteSyncer.applySuccessfulWrite = applySuccessfulWrite.bind(\n    null,\n    syncEngineImpl\n  );\n  syncEngineImpl.remoteStore.remoteSyncer.rejectFailedWrite = rejectFailedWrite.bind(\n    null,\n    syncEngineImpl\n  );\n  return syncEngineImpl;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryEngine } from './query_engine';\nimport { LocalDocumentsView } from './local_documents_view';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport {\n  hasLimitToFirst,\n  hasLimitToLast,\n  LimitType,\n  matchesAllDocuments,\n  newQueryComparator,\n  Query,\n  queryMatches,\n  stringifyQuery\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document } from '../model/document';\nimport { debugAssert } from '../util/assert';\nimport { getLogLevel, LogLevel, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\n\n// TOOD(b/140938512): Drop SimpleQueryEngine and rename IndexFreeQueryEngine.\n\n/**\n * A query engine that takes advantage of the target document mapping in the\n * QueryCache. The IndexFreeQueryEngine optimizes query execution by only\n * reading the documents that previously matched a query plus any documents that were\n * edited after the query was last listened to.\n *\n * There are some cases where Index-Free queries are not guaranteed to produce\n * the same results as full collection scans. In these cases, the\n * IndexFreeQueryEngine falls back to full query processing. These cases are:\n *\n * - Limit queries where a document that matched the query previously no longer\n *   matches the query.\n *\n * - Limit queries where a document edit may cause the document to sort below\n *   another document that is in the local cache.\n *\n * - Queries that have never been CURRENT or free of Limbo documents.\n */\nexport class IndexFreeQueryEngine implements QueryEngine {\n  private localDocumentsView: LocalDocumentsView | undefined;\n\n  setLocalDocumentsView(localDocuments: LocalDocumentsView): void {\n    this.localDocumentsView = localDocuments;\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    lastLimboFreeSnapshotVersion: SnapshotVersion,\n    remoteKeys: DocumentKeySet\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      this.localDocumentsView !== undefined,\n      'setLocalDocumentsView() not called'\n    );\n\n    // Queries that match all documents don't benefit from using\n    // IndexFreeQueries. It is more efficient to scan all documents in a\n    // collection, rather than to perform individual lookups.\n    if (matchesAllDocuments(query)) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    // Queries that have never seen a snapshot without limbo free documents\n    // should also be run as a full collection scan.\n    if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    return this.localDocumentsView!.getDocuments(transaction, remoteKeys).next(\n      documents => {\n        const previousResults = this.applyQuery(query, documents);\n\n        if (\n          (hasLimitToFirst(query) || hasLimitToLast(query)) &&\n          this.needsRefill(\n            query.limitType,\n            previousResults,\n            remoteKeys,\n            lastLimboFreeSnapshotVersion\n          )\n        ) {\n          return this.executeFullCollectionScan(transaction, query);\n        }\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          logDebug(\n            'IndexFreeQueryEngine',\n            'Re-using previous result from %s to execute query: %s',\n            lastLimboFreeSnapshotVersion.toString(),\n            stringifyQuery(query)\n          );\n        }\n\n        // Retrieve all results for documents that were updated since the last\n        // limbo-document free remote snapshot.\n        return this.localDocumentsView!.getDocumentsMatchingQuery(\n          transaction,\n          query,\n          lastLimboFreeSnapshotVersion\n        ).next(updatedResults => {\n          // We merge `previousResults` into `updateResults`, since\n          // `updateResults` is already a DocumentMap. If a document is\n          // contained in both lists, then its contents are the same.\n          previousResults.forEach(doc => {\n            updatedResults = updatedResults.insert(doc.key, doc);\n          });\n          return updatedResults;\n        });\n      }\n    );\n  }\n\n  /** Applies the query filter and sorting to the provided documents.  */\n  private applyQuery(\n    query: Query,\n    documents: MaybeDocumentMap\n  ): SortedSet<Document> {\n    // Sort the documents and re-apply the query filter since previously\n    // matching documents do not necessarily still match the query.\n    let queryResults = new SortedSet<Document>(newQueryComparator(query));\n    documents.forEach((_, maybeDoc) => {\n      if (maybeDoc instanceof Document && queryMatches(query, maybeDoc)) {\n        queryResults = queryResults.add(maybeDoc);\n      }\n    });\n    return queryResults;\n  }\n\n  /**\n   * Determines if a limit query needs to be refilled from cache, making it\n   * ineligible for index-free execution.\n   *\n   * @param sortedPreviousResults The documents that matched the query when it\n   * was last synchronized, sorted by the query's comparator.\n   * @param remoteKeys The document keys that matched the query at the last\n   * snapshot.\n   * @param limboFreeSnapshotVersion The version of the snapshot when the query\n   * was last synchronized.\n   */\n  private needsRefill(\n    limitType: LimitType,\n    sortedPreviousResults: SortedSet<Document>,\n    remoteKeys: DocumentKeySet,\n    limboFreeSnapshotVersion: SnapshotVersion\n  ): boolean {\n    // The query needs to be refilled if a previously matching document no\n    // longer matches.\n    if (remoteKeys.size !== sortedPreviousResults.size) {\n      return true;\n    }\n\n    // Limit queries are not eligible for index-free query execution if there is\n    // a potential that an older document from cache now sorts before a document\n    // that was previously part of the limit. This, however, can only happen if\n    // the document at the edge of the limit goes out of limit.\n    // If a document that is not the limit boundary sorts differently,\n    // the boundary of the limit itself did not change and documents from cache\n    // will continue to be \"rejected\" by this boundary. Therefore, we can ignore\n    // any modifications that don't affect the last document.\n    const docAtLimitEdge =\n      limitType === LimitType.First\n        ? sortedPreviousResults.last()\n        : sortedPreviousResults.first();\n    if (!docAtLimitEdge) {\n      // We don't need to refill the query if there were already no documents.\n      return false;\n    }\n    return (\n      docAtLimitEdge.hasPendingWrites ||\n      docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0\n    );\n  }\n\n  private executeFullCollectionScan(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<DocumentMap> {\n    if (getLogLevel() <= LogLevel.DEBUG) {\n      logDebug(\n        'IndexFreeQueryEngine',\n        'Using full collection scan to execute query:',\n        stringifyQuery(query)\n      );\n    }\n\n    return this.localDocumentsView!.getDocumentsMatchingQuery(\n      transaction,\n      query,\n      SnapshotVersion.min()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { isCollectionGroupQuery, Query } from '../core/query';\nimport { BatchId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { MutationBatch, BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistenceTransaction, ReferenceDelegate } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { DocReference } from './reference_set';\n\nexport class MemoryMutationQueue implements MutationQueue {\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  private mutationQueue: MutationBatch[] = [];\n\n  /** Next value to use when assigning sequential IDs to each mutation batch. */\n  private nextBatchId: BatchId = 1;\n\n  /** An ordered mapping between documents and the mutations batch IDs. */\n  private batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly referenceDelegate: ReferenceDelegate\n  ) {}\n\n  checkEmpty(transaction: PersistenceTransaction): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0);\n  }\n\n  addMutationBatch(\n    transaction: PersistenceTransaction,\n    localWriteTime: Timestamp,\n    baseMutations: Mutation[],\n    mutations: Mutation[]\n  ): PersistencePromise<MutationBatch> {\n    debugAssert(mutations.length !== 0, 'Mutation batches should not be empty');\n\n    const batchId = this.nextBatchId;\n    this.nextBatchId++;\n\n    if (this.mutationQueue.length > 0) {\n      const prior = this.mutationQueue[this.mutationQueue.length - 1];\n      debugAssert(\n        prior.batchId < batchId,\n        'Mutation batchIDs must be monotonically increasing order'\n      );\n    }\n\n    const batch = new MutationBatch(\n      batchId,\n      localWriteTime,\n      baseMutations,\n      mutations\n    );\n    this.mutationQueue.push(batch);\n\n    // Track references by document key and index collection parents.\n    for (const mutation of mutations) {\n      this.batchesByDocumentKey = this.batchesByDocumentKey.add(\n        new DocReference(mutation.key, batchId)\n      );\n\n      this.indexManager.addToCollectionParentIndex(\n        transaction,\n        mutation.key.path.popLast()\n      );\n    }\n\n    return PersistencePromise.resolve(batch);\n  }\n\n  lookupMutationBatch(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    return PersistencePromise.resolve(this.findMutationBatch(batchId));\n  }\n\n  getNextMutationBatchAfterBatchId(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    const nextBatchId = batchId + 1;\n\n    // The requested batchId may still be out of range so normalize it to the\n    // start of the queue.\n    const rawIndex = this.indexOfBatchId(nextBatchId);\n    const index = rawIndex < 0 ? 0 : rawIndex;\n    return PersistencePromise.resolve(\n      this.mutationQueue.length > index ? this.mutationQueue[index] : null\n    );\n  }\n\n  getHighestUnacknowledgedBatchId(): PersistencePromise<BatchId> {\n    return PersistencePromise.resolve(\n      this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1\n    );\n  }\n\n  getAllMutationBatches(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<MutationBatch[]> {\n    return PersistencePromise.resolve(this.mutationQueue.slice());\n  }\n\n  getAllMutationBatchesAffectingDocumentKey(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MutationBatch[]> {\n    const start = new DocReference(documentKey, 0);\n    const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n    const result: MutationBatch[] = [];\n    this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n      debugAssert(\n        documentKey.isEqual(ref.key),\n        \"Should only iterate over a single key's batches\"\n      );\n      const batch = this.findMutationBatch(ref.targetOrBatchId);\n      debugAssert(\n        batch !== null,\n        'Batches in the index must exist in the main table'\n      );\n      result.push(batch!);\n    });\n\n    return PersistencePromise.resolve(result);\n  }\n\n  getAllMutationBatchesAffectingDocumentKeys(\n    transaction: PersistenceTransaction,\n    documentKeys: SortedMap<DocumentKey, unknown>\n  ): PersistencePromise<MutationBatch[]> {\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    documentKeys.forEach(documentKey => {\n      const start = new DocReference(documentKey, 0);\n      const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n      this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n        debugAssert(\n          documentKey.isEqual(ref.key),\n          \"For each key, should only iterate over a single key's batches\"\n        );\n\n        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n      });\n    });\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  getAllMutationBatchesAffectingQuery(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<MutationBatch[]> {\n    debugAssert(\n      !isCollectionGroupQuery(query),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    // Use the query path as a prefix for testing if a document matches the\n    // query.\n    const prefix = query.path;\n    const immediateChildrenPathLength = prefix.length + 1;\n\n    // Construct a document reference for actually scanning the index. Unlike\n    // the prefix the document key in this reference must have an even number of\n    // segments. The empty segment can be used a suffix of the query path\n    // because it precedes all other segments in an ordered traversal.\n    let startPath = prefix;\n    if (!DocumentKey.isDocumentKey(startPath)) {\n      startPath = startPath.child('');\n    }\n\n    const start = new DocReference(new DocumentKey(startPath), 0);\n\n    // Find unique batchIDs referenced by all documents potentially matching the\n    // query.\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    this.batchesByDocumentKey.forEachWhile(ref => {\n      const rowKeyPath = ref.key.path;\n      if (!prefix.isPrefixOf(rowKeyPath)) {\n        return false;\n      } else {\n        // Rows with document keys more than one segment longer than the query\n        // path can't be matches. For example, a query on 'rooms' can't match\n        // the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (rowKeyPath.length === immediateChildrenPathLength) {\n          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n        }\n        return true;\n      }\n    }, start);\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  private findMutationBatches(batchIDs: SortedSet<number>): MutationBatch[] {\n    // Construct an array of matching batches, sorted by batchID to ensure that\n    // multiple mutations affecting the same document key are applied in order.\n    const result: MutationBatch[] = [];\n    batchIDs.forEach(batchId => {\n      const batch = this.findMutationBatch(batchId);\n      if (batch !== null) {\n        result.push(batch);\n      }\n    });\n    return result;\n  }\n\n  removeMutationBatch(\n    transaction: PersistenceTransaction,\n    batch: MutationBatch\n  ): PersistencePromise<void> {\n    // Find the position of the first batch for removal.\n    const batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');\n    hardAssert(\n      batchIndex === 0,\n      'Can only remove the first entry of the mutation queue'\n    );\n    this.mutationQueue.shift();\n\n    let references = this.batchesByDocumentKey;\n    return PersistencePromise.forEach(batch.mutations, (mutation: Mutation) => {\n      const ref = new DocReference(mutation.key, batch.batchId);\n      references = references.delete(ref);\n      return this.referenceDelegate.markPotentiallyOrphaned(\n        transaction,\n        mutation.key\n      );\n    }).next(() => {\n      this.batchesByDocumentKey = references;\n    });\n  }\n\n  removeCachedMutationKeys(batchId: BatchId): void {\n    // No-op since the memory mutation queue does not maintain a separate cache.\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n  }\n\n  performConsistencyCheck(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    if (this.mutationQueue.length === 0) {\n      debugAssert(\n        this.batchesByDocumentKey.isEmpty(),\n        'Document leak -- detected dangling mutation references when queue is empty.'\n      );\n    }\n    return PersistencePromise.resolve();\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue and asserts that\n   * the resulting index is within the bounds of the queue.\n   *\n   * @param batchId The batchId to search for\n   * @param action A description of what the caller is doing, phrased in passive\n   * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n   */\n  private indexOfExistingBatchId(batchId: BatchId, action: string): number {\n    const index = this.indexOfBatchId(batchId);\n    debugAssert(\n      index >= 0 && index < this.mutationQueue.length,\n      'Batches must exist to be ' + action\n    );\n    return index;\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue. This operation\n   * is O(1).\n   *\n   * @return The computed index of the batch with the given batchId, based on\n   * the state of the queue. Note this index can be negative if the requested\n   * batchId has already been remvoed from the queue or past the end of the\n   * queue if the batchId is larger than the last added batch.\n   */\n  private indexOfBatchId(batchId: BatchId): number {\n    if (this.mutationQueue.length === 0) {\n      // As an index this is past the end of the queue\n      return 0;\n    }\n\n    // Examine the front of the queue to figure out the difference between the\n    // batchId and indexes in the array. Note that since the queue is ordered\n    // by batchId, if the first batch has a larger batchId then the requested\n    // batchId doesn't exist in the queue.\n    const firstBatchId = this.mutationQueue[0].batchId;\n    return batchId - firstBatchId;\n  }\n\n  /**\n   * A version of lookupMutationBatch that doesn't return a promise, this makes\n   * other functions that uses this code easier to read and more efficent.\n   */\n  private findMutationBatch(batchId: BatchId): MutationBatch | null {\n    const index = this.indexOfBatchId(batchId);\n    if (index < 0 || index >= this.mutationQueue.length) {\n      return null;\n    }\n\n    const batch = this.mutationQueue[index];\n    debugAssert(batch.batchId === batchId, 'If found batch must match');\n    return batch;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isCollectionGroupQuery, Query, queryMatches } from '../core/query';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  documentMap,\n  DocumentSizeEntry,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\n\nexport type DocumentSizer = (doc: MaybeDocument) => number;\n\n/** Miscellaneous collection types / constants. */\ninterface MemoryRemoteDocumentCacheEntry extends DocumentSizeEntry {\n  readTime: SnapshotVersion;\n}\n\ntype DocumentEntryMap = SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>;\nfunction documentEntryMap(): DocumentEntryMap {\n  return new SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>(\n    DocumentKey.comparator\n  );\n}\n\nexport interface MemoryRemoteDocumentCache extends RemoteDocumentCache {\n  forEachDocumentKey(\n    transaction: PersistenceTransaction,\n    f: (key: DocumentKey) => PersistencePromise<void>\n  ): PersistencePromise<void>;\n}\n\n/**\n * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke\n * `newMemoryRemoteDocumentCache()`.\n */\nclass MemoryRemoteDocumentCacheImpl implements MemoryRemoteDocumentCache {\n  /** Underlying cache of documents and their read times. */\n  private docs = documentEntryMap();\n\n  /** Size of all cached documents. */\n  private size = 0;\n\n  /**\n   * @param sizer Used to assess the size of a document. For eager GC, this is expected to just\n   * return 0 to avoid unnecessarily doing the work of calculating the size.\n   */\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly sizer: DocumentSizer\n  ) {}\n\n  /**\n   * Adds the supplied entry to the cache and updates the cache size as appropriate.\n   *\n   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  addEntry(\n    transaction: PersistenceTransaction,\n    doc: MaybeDocument,\n    readTime: SnapshotVersion\n  ): PersistencePromise<void> {\n    debugAssert(\n      !readTime.isEqual(SnapshotVersion.min()),\n      'Cannot add a document with a read time of zero'\n    );\n\n    const key = doc.key;\n    const entry = this.docs.get(key);\n    const previousSize = entry ? entry.size : 0;\n    const currentSize = this.sizer(doc);\n\n    this.docs = this.docs.insert(key, {\n      maybeDocument: doc,\n      size: currentSize,\n      readTime\n    });\n\n    this.size += currentSize - previousSize;\n\n    return this.indexManager.addToCollectionParentIndex(\n      transaction,\n      key.path.popLast()\n    );\n  }\n\n  /**\n   * Removes the specified entry from the cache and updates the cache size as appropriate.\n   *\n   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  removeEntry(documentKey: DocumentKey): void {\n    const entry = this.docs.get(documentKey);\n    if (entry) {\n      this.docs = this.docs.remove(documentKey);\n      this.size -= entry.size;\n    }\n  }\n\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    const entry = this.docs.get(documentKey);\n    return PersistencePromise.resolve(entry ? entry.maybeDocument : null);\n  }\n\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    let results = nullableMaybeDocumentMap();\n    documentKeys.forEach(documentKey => {\n      const entry = this.docs.get(documentKey);\n      results = results.insert(documentKey, entry ? entry.maybeDocument : null);\n    });\n    return PersistencePromise.resolve(results);\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      !isCollectionGroupQuery(query),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    let results = documentMap();\n\n    // Documents are ordered by key, so we can use a prefix scan to narrow down\n    // the documents we need to match the query against.\n    const prefix = new DocumentKey(query.path.child(''));\n    const iterator = this.docs.getIteratorFrom(prefix);\n    while (iterator.hasNext()) {\n      const {\n        key,\n        value: { maybeDocument, readTime }\n      } = iterator.getNext();\n      if (!query.path.isPrefixOf(key.path)) {\n        break;\n      }\n      if (readTime.compareTo(sinceReadTime) <= 0) {\n        continue;\n      }\n      if (\n        maybeDocument instanceof Document &&\n        queryMatches(query, maybeDocument)\n      ) {\n        results = results.insert(maybeDocument.key, maybeDocument);\n      }\n    }\n    return PersistencePromise.resolve(results);\n  }\n\n  forEachDocumentKey(\n    transaction: PersistenceTransaction,\n    f: (key: DocumentKey) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(this.docs, (key: DocumentKey) => f(key));\n  }\n\n  newChangeBuffer(options?: {\n    trackRemovals: boolean;\n  }): RemoteDocumentChangeBuffer {\n    // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps\n    // a separate changelog and does not need special handling for removals.\n    return new MemoryRemoteDocumentChangeBuffer(this);\n  }\n\n  getSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.size);\n  }\n}\n\n/**\n * Creates a new memory-only RemoteDocumentCache.\n *\n * @param indexManager A class that manages collection group indices.\n * @param sizer Used to assess the size of a document. For eager GC, this is expected to just\n * return 0 to avoid unnecessarily doing the work of calculating the size.\n */\nexport function newMemoryRemoteDocumentCache(\n  indexManager: IndexManager,\n  sizer: DocumentSizer\n): MemoryRemoteDocumentCache {\n  return new MemoryRemoteDocumentCacheImpl(indexManager, sizer);\n}\n\n/**\n * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.\n */\nclass MemoryRemoteDocumentChangeBuffer extends RemoteDocumentChangeBuffer {\n  constructor(private readonly documentCache: MemoryRemoteDocumentCacheImpl) {\n    super();\n  }\n\n  protected applyChanges(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const promises: Array<PersistencePromise<void>> = [];\n    this.changes.forEach((key, doc) => {\n      if (doc) {\n        promises.push(\n          this.documentCache.addEntry(transaction, doc, this.readTime)\n        );\n      } else {\n        this.documentCache.removeEntry(key);\n      }\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n\n  protected getFromCache(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.documentCache.getEntry(transaction, documentKey);\n  }\n\n  protected getAllFromCache(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    return this.documentCache.getEntries(transaction, documentKeys);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { ActiveTargets } from './lru_garbage_collector';\nimport { MemoryPersistence } from './memory_persistence';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetCache } from './target_cache';\nimport { TargetData } from './target_data';\nimport { canonifyTarget, Target, targetEquals } from '../core/target';\n\nexport class MemoryTargetCache implements TargetCache {\n  /**\n   * Maps a target to the data about that target\n   */\n  private targets = new ObjectMap<Target, TargetData>(\n    t => canonifyTarget(t),\n    targetEquals\n  );\n\n  /** The last received snapshot version. */\n  private lastRemoteSnapshotVersion = SnapshotVersion.min();\n  /** The highest numbered target ID encountered. */\n  private highestTargetId: TargetId = 0;\n  /** The highest sequence number encountered. */\n  private highestSequenceNumber: ListenSequenceNumber = 0;\n  /**\n   * A ordered bidirectional mapping between documents and the remote target\n   * IDs.\n   */\n  private references = new ReferenceSet();\n\n  private targetCount = 0;\n\n  private targetIdGenerator = TargetIdGenerator.forTargetCache();\n\n  constructor(private readonly persistence: MemoryPersistence) {}\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    this.targets.forEach((_, targetData) => f(targetData));\n    return PersistencePromise.resolve();\n  }\n\n  getLastRemoteSnapshotVersion(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<SnapshotVersion> {\n    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\n  }\n\n  getHighestSequenceNumber(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<ListenSequenceNumber> {\n    return PersistencePromise.resolve(this.highestSequenceNumber);\n  }\n\n  allocateTargetId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<TargetId> {\n    this.highestTargetId = this.targetIdGenerator.next();\n    return PersistencePromise.resolve(this.highestTargetId);\n  }\n\n  setTargetsMetadata(\n    transaction: PersistenceTransaction,\n    highestListenSequenceNumber: number,\n    lastRemoteSnapshotVersion?: SnapshotVersion\n  ): PersistencePromise<void> {\n    if (lastRemoteSnapshotVersion) {\n      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    if (highestListenSequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = highestListenSequenceNumber;\n    }\n    return PersistencePromise.resolve();\n  }\n\n  private saveTargetData(targetData: TargetData): void {\n    this.targets.set(targetData.target, targetData);\n    const targetId = targetData.targetId;\n    if (targetId > this.highestTargetId) {\n      this.targetIdGenerator = new TargetIdGenerator(targetId);\n      this.highestTargetId = targetId;\n    }\n    if (targetData.sequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = targetData.sequenceNumber;\n    }\n  }\n\n  addTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      !this.targets.has(targetData.target),\n      'Adding a target that already exists'\n    );\n    this.saveTargetData(targetData);\n    this.targetCount += 1;\n    return PersistencePromise.resolve();\n  }\n\n  updateTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Updating a non-existent target'\n    );\n    this.saveTargetData(targetData);\n    return PersistencePromise.resolve();\n  }\n\n  removeTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(this.targetCount > 0, 'Removing a target from an empty cache');\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Removing a non-existent target from the cache'\n    );\n    this.targets.delete(targetData.target);\n    this.references.removeReferencesForId(targetData.targetId);\n    this.targetCount -= 1;\n    return PersistencePromise.resolve();\n  }\n\n  removeTargets(\n    transaction: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    let count = 0;\n    const removals: Array<PersistencePromise<void>> = [];\n    this.targets.forEach((key, targetData) => {\n      if (\n        targetData.sequenceNumber <= upperBound &&\n        activeTargetIds.get(targetData.targetId) === null\n      ) {\n        this.targets.delete(key);\n        removals.push(\n          this.removeMatchingKeysForTargetId(transaction, targetData.targetId)\n        );\n        count++;\n      }\n    });\n    return PersistencePromise.waitFor(removals).next(() => count);\n  }\n\n  getTargetCount(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.targetCount);\n  }\n\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    const targetData = this.targets.get(target) || null;\n    return PersistencePromise.resolve(targetData);\n  }\n\n  addMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.addReferences(keys, targetId);\n    return PersistencePromise.resolve();\n  }\n\n  removeMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferences(keys, targetId);\n    const referenceDelegate = this.persistence.referenceDelegate;\n    const promises: Array<PersistencePromise<void>> = [];\n    if (referenceDelegate) {\n      keys.forEach(key => {\n        promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));\n      });\n    }\n    return PersistencePromise.waitFor(promises);\n  }\n\n  removeMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferencesForId(targetId);\n    return PersistencePromise.resolve();\n  }\n\n  getMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<DocumentKeySet> {\n    const matchingKeys = this.references.referencesForId(targetId);\n    return PersistencePromise.resolve(matchingKeys);\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.references.containsKey(key));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { logDebug } from '../util/log';\nimport { ObjectMap } from '../util/obj_map';\nimport { encodeResourcePath } from './encoded_resource_path';\nimport {\n  ActiveTargets,\n  LruDelegate,\n  LruGarbageCollector,\n  LruParams\n} from './lru_garbage_collector';\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { estimateByteSize } from '../model/values';\nimport { MemoryIndexManager } from './memory_index_manager';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport {\n  MemoryRemoteDocumentCache,\n  newMemoryRemoteDocumentCache\n} from './memory_remote_document_cache';\nimport { MemoryTargetCache } from './memory_target_cache';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PersistenceTransactionMode,\n  ReferenceDelegate\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetData } from './target_data';\n\nconst LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nexport class MemoryPersistence implements Persistence {\n  /**\n   * Note that these are retained here to make it easier to write tests\n   * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n   * can create a new LocalStore wrapping this Persistence instance and this\n   * will make the in-memory persistence layer behave as if it were actually\n   * persisting values.\n   */\n  private readonly indexManager: MemoryIndexManager;\n  private mutationQueues: { [user: string]: MemoryMutationQueue } = {};\n  private readonly remoteDocumentCache: MemoryRemoteDocumentCache;\n  private readonly targetCache: MemoryTargetCache;\n  private readonly listenSequence = new ListenSequence(0);\n\n  private _started = false;\n\n  readonly referenceDelegate: MemoryReferenceDelegate;\n\n  /**\n   * The constructor accepts a factory for creating a reference delegate. This\n   * allows both the delegate and this instance to have strong references to\n   * each other without having nullable fields that would then need to be\n   * checked or asserted on every access.\n   */\n  constructor(\n    referenceDelegateFactory: (p: MemoryPersistence) => MemoryReferenceDelegate\n  ) {\n    this._started = true;\n    this.referenceDelegate = referenceDelegateFactory(this);\n    this.targetCache = new MemoryTargetCache(this);\n    const sizer = (doc: MaybeDocument): number =>\n      this.referenceDelegate.documentSize(doc);\n    this.indexManager = new MemoryIndexManager();\n    this.remoteDocumentCache = newMemoryRemoteDocumentCache(\n      this.indexManager,\n      sizer\n    );\n  }\n\n  start(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  shutdown(): Promise<void> {\n    // No durable state to ensure is closed on shutdown.\n    this._started = false;\n    return Promise.resolve();\n  }\n\n  get started(): boolean {\n    return this._started;\n  }\n\n  setDatabaseDeletedListener(): void {\n    // No op.\n  }\n\n  setNetworkEnabled(): void {\n    // No op.\n  }\n\n  getIndexManager(): MemoryIndexManager {\n    return this.indexManager;\n  }\n\n  getMutationQueue(user: User): MutationQueue {\n    let queue = this.mutationQueues[user.toKey()];\n    if (!queue) {\n      queue = new MemoryMutationQueue(\n        this.indexManager,\n        this.referenceDelegate\n      );\n      this.mutationQueues[user.toKey()] = queue;\n    }\n    return queue;\n  }\n\n  getTargetCache(): MemoryTargetCache {\n    return this.targetCache;\n  }\n\n  getRemoteDocumentCache(): MemoryRemoteDocumentCache {\n    return this.remoteDocumentCache;\n  }\n\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T> {\n    logDebug(LOG_TAG, 'Starting transaction:', action);\n    const txn = new MemoryTransaction(this.listenSequence.next());\n    this.referenceDelegate.onTransactionStarted();\n    return transactionOperation(txn)\n      .next(result => {\n        return this.referenceDelegate\n          .onTransactionCommitted(txn)\n          .next(() => result);\n      })\n      .toPromise()\n      .then(result => {\n        txn.raiseOnCommittedEvent();\n        return result;\n      });\n  }\n\n  mutationQueuesContainKey(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or(\n      Object.values(this.mutationQueues).map(queue => () =>\n        queue.containsKey(transaction, key)\n      )\n    );\n  }\n}\n\n/**\n * Memory persistence is not actually transactional, but future implementations\n * may have transaction-scoped state.\n */\nexport class MemoryTransaction extends PersistenceTransaction {\n  constructor(readonly currentSequenceNumber: ListenSequenceNumber) {\n    super();\n  }\n}\n\nexport interface MemoryReferenceDelegate extends ReferenceDelegate {\n  documentSize(doc: MaybeDocument): number;\n  onTransactionStarted(): void;\n  onTransactionCommitted(txn: PersistenceTransaction): PersistencePromise<void>;\n}\n\nexport class MemoryEagerDelegate implements MemoryReferenceDelegate {\n  /** Tracks all documents that are active in Query views. */\n  private localViewReferences: ReferenceSet = new ReferenceSet();\n  /** The list of documents that are potentially GCed after each transaction. */\n  private _orphanedDocuments: Set</* path= */ string> | null = null;\n\n  private constructor(private readonly persistence: MemoryPersistence) {}\n\n  static factory(persistence: MemoryPersistence): MemoryEagerDelegate {\n    return new MemoryEagerDelegate(persistence);\n  }\n\n  private get orphanedDocuments(): Set<string> {\n    if (!this._orphanedDocuments) {\n      throw fail('orphanedDocuments is only valid during a transaction.');\n    } else {\n      return this._orphanedDocuments;\n    }\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.localViewReferences.addReference(key, targetId);\n    this.orphanedDocuments.delete(key.toString());\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.localViewReferences.removeReference(key, targetId);\n    this.orphanedDocuments.add(key.toString());\n    return PersistencePromise.resolve();\n  }\n\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedDocuments.add(key.toString());\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const orphaned = this.localViewReferences.removeReferencesForId(\n      targetData.targetId\n    );\n    orphaned.forEach(key => this.orphanedDocuments.add(key.toString()));\n    const cache = this.persistence.getTargetCache();\n    return cache\n      .getMatchingKeysForTargetId(txn, targetData.targetId)\n      .next(keys => {\n        keys.forEach(key => this.orphanedDocuments.add(key.toString()));\n      })\n      .next(() => cache.removeTargetData(txn, targetData));\n  }\n\n  onTransactionStarted(): void {\n    this._orphanedDocuments = new Set<string>();\n  }\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    // Remove newly orphaned documents.\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    return PersistencePromise.forEach(\n      this.orphanedDocuments,\n      (path: string) => {\n        const key = DocumentKey.fromPath(path);\n        return this.isReferenced(txn, key).next(isReferenced => {\n          if (!isReferenced) {\n            changeBuffer.removeEntry(key);\n          }\n        });\n      }\n    ).next(() => {\n      this._orphanedDocuments = null;\n      return changeBuffer.apply(txn);\n    });\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return this.isReferenced(txn, key).next(isReferenced => {\n      if (isReferenced) {\n        this.orphanedDocuments.delete(key.toString());\n      } else {\n        this.orphanedDocuments.add(key.toString());\n      }\n    });\n  }\n\n  documentSize(doc: MaybeDocument): number {\n    // For eager GC, we don't care about the document size, there are no size thresholds.\n    return 0;\n  }\n\n  private isReferenced(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () =>\n        PersistencePromise.resolve(this.localViewReferences.containsKey(key)),\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => this.persistence.mutationQueuesContainKey(txn, key)\n    ]);\n  }\n}\n\nexport class MemoryLruDelegate implements ReferenceDelegate, LruDelegate {\n  private orphanedSequenceNumbers: ObjectMap<\n    DocumentKey,\n    ListenSequenceNumber\n  > = new ObjectMap(\n    k => encodeResourcePath(k.path),\n    (l, r) => l.isEqual(r)\n  );\n\n  readonly garbageCollector: LruGarbageCollector;\n\n  constructor(\n    private readonly persistence: MemoryPersistence,\n    lruParams: LruParams\n  ) {\n    this.garbageCollector = new LruGarbageCollector(this, lruParams);\n  }\n\n  // No-ops, present so memory persistence doesn't have to care which delegate\n  // it has.\n  onTransactionStarted(): void {}\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    return PersistencePromise.resolve();\n  }\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return this.persistence.getTargetCache().forEachTarget(txn, f);\n  }\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.persistence\n      .getTargetCache()\n      .getTargetCount(txn);\n    return targetCountPromise.next(targetCount =>\n      docCountPromise.next(docCount => targetCount + docCount)\n    );\n  }\n\n  private orphanedDocumentCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(\n      this.orphanedSequenceNumbers,\n      (key, sequenceNumber) => {\n        // Pass in the exact sequence number as the upper bound so we know it won't be pinned by\n        // being too recent.\n        return this.isPinned(txn, key, sequenceNumber).next(isPinned => {\n          if (!isPinned) {\n            return f(sequenceNumber);\n          } else {\n            return PersistencePromise.resolve();\n          }\n        });\n      }\n    );\n  }\n\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.persistence\n      .getTargetCache()\n      .removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    let count = 0;\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    const p = cache.forEachDocumentKey(txn, key => {\n      return this.isPinned(txn, key, upperBound).next(isPinned => {\n        if (!isPinned) {\n          count++;\n          changeBuffer.removeEntry(key);\n        }\n      });\n    });\n    return p.next(() => changeBuffer.apply(txn)).next(() => count);\n  }\n\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.persistence.getTargetCache().updateTargetData(txn, updated);\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  documentSize(maybeDoc: MaybeDocument): number {\n    let documentSize = maybeDoc.key.toString().length;\n    if (maybeDoc instanceof Document) {\n      documentSize += estimateByteSize(maybeDoc.toProto());\n    }\n    return documentSize;\n  }\n\n  private isPinned(\n    txn: PersistenceTransaction,\n    key: DocumentKey,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () => this.persistence.mutationQueuesContainKey(txn, key),\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => {\n        const orphanedAt = this.orphanedSequenceNumbers.get(key);\n        return PersistencePromise.resolve(\n          orphanedAt !== undefined && orphanedAt > upperBound\n        );\n      }\n    ]);\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.persistence.getRemoteDocumentCache().getSize(txn);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\n\nimport { Stream } from './connection';\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nexport class StreamBridge<I, O> implements Stream<I, O> {\n  private wrappedOnOpen: (() => void) | undefined;\n  private wrappedOnClose: ((err?: FirestoreError) => void) | undefined;\n  private wrappedOnMessage: ((msg: O) => void) | undefined;\n\n  private sendFn: (msg: I) => void;\n  private closeFn: () => void;\n\n  constructor(args: { sendFn: (msg: I) => void; closeFn: () => void }) {\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n\n  onOpen(callback: () => void): void {\n    debugAssert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n    this.wrappedOnOpen = callback;\n  }\n\n  onClose(callback: (err?: FirestoreError) => void): void {\n    debugAssert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n    this.wrappedOnClose = callback;\n  }\n\n  onMessage(callback: (msg: O) => void): void {\n    debugAssert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n    this.wrappedOnMessage = callback;\n  }\n\n  close(): void {\n    this.closeFn();\n  }\n\n  send(msg: I): void {\n    this.sendFn(msg);\n  }\n\n  callOnOpen(): void {\n    debugAssert(\n      this.wrappedOnOpen !== undefined,\n      'Cannot call onOpen because no callback was set'\n    );\n    this.wrappedOnOpen();\n  }\n\n  callOnClose(err?: FirestoreError): void {\n    debugAssert(\n      this.wrappedOnClose !== undefined,\n      'Cannot call onClose because no callback was set'\n    );\n    this.wrappedOnClose(err);\n  }\n\n  callOnMessage(msg: O): void {\n    debugAssert(\n      this.wrappedOnMessage !== undefined,\n      'Cannot call onMessage because no callback was set'\n    );\n    this.wrappedOnMessage(msg);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Token } from '../api/credentials';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { SDK_VERSION } from '../../src/core/version';\nimport { Connection, Stream } from './connection';\nimport { logDebug, logWarn } from '../util/log';\nimport { FirestoreError } from '../util/error';\nimport { StringMap } from '../util/types';\nimport { debugAssert } from '../util/assert';\n\nconst LOG_TAG = 'RestConnection';\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\nconst RPC_NAME_URL_MAPPING: StringMap = {};\n\nRPC_NAME_URL_MAPPING['BatchGetDocuments'] = 'batchGet';\nRPC_NAME_URL_MAPPING['Commit'] = 'commit';\nRPC_NAME_URL_MAPPING['RunQuery'] = 'runQuery';\n\nconst RPC_URL_VERSION = 'v1';\nconst X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\n\n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nexport abstract class RestConnection implements Connection {\n  protected readonly databaseId: DatabaseId;\n  protected readonly baseUrl: string;\n  private readonly databaseRoot: string;\n\n  constructor(private readonly databaseInfo: DatabaseInfo) {\n    this.databaseId = databaseInfo.databaseId;\n    const proto = databaseInfo.ssl ? 'https' : 'http';\n    this.baseUrl = proto + '://' + databaseInfo.host;\n    this.databaseRoot =\n      'projects/' +\n      this.databaseId.projectId +\n      '/databases/' +\n      this.databaseId.database +\n      '/documents';\n  }\n\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    req: Req,\n    token: Token | null\n  ): Promise<Resp> {\n    const url = this.makeUrl(rpcName, path);\n    logDebug(LOG_TAG, 'Sending: ', url, req);\n\n    const headers = {};\n    this.modifyHeadersForRequest(headers, token);\n\n    return this.performRPCRequest<Req, Resp>(rpcName, url, headers, req).then(\n      response => {\n        logDebug(LOG_TAG, 'Received: ', response);\n        return response;\n      },\n      (err: FirestoreError) => {\n        logWarn(\n          LOG_TAG,\n          `${rpcName} failed with error: `,\n          err,\n          'url: ',\n          url,\n          'request:',\n          req\n        );\n        throw err;\n      }\n    );\n  }\n\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp[]> {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.invokeRPC<Req, Resp[]>(rpcName, path, request, token);\n  }\n\n  abstract openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp>;\n\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n  protected modifyHeadersForRequest(\n    headers: StringMap,\n    token: Token | null\n  ): void {\n    headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n\n    // Content-Type: text/plain will avoid preflight requests which might\n    // mess with CORS and redirects by proxies. If we add custom headers\n    // we will need to change this code to potentially use the $httpOverwrite\n    // parameter supported by ESF to avoid triggering preflight requests.\n    headers['Content-Type'] = 'text/plain';\n\n    if (token) {\n      for (const header in token.authHeaders) {\n        if (token.authHeaders.hasOwnProperty(header)) {\n          headers[header] = token.authHeaders[header];\n        }\n      }\n    }\n  }\n\n  /**\n   * Performs an RPC request using an implementation specific networking layer.\n   */\n  protected abstract performRPCRequest<Req, Resp>(\n    rpcName: string,\n    url: string,\n    headers: StringMap,\n    body: Req\n  ): Promise<Resp>;\n\n  private makeUrl(rpcName: string, path: string): string {\n    const urlRpcName = RPC_NAME_URL_MAPPING[rpcName];\n    debugAssert(\n      urlRpcName !== undefined,\n      'Unknown REST mapping for: ' + rpcName\n    );\n    return `${this.baseUrl}/${RPC_URL_VERSION}/${path}:${urlRpcName}`;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createWebChannelTransport,\n  ErrorCode,\n  EventType,\n  WebChannel,\n  WebChannelError,\n  WebChannelOptions,\n  XhrIo\n} from '@firebase/webchannel-wrapper';\n\nimport {\n  isBrowserExtension,\n  isElectron,\n  isIE,\n  isMobileCordova,\n  isReactNative,\n  isUWP\n} from '@firebase/util';\n\nimport { Token } from '../../api/credentials';\nimport { DatabaseInfo } from '../../core/database_info';\nimport { Stream } from '../../remote/connection';\nimport {\n  mapCodeFromRpcStatus,\n  mapCodeFromHttpResponseErrorStatus\n} from '../../remote/rpc_error';\nimport { StreamBridge } from '../../remote/stream_bridge';\nimport { fail, hardAssert } from '../../util/assert';\nimport { Code, FirestoreError } from '../../util/error';\nimport { logDebug, logWarn } from '../../util/log';\nimport { Rejecter, Resolver } from '../../util/promise';\nimport { StringMap } from '../../util/types';\nimport { RestConnection } from '../../remote/rest_connection';\n\nconst LOG_TAG = 'Connection';\n\nconst RPC_STREAM_SERVICE = 'google.firestore.v1.Firestore';\n\nconst XHR_TIMEOUT_SECS = 15;\n\nexport class WebChannelConnection extends RestConnection {\n  private readonly forceLongPolling: boolean;\n  private readonly autoDetectLongPolling: boolean;\n\n  constructor(info: DatabaseInfo) {\n    super(info);\n    this.forceLongPolling = info.forceLongPolling;\n    this.autoDetectLongPolling = info.autoDetectLongPolling;\n  }\n\n  protected performRPCRequest<Req, Resp>(\n    rpcName: string,\n    url: string,\n    headers: StringMap,\n    body: Req\n  ): Promise<Resp> {\n    return new Promise((resolve: Resolver<Resp>, reject: Rejecter) => {\n      const xhr = new XhrIo();\n      xhr.listenOnce(EventType.COMPLETE, () => {\n        try {\n          switch (xhr.getLastErrorCode()) {\n            case ErrorCode.NO_ERROR:\n              const json = xhr.getResponseJson() as Resp;\n              logDebug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n              resolve(json);\n              break;\n            case ErrorCode.TIMEOUT:\n              logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n              reject(\n                new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out')\n              );\n              break;\n            case ErrorCode.HTTP_ERROR:\n              const status = xhr.getStatus();\n              logDebug(\n                LOG_TAG,\n                'RPC \"' + rpcName + '\" failed with status:',\n                status,\n                'response text:',\n                xhr.getResponseText()\n              );\n              if (status > 0) {\n                const responseError = (xhr.getResponseJson() as WebChannelError)\n                  .error;\n                if (\n                  !!responseError &&\n                  !!responseError.status &&\n                  !!responseError.message\n                ) {\n                  const firestoreErrorCode = mapCodeFromHttpResponseErrorStatus(\n                    responseError.status\n                  );\n                  reject(\n                    new FirestoreError(\n                      firestoreErrorCode,\n                      responseError.message\n                    )\n                  );\n                } else {\n                  reject(\n                    new FirestoreError(\n                      Code.UNKNOWN,\n                      'Server responded with status ' + xhr.getStatus()\n                    )\n                  );\n                }\n              } else {\n                // If we received an HTTP_ERROR but there's no status code,\n                // it's most probably a connection issue\n                reject(\n                  new FirestoreError(Code.UNAVAILABLE, 'Connection failed.')\n                );\n              }\n              break;\n            default:\n              fail(\n                'RPC \"' +\n                  rpcName +\n                  '\" failed with unanticipated ' +\n                  'webchannel error ' +\n                  xhr.getLastErrorCode() +\n                  ': ' +\n                  xhr.getLastError() +\n                  ', giving up.'\n              );\n          }\n        } finally {\n          logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n        }\n      });\n\n      const requestString = JSON.stringify(body);\n      xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n    });\n  }\n\n  openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp> {\n    const urlParts = [\n      this.baseUrl,\n      '/',\n      RPC_STREAM_SERVICE,\n      '/',\n      rpcName,\n      '/channel'\n    ];\n    const webchannelTransport = createWebChannelTransport();\n    const request: WebChannelOptions = {\n      // Required for backend stickiness, routing behavior is based on this\n      // parameter.\n      httpSessionIdParam: 'gsessionid',\n      initMessageHeaders: {},\n      messageUrlParams: {\n        // This param is used to improve routing and project isolation by the\n        // backend and must be included in every request.\n        database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`\n      },\n      sendRawJson: true,\n      supportsCrossDomainXhr: true,\n      internalChannelParams: {\n        // Override the default timeout (randomized between 10-20 seconds) since\n        // a large write batch on a slow internet connection may take a long\n        // time to send to the backend. Rather than have WebChannel impose a\n        // tight timeout which could lead to infinite timeouts and retries, we\n        // set it very large (5-10 minutes) and rely on the browser's builtin\n        // timeouts to kick in if the request isn't working.\n        forwardChannelRequestTimeoutMs: 10 * 60 * 1000\n      },\n      forceLongPolling: this.forceLongPolling,\n      detectBufferingProxy: this.autoDetectLongPolling\n    };\n\n    this.modifyHeadersForRequest(request.initMessageHeaders!, token);\n\n    // Sending the custom headers we just added to request.initMessageHeaders\n    // (Authorization, etc.) will trigger the browser to make a CORS preflight\n    // request because the XHR will no longer meet the criteria for a \"simple\"\n    // CORS request:\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests\n    //\n    // Therefore to avoid the CORS preflight request (an extra network\n    // roundtrip), we use the httpHeadersOverwriteParam option to specify that\n    // the headers should instead be encoded into a special \"$httpHeaders\" query\n    // parameter, which is recognized by the webchannel backend. This is\n    // formally defined here:\n    // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32\n    //\n    // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request\n    // doesn't have an Origin header. So we have to exclude a few browser environments that are\n    // known to (sometimes) not include an Origin. See\n    // https://github.com/firebase/firebase-js-sdk/issues/1491.\n    if (\n      !isMobileCordova() &&\n      !isReactNative() &&\n      !isElectron() &&\n      !isIE() &&\n      !isUWP() &&\n      !isBrowserExtension()\n    ) {\n      request.httpHeadersOverwriteParam = '$httpHeaders';\n    }\n\n    const url = urlParts.join('');\n    logDebug(LOG_TAG, 'Creating WebChannel: ' + url, request);\n    const channel = webchannelTransport.createWebChannel(url, request);\n\n    // WebChannel supports sending the first message with the handshake - saving\n    // a network round trip. However, it will have to call send in the same\n    // JS event loop as open. In order to enforce this, we delay actually\n    // opening the WebChannel until send is called. Whether we have called\n    // open is tracked with this variable.\n    let opened = false;\n\n    // A flag to determine whether the stream was closed (by us or through an\n    // error/close event) to avoid delivering multiple close events or sending\n    // on a closed stream\n    let closed = false;\n\n    const streamBridge = new StreamBridge<Req, Resp>({\n      sendFn: (msg: Req) => {\n        if (!closed) {\n          if (!opened) {\n            logDebug(LOG_TAG, 'Opening WebChannel transport.');\n            channel.open();\n            opened = true;\n          }\n          logDebug(LOG_TAG, 'WebChannel sending:', msg);\n          channel.send(msg);\n        } else {\n          logDebug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n        }\n      },\n      closeFn: () => channel.close()\n    });\n\n    // Closure events are guarded and exceptions are swallowed, so catch any\n    // exception and rethrow using a setTimeout so they become visible again.\n    // Note that eventually this function could go away if we are confident\n    // enough the code is exception free.\n    const unguardedEventListen = <T>(\n      type: string,\n      fn: (param?: T) => void\n    ): void => {\n      // TODO(dimond): closure typing seems broken because WebChannel does\n      // not implement goog.events.Listenable\n      channel.listen(type, (param: unknown) => {\n        try {\n          fn(param as T);\n        } catch (e) {\n          setTimeout(() => {\n            throw e;\n          }, 0);\n        }\n      });\n    };\n\n    unguardedEventListen(WebChannel.EventType.OPEN, () => {\n      if (!closed) {\n        logDebug(LOG_TAG, 'WebChannel transport opened.');\n      }\n    });\n\n    unguardedEventListen(WebChannel.EventType.CLOSE, () => {\n      if (!closed) {\n        closed = true;\n        logDebug(LOG_TAG, 'WebChannel transport closed');\n        streamBridge.callOnClose();\n      }\n    });\n\n    unguardedEventListen<Error>(WebChannel.EventType.ERROR, err => {\n      if (!closed) {\n        closed = true;\n        logWarn(LOG_TAG, 'WebChannel transport errored:', err);\n        streamBridge.callOnClose(\n          new FirestoreError(\n            Code.UNAVAILABLE,\n            'The operation could not be completed'\n          )\n        );\n      }\n    });\n\n    // WebChannel delivers message events as array. If batching is not enabled\n    // (it's off by default) each message will be delivered alone, resulting in\n    // a single element array.\n    interface WebChannelResponse {\n      data: Resp[];\n    }\n\n    unguardedEventListen<WebChannelResponse>(\n      WebChannel.EventType.MESSAGE,\n      msg => {\n        if (!closed) {\n          const msgData = msg!.data[0];\n          hardAssert(!!msgData, 'Got a webchannel message without data.');\n          // TODO(b/35143891): There is a bug in One Platform that caused errors\n          // (and only errors) to be wrapped in an extra array. To be forward\n          // compatible with the bug we need to check either condition. The latter\n          // can be removed once the fix has been rolled out.\n          // Use any because msgData.error is not typed.\n          const msgDataOrError: WebChannelError | object = msgData;\n          const error =\n            msgDataOrError.error ||\n            (msgDataOrError as WebChannelError[])[0]?.error;\n          if (error) {\n            logDebug(LOG_TAG, 'WebChannel received error:', error);\n            // error.status will be a string like 'OK' or 'NOT_FOUND'.\n            const status: string = error.status;\n            let code = mapCodeFromRpcStatus(status);\n            let message = error.message;\n            if (code === undefined) {\n              code = Code.INTERNAL;\n              message =\n                'Unknown error status: ' +\n                status +\n                ' with message ' +\n                error.message;\n            }\n            // Mark closed so no further events are propagated\n            closed = true;\n            streamBridge.callOnClose(new FirestoreError(code, message));\n            channel.close();\n          } else {\n            logDebug(LOG_TAG, 'WebChannel received:', msgData);\n            streamBridge.callOnMessage(msgData);\n          }\n        }\n      }\n    );\n\n    setTimeout(() => {\n      // Technically we could/should wait for the WebChannel opened event,\n      // but because we want to send the first message with the WebChannel\n      // handshake we pretend the channel opened here (asynchronously), and\n      // then delay the actual open until the first message is sent.\n      streamBridge.callOnOpen();\n    }, 0);\n    return streamBridge;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logDebug } from '../../util/log';\nimport {\n  ConnectivityMonitor,\n  ConnectivityMonitorCallback,\n  NetworkStatus\n} from '../../remote/connectivity_monitor';\n\n// References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'ConnectivityMonitor';\n\n/**\n * Browser implementation of ConnectivityMonitor.\n */\nexport class BrowserConnectivityMonitor implements ConnectivityMonitor {\n  private readonly networkAvailableListener = (): void =>\n    this.onNetworkAvailable();\n  private readonly networkUnavailableListener = (): void =>\n    this.onNetworkUnavailable();\n  private callbacks: ConnectivityMonitorCallback[] = [];\n\n  constructor() {\n    this.configureNetworkMonitoring();\n  }\n\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    this.callbacks.push(callback);\n  }\n\n  shutdown(): void {\n    window.removeEventListener('online', this.networkAvailableListener);\n    window.removeEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private configureNetworkMonitoring(): void {\n    window.addEventListener('online', this.networkAvailableListener);\n    window.addEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private onNetworkAvailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: AVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.AVAILABLE);\n    }\n  }\n\n  private onNetworkUnavailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: UNAVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.UNAVAILABLE);\n    }\n  }\n\n  // TODO(chenbrian): Consider passing in window either into this component or\n  // here for testing via FakeWindow.\n  /** Checks that all used attributes of window are available. */\n  static isAvailable(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      window.addEventListener !== undefined &&\n      window.removeEventListener !== undefined\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\n\nexport class NoopConnectivityMonitor implements ConnectivityMonitor {\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    // No-op.\n  }\n\n  shutdown(): void {\n    // No-op.\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Return the Platform-specific serializer monitor. */\nimport { DatabaseId } from '../../core/database_info';\nimport { JsonProtoSerializer } from '../../remote/serializer';\n\nexport function newSerializer(databaseId: DatabaseId): JsonProtoSerializer {\n  return new JsonProtoSerializer(databaseId, /* useProto3Json= */ true);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ClientId,\n  MemorySharedClientState,\n  SharedClientState,\n  WebStorageSharedClientState\n} from '../local/shared_client_state';\nimport {\n  LocalStore,\n  newLocalStore,\n  synchronizeLastDocumentChangeReadTime\n} from '../local/local_store';\nimport {\n  applyActiveTargetsChange,\n  applyBatchState,\n  applyOnlineStateChange,\n  applyPrimaryState,\n  applyTargetState,\n  getActiveClients,\n  syncEngineHandleCredentialChange,\n  newSyncEngine,\n  SyncEngine,\n  ensureWriteCallbacks\n} from './sync_engine';\nimport {\n  fillWritePipeline,\n  newRemoteStore,\n  RemoteStore,\n  remoteStoreApplyPrimaryState,\n  remoteStoreShutdown\n} from '../remote/remote_store';\nimport { EventManager, newEventManager } from './event_manager';\nimport { AsyncQueue } from '../util/async_queue';\nimport { DatabaseInfo } from './database_info';\nimport { Datastore, newDatastore } from '../remote/datastore';\nimport { User } from '../auth/user';\nimport { GarbageCollectionScheduler, Persistence } from '../local/persistence';\nimport { Code, FirestoreError } from '../util/error';\nimport { OnlineStateSource } from './types';\nimport { LruParams, LruScheduler } from '../local/lru_garbage_collector';\nimport { IndexFreeQueryEngine } from '../local/index_free_query_engine';\nimport {\n  indexedDbStoragePrefix,\n  IndexedDbPersistence\n} from '../local/indexeddb_persistence';\nimport {\n  MemoryEagerDelegate,\n  MemoryPersistence\n} from '../local/memory_persistence';\nimport { newConnection, newConnectivityMonitor } from '../platform/connection';\nimport { newSerializer } from '../platform/serializer';\nimport { getDocument, getWindow } from '../platform/dom';\nimport { CredentialsProvider } from '../api/credentials';\n\nexport interface ComponentConfiguration {\n  asyncQueue: AsyncQueue;\n  databaseInfo: DatabaseInfo;\n  credentials: CredentialsProvider;\n  clientId: ClientId;\n  initialUser: User;\n  maxConcurrentLimboResolutions: number;\n}\n\n/**\n * Initializes and wires components that are needed to interface with the local\n * cache. Implementations override `initialize()` to provide all components.\n */\nexport interface OfflineComponentProvider {\n  persistence: Persistence;\n  sharedClientState: SharedClientState;\n  localStore: LocalStore;\n  gcScheduler: GarbageCollectionScheduler | null;\n  synchronizeTabs: boolean;\n\n  initialize(cfg: ComponentConfiguration): Promise<void>;\n\n  terminate(): Promise<void>;\n}\n\n/**\n * Provides all components needed for Firestore with in-memory persistence.\n * Uses EagerGC garbage collection.\n */\nexport class MemoryOfflineComponentProvider\n  implements OfflineComponentProvider {\n  persistence!: Persistence;\n  sharedClientState!: SharedClientState;\n  localStore!: LocalStore;\n  gcScheduler!: GarbageCollectionScheduler | null;\n  synchronizeTabs = false;\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    this.sharedClientState = this.createSharedClientState(cfg);\n    this.persistence = this.createPersistence(cfg);\n    await this.persistence.start();\n    this.gcScheduler = this.createGarbageCollectionScheduler(cfg);\n    this.localStore = this.createLocalStore(cfg);\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    return null;\n  }\n\n  createLocalStore(cfg: ComponentConfiguration): LocalStore {\n    return newLocalStore(\n      this.persistence,\n      new IndexFreeQueryEngine(),\n      cfg.initialUser\n    );\n  }\n\n  createPersistence(cfg: ComponentConfiguration): Persistence {\n    return new MemoryPersistence(MemoryEagerDelegate.factory);\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    return new MemorySharedClientState();\n  }\n\n  async terminate(): Promise<void> {\n    if (this.gcScheduler) {\n      this.gcScheduler.stop();\n    }\n    await this.sharedClientState.shutdown();\n    await this.persistence.shutdown();\n  }\n}\n\n/**\n * Provides all components needed for Firestore with IndexedDB persistence.\n */\nexport class IndexedDbOfflineComponentProvider extends MemoryOfflineComponentProvider {\n  persistence!: IndexedDbPersistence;\n  sharedClientState!: SharedClientState;\n  localStore!: LocalStore;\n  gcScheduler!: GarbageCollectionScheduler | null;\n  synchronizeTabs = false;\n\n  constructor(\n    protected readonly onlineComponentProvider: OnlineComponentProvider,\n    protected readonly cacheSizeBytes: number | undefined,\n    protected readonly forceOwnership: boolean | undefined\n  ) {\n    super();\n  }\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    await super.initialize(cfg);\n    await synchronizeLastDocumentChangeReadTime(this.localStore);\n\n    await this.onlineComponentProvider.initialize(this, cfg);\n\n    // Enqueue writes from a previous session\n    await ensureWriteCallbacks(this.onlineComponentProvider.syncEngine);\n    await fillWritePipeline(this.onlineComponentProvider.remoteStore);\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    const garbageCollector = this.persistence.referenceDelegate\n      .garbageCollector;\n    return new LruScheduler(garbageCollector, cfg.asyncQueue);\n  }\n\n  createPersistence(cfg: ComponentConfiguration): IndexedDbPersistence {\n    const persistenceKey = indexedDbStoragePrefix(\n      cfg.databaseInfo.databaseId,\n      cfg.databaseInfo.persistenceKey\n    );\n    const lruParams =\n      this.cacheSizeBytes !== undefined\n        ? LruParams.withCacheSize(this.cacheSizeBytes)\n        : LruParams.DEFAULT;\n    const serializer = newSerializer(cfg.databaseInfo.databaseId);\n\n    return new IndexedDbPersistence(\n      this.synchronizeTabs,\n      persistenceKey,\n      cfg.clientId,\n      lruParams,\n      cfg.asyncQueue,\n      getWindow(),\n      getDocument(),\n      serializer,\n      this.sharedClientState,\n      !!this.forceOwnership\n    );\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    return new MemorySharedClientState();\n  }\n}\n\n/**\n * Provides all components needed for Firestore with multi-tab IndexedDB\n * persistence.\n *\n * In the legacy client, this provider is used to provide both multi-tab and\n * non-multi-tab persistence since we cannot tell at build time whether\n * `synchronizeTabs` will be enabled.\n */\nexport class MultiTabOfflineComponentProvider extends IndexedDbOfflineComponentProvider {\n  synchronizeTabs = true;\n\n  constructor(\n    protected readonly onlineComponentProvider: OnlineComponentProvider,\n    protected readonly cacheSizeBytes: number | undefined\n  ) {\n    super(onlineComponentProvider, cacheSizeBytes, /* forceOwnership= */ false);\n  }\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    await super.initialize(cfg);\n\n    const syncEngine = this.onlineComponentProvider.syncEngine;\n\n    if (this.sharedClientState instanceof WebStorageSharedClientState) {\n      this.sharedClientState.syncEngine = {\n        applyBatchState: applyBatchState.bind(null, syncEngine),\n        applyTargetState: applyTargetState.bind(null, syncEngine),\n        applyActiveTargetsChange: applyActiveTargetsChange.bind(\n          null,\n          syncEngine\n        ),\n        getActiveClients: getActiveClients.bind(null, syncEngine)\n      };\n      await this.sharedClientState.start();\n    }\n\n    // NOTE: This will immediately call the listener, so we make sure to\n    // set it after localStore / remoteStore are started.\n    await this.persistence.setPrimaryStateListener(async isPrimary => {\n      await applyPrimaryState(\n        this.onlineComponentProvider.syncEngine,\n        isPrimary\n      );\n      if (this.gcScheduler) {\n        if (isPrimary && !this.gcScheduler.started) {\n          this.gcScheduler.start(this.localStore);\n        } else if (!isPrimary) {\n          this.gcScheduler.stop();\n        }\n      }\n    });\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    const window = getWindow();\n    if (!WebStorageSharedClientState.isAvailable(window)) {\n      throw new FirestoreError(\n        Code.UNIMPLEMENTED,\n        'IndexedDB persistence is only available on platforms that support LocalStorage.'\n      );\n    }\n    const persistenceKey = indexedDbStoragePrefix(\n      cfg.databaseInfo.databaseId,\n      cfg.databaseInfo.persistenceKey\n    );\n    return new WebStorageSharedClientState(\n      window,\n      cfg.asyncQueue,\n      persistenceKey,\n      cfg.clientId,\n      cfg.initialUser\n    );\n  }\n}\n\n/**\n * Initializes and wires the components that are needed to interface with the\n * network.\n */\nexport class OnlineComponentProvider {\n  protected localStore!: LocalStore;\n  protected sharedClientState!: SharedClientState;\n  datastore!: Datastore;\n  eventManager!: EventManager;\n  remoteStore!: RemoteStore;\n  syncEngine!: SyncEngine;\n\n  async initialize(\n    offlineComponentProvider: OfflineComponentProvider,\n    cfg: ComponentConfiguration\n  ): Promise<void> {\n    if (this.localStore) {\n      // OnlineComponentProvider may get initialized multiple times if\n      // multi-tab persistence is used.\n      return;\n    }\n\n    this.localStore = offlineComponentProvider.localStore;\n    this.sharedClientState = offlineComponentProvider.sharedClientState;\n    this.datastore = this.createDatastore(cfg);\n    this.remoteStore = this.createRemoteStore(cfg);\n    this.eventManager = this.createEventManager(cfg);\n    this.syncEngine = this.createSyncEngine(\n      cfg,\n      /* startAsPrimary=*/ !offlineComponentProvider.synchronizeTabs\n    );\n\n    this.sharedClientState.onlineStateHandler = onlineState =>\n      applyOnlineStateChange(\n        this.syncEngine,\n        onlineState,\n        OnlineStateSource.SharedClientState\n      );\n\n    this.remoteStore.remoteSyncer.handleCredentialChange = syncEngineHandleCredentialChange.bind(\n      null,\n      this.syncEngine\n    );\n\n    await remoteStoreApplyPrimaryState(\n      this.remoteStore,\n      this.syncEngine.isPrimaryClient\n    );\n  }\n\n  createEventManager(cfg: ComponentConfiguration): EventManager {\n    return newEventManager();\n  }\n\n  createDatastore(cfg: ComponentConfiguration): Datastore {\n    const serializer = newSerializer(cfg.databaseInfo.databaseId);\n    const connection = newConnection(cfg.databaseInfo);\n    return newDatastore(cfg.credentials, connection, serializer);\n  }\n\n  createRemoteStore(cfg: ComponentConfiguration): RemoteStore {\n    return newRemoteStore(\n      this.localStore,\n      this.datastore,\n      cfg.asyncQueue,\n      onlineState =>\n        applyOnlineStateChange(\n          this.syncEngine,\n          onlineState,\n          OnlineStateSource.RemoteStore\n        ),\n      newConnectivityMonitor()\n    );\n  }\n\n  createSyncEngine(\n    cfg: ComponentConfiguration,\n    startAsPrimary: boolean\n  ): SyncEngine {\n    return newSyncEngine(\n      this.localStore,\n      this.remoteStore,\n      this.eventManager,\n      this.sharedClientState,\n      cfg.initialUser,\n      cfg.maxConcurrentLimboResolutions,\n      startAsPrimary\n    );\n  }\n\n  terminate(): Promise<void> {\n    return remoteStoreShutdown(this.remoteStore);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebChannelConnection } from './webchannel_connection';\nimport { DatabaseInfo } from '../../core/database_info';\nimport { Connection } from '../../remote/connection';\nimport { ConnectivityMonitor } from '../../remote/connectivity_monitor';\nimport { BrowserConnectivityMonitor } from './connectivity_monitor';\nimport { NoopConnectivityMonitor } from '../../remote/connectivity_monitor_noop';\n\n/** Initializes the WebChannelConnection for the browser. */\nexport function newConnection(databaseInfo: DatabaseInfo): Connection {\n  return new WebChannelConnection(databaseInfo);\n}\n\n/** Return the Platform-specific connectivity monitor. */\nexport function newConnectivityMonitor(): ConnectivityMonitor {\n  if (BrowserConnectivityMonitor.isAvailable()) {\n    return new BrowserConnectivityMonitor();\n  } else {\n    return new NoopConnectivityMonitor();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observer } from '../core/event_manager';\nimport { EventHandler } from './misc';\nimport { FirestoreError } from './error';\n\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nexport class AsyncObserver<T> implements Observer<T> {\n  /**\n   * When set to true, will not raise future events. Necessary to deal with\n   * async detachment of listener.\n   */\n  private muted = false;\n\n  constructor(private observer: Partial<Observer<T>>) {}\n\n  next(value: T): void {\n    if (this.observer.next) {\n      this.scheduleEvent(this.observer.next, value);\n    }\n  }\n\n  error(error: FirestoreError): void {\n    if (this.observer.error) {\n      this.scheduleEvent(this.observer.error, error);\n    } else {\n      console.error('Uncaught Error in snapshot listener:', error);\n    }\n  }\n\n  mute(): void {\n    this.muted = true;\n  }\n\n  private scheduleEvent<E>(eventHandler: EventHandler<E>, event: E): void {\n    if (!this.muted) {\n      setTimeout(() => {\n        if (!this.muted) {\n          eventHandler(event);\n        }\n      }, 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SetOptions } from '@firebase/firestore-types';\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\n\n/** Types accepted by validateType() and related methods for validation. */\nexport type ValidationType =\n  | 'undefined'\n  | 'object'\n  | 'function'\n  | 'boolean'\n  | 'number'\n  | 'string'\n  | 'non-empty string';\n\nexport function validateNonEmptyArgument(\n  functionName: string,\n  argumentName: string,\n  argument?: string\n): asserts argument is string {\n  if (!argument) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() cannot be called with an empty ${argumentName}.`\n    );\n  }\n}\n\nexport function validateSetOptions(\n  methodName: string,\n  options: SetOptions | undefined\n): SetOptions {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid options passed to function ${methodName}(): You cannot ` +\n        'specify both \"merge\" and \"mergeFields\".'\n    );\n  }\n\n  return options;\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n */\nexport function validateIsNotUsedTogether(\n  optionName1: string,\n  argument1: boolean | undefined,\n  optionName2: string,\n  argument2: boolean | undefined\n): void {\n  if (argument1 === true && argument2 === true) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `${optionName1} and ${optionName2} cannot be used together.`\n    );\n  }\n}\n\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nexport function validateDocumentPath(path: ResourcePath): void {\n  if (!DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid document reference. Document references must have an even number of segments, but ${path} has ${path.length}.`\n    );\n  }\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\nexport function validateCollectionPath(path: ResourcePath): void {\n  if (DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid collection reference. Collection references must have an odd number of segments, but ${path} has ${path.length}.`\n    );\n  }\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    (Object.getPrototypeOf(input) === Object.prototype ||\n      Object.getPrototypeOf(input) === null)\n  );\n}\n\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input: unknown): string {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input!);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail('Unknown wrong type: ' + typeof input);\n  }\n}\n\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input: object): string | null {\n  if (input.constructor) {\n    const funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    const results = funcNameRegex.exec(input.constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n  return null;\n}\n\n/**\n * Casts `obj` to `T`. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n */\nexport function cast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  if (!(obj instanceof constructor)) {\n    if (constructor.name === obj.constructor.name) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Type does not match the expected instance. Did you pass a ' +\n          `reference from a different Firestore SDK?`\n      );\n    } else {\n      const description = valueDescription(obj);\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Expected type '${constructor.name}', but it was: ${description}`\n      );\n    }\n  }\n  return obj as T;\n}\n\nexport function validatePositiveNumber(functionName: string, n: number): void {\n  if (n <= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires a positive number, but it was: ${n}.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldPath as PublicFieldPath } from '@firebase/firestore-types';\n\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A field class base class that is shared by the lite, full and legacy SDK,\n * which supports shared code that deals with FieldPaths.\n */\n// Use underscore prefix to hide this class from our Public API.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport abstract class _BaseFieldPath {\n  /** Internal representation of a Firestore field path. */\n  readonly _internalPath: InternalFieldPath;\n\n  constructor(fieldNames: string[]) {\n    for (let i = 0; i < fieldNames.length; ++i) {\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field name at argument $(i + 1). ` +\n            'Field names must not be empty.'\n        );\n      }\n    }\n\n    this._internalPath = new InternalFieldPath(fieldNames);\n  }\n}\n\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a list\n * of field names (referring to a nested field in the document).\n */\nexport class FieldPath extends _BaseFieldPath implements PublicFieldPath {\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    super(fieldNames);\n  }\n\n  static documentId(): FieldPath {\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    return new FieldPath(InternalFieldPath.keyField().canonicalString());\n  }\n\n  isEqual(other: PublicFieldPath): boolean {\n    if (!(other instanceof FieldPath)) {\n      return false;\n    }\n    return this._internalPath.isEqual(other._internalPath);\n  }\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path: string): FieldPath {\n  const found = path.search(RESERVED);\n  if (found >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not contain ` +\n        `'~', '*', '/', '[', or ']'`\n    );\n  }\n  try {\n    return new FieldPath(...path.split('.'));\n  } catch (e) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not be empty, ` +\n        `begin with '.', end with '.', or contain '..'`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ArrayRemoveFieldValueImpl,\n  ArrayUnionFieldValueImpl,\n  DeleteFieldValueImpl,\n  NumericIncrementFieldValueImpl,\n  ServerTimestampFieldValueImpl\n} from '../../../src/api/field_value';\nimport { ParseContext } from '../../../src/api/user_data_reader';\nimport { FieldTransform } from '../../../src/model/mutation';\n\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */\nexport abstract class FieldValue {\n  /**\n   * @param _methodName The public API endpoint that returns this class.\n   */\n  constructor(public _methodName: string) {}\n\n  abstract isEqual(other: FieldValue): boolean;\n  abstract _toFieldTransform(context: ParseContext): FieldTransform | null;\n}\n\n/**\n * Returns a sentinel for use with {@link updateDoc()} or\n * {@link setDoc `setDoc({}, { merge: true })`} to mark a field for deletion.\n */\nexport function deleteField(): FieldValue {\n  return new DeleteFieldValueImpl('deleteField');\n}\n\n/**\n * Returns a sentinel used with {@link setDoc()} or {@link updateDoc()} to\n * include a server-generated timestamp in the written data.\n */\nexport function serverTimestamp(): FieldValue {\n  return new ServerTimestampFieldValueImpl('serverTimestamp');\n}\n\n/**\n * Returns a special value that can be used with {@link setDoc()} or {@link\n * updateDoc()} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements The elements to union into the array.\n * @return The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */\nexport function arrayUnion(...elements: unknown[]): FieldValue {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new ArrayUnionFieldValueImpl('arrayUnion', elements);\n}\n\n/**\n * Returns a special value that can be used with {@link setDoc()} or {@link\n * updateDoc()} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements The elements to remove from the array.\n * @return The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nexport function arrayRemove(...elements: unknown[]): FieldValue {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new ArrayRemoveFieldValueImpl('arrayRemove', elements);\n}\n\n/**\n * Returns a special value that can be used with {@link setDoc()} or {@link\n * updateDoc()} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n The value to increment by.\n * @return The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nexport function increment(n: number): FieldValue {\n  return new NumericIncrementFieldValueImpl('increment', n);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldTransform } from '../model/mutation';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform\n} from '../model/transform_operation';\nimport { ParseContext, parseData, UserDataSource } from './user_data_reader';\nimport { debugAssert } from '../util/assert';\nimport { toNumber } from '../remote/serializer';\nimport { FieldValue } from '../../lite/src/api/field_value';\n\nexport class DeleteFieldValueImpl extends FieldValue {\n  _toFieldTransform(context: ParseContext): null {\n    if (context.dataSource === UserDataSource.MergeSet) {\n      // No transform to add for a delete, but we need to add it to our\n      // fieldMask so it gets deleted.\n      context.fieldMask.push(context.path!);\n    } else if (context.dataSource === UserDataSource.Update) {\n      debugAssert(\n        context.path!.length > 0,\n        `${this._methodName}() at the top level should have already ` +\n          'been handled.'\n      );\n      throw context.createError(\n        `${this._methodName}() can only appear at the top level ` +\n          'of your update data'\n      );\n    } else {\n      // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n      throw context.createError(\n        `${this._methodName}() cannot be used with set() unless you pass ` +\n          '{merge:true}'\n      );\n    }\n    return null;\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof DeleteFieldValueImpl;\n  }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue The sentinel FieldValue for which to create a child\n *     context.\n * @param context The parent context.\n * @param arrayElement Whether or not the FieldValue has an array.\n */\nfunction createSentinelChildContext(\n  fieldValue: FieldValue,\n  context: ParseContext,\n  arrayElement: boolean\n): ParseContext {\n  return new ParseContext(\n    {\n      dataSource: UserDataSource.Argument,\n      targetDoc: context.settings.targetDoc,\n      methodName: fieldValue._methodName,\n      arrayElement\n    },\n    context.databaseId,\n    context.serializer,\n    context.ignoreUndefinedProperties\n  );\n}\n\nexport class ServerTimestampFieldValueImpl extends FieldValue {\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    return new FieldTransform(context.path!, new ServerTimestampTransform());\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof ServerTimestampFieldValueImpl;\n  }\n}\n\nexport class ArrayUnionFieldValueImpl extends FieldValue {\n  constructor(methodName: string, private readonly _elements: unknown[]) {\n    super(methodName);\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    const parseContext = createSentinelChildContext(\n      this,\n      context,\n      /*array=*/ true\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayUnionTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class ArrayRemoveFieldValueImpl extends FieldValue {\n  constructor(methodName: string, readonly _elements: unknown[]) {\n    super(methodName);\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    const parseContext = createSentinelChildContext(\n      this,\n      context,\n      /*array=*/ true\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayRemoveTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class NumericIncrementFieldValueImpl extends FieldValue {\n  constructor(methodName: string, private readonly _operand: number) {\n    super(methodName);\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    const numericIncrement = new NumericIncrementTransformOperation(\n      context.serializer,\n      toNumber(context.serializer, this._operand)\n    );\n    return new FieldTransform(context.path!, numericIncrement);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport { primitiveComparator } from '../util/misc';\n\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */\nexport class GeoPoint {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion when typing latitude or longitude.\n  private _lat: number;\n  private _long: number;\n\n  /**\n   * Creates a new immutable `GeoPoint` object with the provided latitude and\n   * longitude values.\n   * @param latitude The latitude as number between -90 and 90.\n   * @param longitude The longitude as number between -180 and 180.\n   */\n  constructor(latitude: number, longitude: number) {\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Latitude must be a number between -90 and 90, but was: ' + latitude\n      );\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Longitude must be a number between -180 and 180, but was: ' + longitude\n      );\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  /**\n   * The latitude of this `GeoPoint` instance.\n   */\n  get latitude(): number {\n    return this._lat;\n  }\n\n  /**\n   * The longitude of this `GeoPoint` instance.\n   */\n  get longitude(): number {\n    return this._long;\n  }\n\n  /**\n   * Returns true if this `GeoPoint` is equal to the provided one.\n   *\n   * @param other The `GeoPoint` to compare against.\n   * @return true if this `GeoPoint` is equal to the provided one.\n   */\n  isEqual(other: GeoPoint): boolean {\n    return this._lat === other._lat && this._long === other._long;\n  }\n\n  toJSON(): { latitude: number; longitude: number } {\n    return { latitude: this._lat, longitude: this._long };\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(other: GeoPoint): number {\n    return (\n      primitiveComparator(this._lat, other._lat) ||\n      primitiveComparator(this._long, other._long)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A class implemented by all API types of the legacy Firestore API which\n * contains a reference to the API type in the firestore-exp API. All internal\n * code unwraps these references, which allows us to only use firestore-exp\n * types in the SDK.\n */\nexport abstract class Compat<T> {\n  constructor(readonly _delegate: T) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentData, SetOptions } from '@firebase/firestore-types';\n\nimport {\n  Value as ProtoValue,\n  MapValue as ProtoMapValue\n} from '../protos/firestore_proto_api';\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation\n} from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { Dict, forEach, isEmpty } from '../util/obj';\nimport { ObjectValue, ObjectValueBuilder } from '../model/object_value';\nimport {\n  JsonProtoSerializer,\n  toBytes,\n  toNumber,\n  toResourceName,\n  toTimestamp\n} from '../remote/serializer';\nimport { _BaseFieldPath, fromDotSeparatedString } from './field_path';\nimport { DeleteFieldValueImpl } from './field_value';\nimport { GeoPoint } from './geo_point';\nimport { newSerializer } from '../platform/serializer';\nimport { Bytes } from '../../lite/src/api/bytes';\nimport { Compat } from '../compat/compat';\nimport { FieldValue } from '../../lite/src/api/field_value';\n\nconst RESERVED_FIELD_REGEX = /^__.*__$/;\n\n/**\n * An untyped Firestore Data Converter interface that is shared between the\n * lite, full and legacy SDK.\n */\nexport interface UntypedFirestoreDataConverter<T> {\n  toFirestore(modelObject: T): DocumentData;\n  toFirestore(modelObject: Partial<T>, options: SetOptions): DocumentData;\n  fromFirestore(snapshot: unknown, options?: unknown): T;\n}\n\n/**\n * A reference to a document in a Firebase project.\n *\n * This class serves as a common base class for the public DocumentReferences\n * exposed in the lite, full and legacy SDK.\n */\n// Use underscore prefix to hide this class from our Public API.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _DocumentKeyReference<T> {\n  constructor(\n    readonly _databaseId: DatabaseId,\n    readonly _key: DocumentKey,\n    readonly _converter: UntypedFirestoreDataConverter<T> | null\n  ) {}\n}\n\n/** The result of parsing document data (e.g. for a setData call). */\nexport class ParsedSetData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask | null,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [] as Mutation[];\n    if (this.fieldMask !== null) {\n      mutations.push(\n        new PatchMutation(key, this.data, this.fieldMask, precondition)\n      );\n    } else {\n      mutations.push(new SetMutation(key, this.data, precondition));\n    }\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nexport class ParsedUpdateData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [\n      new PatchMutation(key, this.data, this.fieldMask, precondition)\n    ] as Mutation[];\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nexport const enum UserDataSource {\n  Set,\n  Update,\n  MergeSet,\n  /**\n   * Indicates the source is a where clause, cursor bound, arrayUnion()\n   * element, etc. Of note, isWrite(source) will return false.\n   */\n  Argument,\n  /**\n   * Indicates that the source is an Argument that may directly contain nested\n   * arrays (e.g. the operand of an `in` query).\n   */\n  ArrayArgument\n}\n\nfunction isWrite(dataSource: UserDataSource): boolean {\n  switch (dataSource) {\n    case UserDataSource.Set: // fall through\n    case UserDataSource.MergeSet: // fall through\n    case UserDataSource.Update:\n      return true;\n    case UserDataSource.Argument:\n    case UserDataSource.ArrayArgument:\n      return false;\n    default:\n      throw fail(`Unexpected case for UserDataSource: ${dataSource}`);\n  }\n}\n\n/** Contains the settings that are mutated as we parse user data. */\ninterface ContextSettings {\n  /** Indicates what kind of API method this data came from. */\n  readonly dataSource: UserDataSource;\n  /** The name of the method the user called to create the ParseContext. */\n  readonly methodName: string;\n  /** The document the user is attempting to modify, if that applies. */\n  readonly targetDoc?: DocumentKey;\n  /**\n   * A path within the object being parsed. This could be an empty path (in\n   * which case the context represents the root of the data being parsed), or a\n   * nonempty path (indicating the context represents a nested location within\n   * the data).\n   */\n  readonly path?: FieldPath;\n  /**\n   * Whether or not this context corresponds to an element of an array.\n   * If not set, elements are treated as if they were outside of arrays.\n   */\n  readonly arrayElement?: boolean;\n  /**\n   * Whether or not a converter was specified in this context. If true, error\n   * messages will reference the converter when invalid data is provided.\n   */\n  readonly hasConverter?: boolean;\n}\n\n/** A \"context\" object passed around while parsing user data. */\nexport class ParseContext {\n  readonly fieldTransforms: FieldTransform[];\n  readonly fieldMask: FieldPath[];\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings The settings for the parser.\n   * @param databaseId The database ID of the Firestore instance.\n   * @param serializer The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms A mutable list of field transforms encountered while\n   *     parsing the data.\n   * @param fieldMask A mutable list of field paths encountered while parsing\n   *     the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(\n    readonly settings: ContextSettings,\n    readonly databaseId: DatabaseId,\n    readonly serializer: JsonProtoSerializer,\n    readonly ignoreUndefinedProperties: boolean,\n    fieldTransforms?: FieldTransform[],\n    fieldMask?: FieldPath[]\n  ) {\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    if (fieldTransforms === undefined) {\n      this.validatePath();\n    }\n    this.fieldTransforms = fieldTransforms || [];\n    this.fieldMask = fieldMask || [];\n  }\n\n  get path(): FieldPath | undefined {\n    return this.settings.path;\n  }\n\n  get dataSource(): UserDataSource {\n    return this.settings.dataSource;\n  }\n\n  /** Returns a new context with the specified settings overwritten. */\n  contextWith(configuration: Partial<ContextSettings>): ParseContext {\n    return new ParseContext(\n      { ...this.settings, ...configuration },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n  }\n\n  childContextForField(field: string): ParseContext {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePathSegment(field);\n    return context;\n  }\n\n  childContextForFieldPath(field: FieldPath): ParseContext {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePath();\n    return context;\n  }\n\n  childContextForArray(index: number): ParseContext {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.contextWith({ path: undefined, arrayElement: true });\n  }\n\n  createError(reason: string): FirestoreError {\n    return createError(\n      reason,\n      this.settings.methodName,\n      this.settings.hasConverter || false,\n      this.path,\n      this.settings.targetDoc\n    );\n  }\n\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(fieldPath: FieldPath): boolean {\n    return (\n      this.fieldMask.find(field => fieldPath.isPrefixOf(field)) !== undefined ||\n      this.fieldTransforms.find(transform =>\n        fieldPath.isPrefixOf(transform.field)\n      ) !== undefined\n    );\n  }\n\n  private validatePath(): void {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (!this.path) {\n      return;\n    }\n    for (let i = 0; i < this.path.length; i++) {\n      this.validatePathSegment(this.path.get(i));\n    }\n  }\n\n  private validatePathSegment(segment: string): void {\n    if (segment.length === 0) {\n      throw this.createError('Document fields must not be empty');\n    }\n    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n      throw this.createError('Document fields cannot begin and end with \"__\"');\n    }\n  }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nexport class UserDataReader {\n  private readonly serializer: JsonProtoSerializer;\n\n  constructor(\n    private readonly databaseId: DatabaseId,\n    private readonly ignoreUndefinedProperties: boolean,\n    serializer?: JsonProtoSerializer\n  ) {\n    this.serializer = serializer || newSerializer(databaseId);\n  }\n\n  /** Creates a new top-level parse context. */\n  createContext(\n    dataSource: UserDataSource,\n    methodName: string,\n    targetDoc?: DocumentKey,\n    hasConverter = false\n  ): ParseContext {\n    return new ParseContext(\n      {\n        dataSource,\n        methodName,\n        targetDoc,\n        path: FieldPath.emptyPath(),\n        arrayElement: false,\n        hasConverter\n      },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties\n    );\n  }\n}\n\n/** Parse document data from a set() call. */\nexport function parseSetData(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  input: unknown,\n  hasConverter: boolean,\n  options: SetOptions = {}\n): ParsedSetData {\n  const context = userDataReader.createContext(\n    options.merge || options.mergeFields\n      ? UserDataSource.MergeSet\n      : UserDataSource.Set,\n    methodName,\n    targetDoc,\n    hasConverter\n  );\n  validatePlainObject('Data must be an object, but it was:', context, input);\n  const updateData = parseObject(input, context)!;\n\n  let fieldMask: FieldMask | null;\n  let fieldTransforms: FieldTransform[];\n\n  if (options.merge) {\n    fieldMask = new FieldMask(context.fieldMask);\n    fieldTransforms = context.fieldTransforms;\n  } else if (options.mergeFields) {\n    const validatedFieldPaths: FieldPath[] = [];\n\n    for (const stringOrFieldPath of options.mergeFields) {\n      let fieldPath: FieldPath;\n\n      if (stringOrFieldPath instanceof _BaseFieldPath) {\n        fieldPath = stringOrFieldPath._internalPath;\n      } else if (typeof stringOrFieldPath === 'string') {\n        fieldPath = fieldPathFromDotSeparatedString(\n          methodName,\n          stringOrFieldPath,\n          targetDoc\n        );\n      } else {\n        throw fail('Expected stringOrFieldPath to be a string or a FieldPath');\n      }\n\n      if (!context.contains(fieldPath)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Field '${fieldPath}' is specified in your field mask but missing from your input data.`\n        );\n      }\n\n      if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {\n        validatedFieldPaths.push(fieldPath);\n      }\n    }\n\n    fieldMask = new FieldMask(validatedFieldPaths);\n    fieldTransforms = context.fieldTransforms.filter(transform =>\n      fieldMask!.covers(transform.field)\n    );\n  } else {\n    fieldMask = null;\n    fieldTransforms = context.fieldTransforms;\n  }\n\n  return new ParsedSetData(\n    new ObjectValue(updateData),\n    fieldMask,\n    fieldTransforms\n  );\n}\n\n/** Parse update data from an update() call. */\nexport function parseUpdateData(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  input: unknown\n): ParsedUpdateData {\n  const context = userDataReader.createContext(\n    UserDataSource.Update,\n    methodName,\n    targetDoc\n  );\n  validatePlainObject('Data must be an object, but it was:', context, input);\n\n  const fieldMaskPaths: FieldPath[] = [];\n  const updateData = new ObjectValueBuilder();\n  forEach(input as Dict<unknown>, (key, value) => {\n    const path = fieldPathFromDotSeparatedString(methodName, key, targetDoc);\n\n    const childContext = context.childContextForFieldPath(path);\n    if (\n      value instanceof DeleteFieldValueImpl ||\n      (value instanceof Compat &&\n        value._delegate instanceof DeleteFieldValueImpl)\n    ) {\n      // Add it to the field mask, but don't add anything to updateData.\n      fieldMaskPaths.push(path);\n    } else {\n      const parsedValue = parseData(value, childContext);\n      if (parsedValue != null) {\n        fieldMaskPaths.push(path);\n        updateData.set(path, parsedValue);\n      }\n    }\n  });\n\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(\n    updateData.build(),\n    mask,\n    context.fieldTransforms\n  );\n}\n\n/** Parse update data from a list of field/value arguments. */\nexport function parseUpdateVarargs(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  field: string | _BaseFieldPath,\n  value: unknown,\n  moreFieldsAndValues: unknown[]\n): ParsedUpdateData {\n  const context = userDataReader.createContext(\n    UserDataSource.Update,\n    methodName,\n    targetDoc\n  );\n  const keys = [fieldPathFromArgument(methodName, field, targetDoc)];\n  const values = [value];\n\n  if (moreFieldsAndValues.length % 2 !== 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() needs to be called with an even number ` +\n        'of arguments that alternate between field names and values.'\n    );\n  }\n\n  for (let i = 0; i < moreFieldsAndValues.length; i += 2) {\n    keys.push(\n      fieldPathFromArgument(\n        methodName,\n        moreFieldsAndValues[i] as string | _BaseFieldPath\n      )\n    );\n    values.push(moreFieldsAndValues[i + 1]);\n  }\n\n  const fieldMaskPaths: FieldPath[] = [];\n  const updateData = new ObjectValueBuilder();\n\n  // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n  for (let i = keys.length - 1; i >= 0; --i) {\n    if (!fieldMaskContains(fieldMaskPaths, keys[i])) {\n      const path = keys[i];\n      const value = values[i];\n      const childContext = context.childContextForFieldPath(path);\n      if (\n        value instanceof DeleteFieldValueImpl ||\n        (value instanceof Compat &&\n          value._delegate instanceof DeleteFieldValueImpl)\n      ) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths.push(path);\n      } else {\n        const parsedValue = parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths.push(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    }\n  }\n\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(\n    updateData.build(),\n    mask,\n    context.fieldTransforms\n  );\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */\nexport function parseQueryValue(\n  userDataReader: UserDataReader,\n  methodName: string,\n  input: unknown,\n  allowArrays = false\n): ProtoValue {\n  const context = userDataReader.createContext(\n    allowArrays ? UserDataSource.ArrayArgument : UserDataSource.Argument,\n    methodName\n  );\n  const parsed = parseData(input, context);\n  debugAssert(parsed != null, 'Parsed data should not be null.');\n  debugAssert(\n    context.fieldTransforms.length === 0,\n    'Field transforms should have been disallowed.'\n  );\n  return parsed;\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input Data to be parsed.\n * @param context A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @return The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\nexport function parseData(\n  input: unknown,\n  context: ParseContext\n): ProtoValue | null {\n  // Unwrap the API type from the Compat SDK. This will return the API type\n  // from firestore-exp.\n  if (input instanceof Compat) {\n    input = input._delegate;\n  }\n\n  if (looksLikeJsonObject(input)) {\n    validatePlainObject('Unsupported field value:', context, input);\n    return parseObject(input, context);\n  } else if (input instanceof FieldValue) {\n    // FieldValues usually parse into transforms (except FieldValue.delete())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    parseSentinelFieldValue(input, context);\n    return null;\n  } else {\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    if (context.path) {\n      context.fieldMask.push(context.path);\n    }\n\n    if (input instanceof Array) {\n      // TODO(b/34871131): Include the path containing the array in the error\n      // message.\n      // In the case of IN queries, the parsed data is an array (representing\n      // the set of values to be included for the IN query) that may directly\n      // contain additional arrays (each representing an individual field\n      // value), so we disable this validation.\n      if (\n        context.settings.arrayElement &&\n        context.dataSource !== UserDataSource.ArrayArgument\n      ) {\n        throw context.createError('Nested arrays are not supported');\n      }\n      return parseArray(input as unknown[], context);\n    } else {\n      return parseScalarValue(input, context);\n    }\n  }\n}\n\nfunction parseObject(\n  obj: Dict<unknown>,\n  context: ParseContext\n): { mapValue: ProtoMapValue } {\n  const fields: Dict<ProtoValue> = {};\n\n  if (isEmpty(obj)) {\n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    if (context.path && context.path.length > 0) {\n      context.fieldMask.push(context.path);\n    }\n  } else {\n    forEach(obj, (key: string, val: unknown) => {\n      const parsedValue = parseData(val, context.childContextForField(key));\n      if (parsedValue != null) {\n        fields[key] = parsedValue;\n      }\n    });\n  }\n\n  return { mapValue: { fields } };\n}\n\nfunction parseArray(array: unknown[], context: ParseContext): ProtoValue {\n  const values: ProtoValue[] = [];\n  let entryIndex = 0;\n  for (const entry of array) {\n    let parsedEntry = parseData(\n      entry,\n      context.childContextForArray(entryIndex)\n    );\n    if (parsedEntry == null) {\n      // Just include nulls in the array for fields being replaced with a\n      // sentinel.\n      parsedEntry = { nullValue: 'NULL_VALUE' };\n    }\n    values.push(parsedEntry);\n    entryIndex++;\n  }\n  return { arrayValue: { values } };\n}\n\n/**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\nfunction parseSentinelFieldValue(\n  value: FieldValue,\n  context: ParseContext\n): void {\n  // Sentinels are only supported with writes, and not within arrays.\n  if (!isWrite(context.dataSource)) {\n    throw context.createError(\n      `${value._methodName}() can only be used with update() and set()`\n    );\n  }\n  if (!context.path) {\n    throw context.createError(\n      `${value._methodName}() is not currently supported inside arrays`\n    );\n  }\n\n  const fieldTransform = value._toFieldTransform(context);\n  if (fieldTransform) {\n    context.fieldTransforms.push(fieldTransform);\n  }\n}\n\n/**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @return The parsed value\n */\nfunction parseScalarValue(\n  value: unknown,\n  context: ParseContext\n): ProtoValue | null {\n  if (value === null) {\n    return { nullValue: 'NULL_VALUE' };\n  } else if (typeof value === 'number') {\n    return toNumber(context.serializer, value);\n  } else if (typeof value === 'boolean') {\n    return { booleanValue: value };\n  } else if (typeof value === 'string') {\n    return { stringValue: value };\n  } else if (value instanceof Date) {\n    const timestamp = Timestamp.fromDate(value);\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof Timestamp) {\n    // Firestore backend truncates precision down to microseconds. To ensure\n    // offline mode works the same with regards to truncation, perform the\n    // truncation immediately without waiting for the backend to do that.\n    const timestamp = new Timestamp(\n      value.seconds,\n      Math.floor(value.nanoseconds / 1000) * 1000\n    );\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof GeoPoint) {\n    return {\n      geoPointValue: {\n        latitude: value.latitude,\n        longitude: value.longitude\n      }\n    };\n  } else if (value instanceof Bytes) {\n    return { bytesValue: toBytes(context.serializer, value._byteString) };\n  } else if (value instanceof _DocumentKeyReference) {\n    const thisDb = context.databaseId;\n    const otherDb = value._databaseId;\n    if (!otherDb.isEqual(thisDb)) {\n      throw context.createError(\n        'Document reference is for database ' +\n          `${otherDb.projectId}/${otherDb.database} but should be ` +\n          `for database ${thisDb.projectId}/${thisDb.database}`\n      );\n    }\n    return {\n      referenceValue: toResourceName(\n        value._databaseId || context.databaseId,\n        value._key.path\n      )\n    };\n  } else if (value === undefined && context.ignoreUndefinedProperties) {\n    return null;\n  } else {\n    throw context.createError(\n      `Unsupported field value: ${valueDescription(value)}`\n    );\n  }\n}\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    !(input instanceof Array) &&\n    !(input instanceof Date) &&\n    !(input instanceof Timestamp) &&\n    !(input instanceof GeoPoint) &&\n    !(input instanceof Bytes) &&\n    !(input instanceof _DocumentKeyReference) &&\n    !(input instanceof FieldValue)\n  );\n}\n\nfunction validatePlainObject(\n  message: string,\n  context: ParseContext,\n  input: unknown\n): asserts input is Dict<unknown> {\n  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n    const description = valueDescription(input);\n    if (description === 'an object') {\n      // Massage the error if it was an object.\n      throw context.createError(message + ' a custom object');\n    } else {\n      throw context.createError(message + ' ' + description);\n    }\n  }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(\n  methodName: string,\n  path: string | _BaseFieldPath,\n  targetDoc?: DocumentKey\n): FieldPath {\n  if (path instanceof _BaseFieldPath) {\n    return path._internalPath;\n  } else if (typeof path === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, path);\n  } else {\n    const message = 'Field path arguments must be of type string or FieldPath.';\n    throw createError(\n      message,\n      methodName,\n      /* hasConverter= */ false,\n      /* path= */ undefined,\n      targetDoc\n    );\n  }\n}\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n * @param targetDoc The document against which the field path will be evaluated.\n */\nexport function fieldPathFromDotSeparatedString(\n  methodName: string,\n  path: string,\n  targetDoc?: DocumentKey\n): FieldPath {\n  try {\n    return fromDotSeparatedString(path)._internalPath;\n  } catch (e) {\n    const message = errorMessage(e);\n    throw createError(\n      message,\n      methodName,\n      /* hasConverter= */ false,\n      /* path= */ undefined,\n      targetDoc\n    );\n  }\n}\n\nfunction createError(\n  reason: string,\n  methodName: string,\n  hasConverter: boolean,\n  path?: FieldPath,\n  targetDoc?: DocumentKey\n): FirestoreError {\n  const hasPath = path && !path.isEmpty();\n  const hasDocument = targetDoc !== undefined;\n  let message = `Function ${methodName}() called with invalid data`;\n  if (hasConverter) {\n    message += ' (via `toFirestore()`)';\n  }\n  message += '. ';\n\n  let description = '';\n  if (hasPath || hasDocument) {\n    description += ' (found';\n\n    if (hasPath) {\n      description += ` in field ${path}`;\n    }\n    if (hasDocument) {\n      description += ` in document ${targetDoc}`;\n    }\n    description += ')';\n  }\n\n  return new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    message + reason + description\n  );\n}\n\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error: Error | object): string {\n  return error instanceof Error ? error.message : error.toString();\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\nfunction fieldMaskContains(haystack: FieldPath[], needle: FieldPath): boolean {\n  return haystack.some(v => v.isEqual(needle));\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ParsedSetData, ParsedUpdateData } from '../api/user_data_reader';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\n\nimport { DocumentKey } from '../model/document_key';\nimport {\n  DeleteMutation,\n  Mutation,\n  Precondition,\n  VerifyMutation\n} from '../model/mutation';\nimport {\n  Datastore,\n  invokeBatchGetDocumentsRpc,\n  invokeCommitRpc\n} from '../remote/datastore';\nimport { fail, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { SnapshotVersion } from './snapshot_version';\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nexport class Transaction {\n  // The version of each document that was read during this transaction.\n  private readVersions = new Map</* path */ string, SnapshotVersion>();\n  private mutations: Mutation[] = [];\n  private committed = false;\n\n  /**\n   * A deferred usage error that occurred previously in this transaction that\n   * will cause the transaction to fail once it actually commits.\n   */\n  private lastWriteError: FirestoreError | null = null;\n\n  /**\n   * Set of documents that have been written in the transaction.\n   *\n   * When there's more than one write to the same key in a transaction, any\n   * writes after the first are handled differently.\n   */\n  private writtenDocs: Set</* path= */ string> = new Set();\n\n  constructor(private datastore: Datastore) {}\n\n  async lookup(keys: DocumentKey[]): Promise<MaybeDocument[]> {\n    this.ensureCommitNotCalled();\n\n    if (this.mutations.length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Firestore transactions require all reads to be executed before all writes.'\n      );\n    }\n    const docs = await invokeBatchGetDocumentsRpc(this.datastore, keys);\n    docs.forEach(doc => {\n      if (doc instanceof NoDocument || doc instanceof Document) {\n        this.recordVersion(doc);\n      } else {\n        fail('Document in a transaction was a ' + doc.constructor.name);\n      }\n    });\n    return docs;\n  }\n\n  set(key: DocumentKey, data: ParsedSetData): void {\n    this.write(data.toMutations(key, this.precondition(key)));\n    this.writtenDocs.add(key.toString());\n  }\n\n  update(key: DocumentKey, data: ParsedUpdateData): void {\n    try {\n      this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    } catch (e) {\n      this.lastWriteError = e;\n    }\n    this.writtenDocs.add(key.toString());\n  }\n\n  delete(key: DocumentKey): void {\n    this.write([new DeleteMutation(key, this.precondition(key))]);\n    this.writtenDocs.add(key.toString());\n  }\n\n  async commit(): Promise<void> {\n    this.ensureCommitNotCalled();\n\n    if (this.lastWriteError) {\n      throw this.lastWriteError;\n    }\n    const unwritten = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(mutation => {\n      unwritten.delete(mutation.key.toString());\n    });\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    unwritten.forEach((_, path) => {\n      const key = DocumentKey.fromPath(path);\n      this.mutations.push(new VerifyMutation(key, this.precondition(key)));\n    });\n    await invokeCommitRpc(this.datastore, this.mutations);\n    this.committed = true;\n  }\n\n  private recordVersion(doc: MaybeDocument): void {\n    let docVersion: SnapshotVersion;\n\n    if (doc instanceof Document) {\n      docVersion = doc.version;\n    } else if (doc instanceof NoDocument) {\n      // For deleted docs, we must use baseVersion 0 when we overwrite them.\n      docVersion = SnapshotVersion.min();\n    } else {\n      throw fail('Document in a transaction was a ' + doc.constructor.name);\n    }\n\n    const existingVersion = this.readVersions.get(doc.key.toString());\n    if (existingVersion) {\n      if (!docVersion.isEqual(existingVersion)) {\n        // This transaction will fail no matter what.\n        throw new FirestoreError(\n          Code.ABORTED,\n          'Document version changed between two reads.'\n        );\n      }\n    } else {\n      this.readVersions.set(doc.key.toString(), docVersion);\n    }\n  }\n\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n  private precondition(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    if (!this.writtenDocs.has(key.toString()) && version) {\n      return Precondition.updateTime(version);\n    } else {\n      return Precondition.none();\n    }\n  }\n\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n  private preconditionForUpdate(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(key.toString()) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        // The document doesn't exist, so fail the transaction.\n\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't update a document that doesn't exist.\"\n        );\n      }\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(version);\n    } else {\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Precondition.exists(true);\n    }\n  }\n\n  private write(mutations: Mutation[]): void {\n    this.ensureCommitNotCalled();\n    this.mutations = this.mutations.concat(mutations);\n  }\n\n  private ensureCommitNotCalled(): void {\n    debugAssert(\n      !this.committed,\n      'A transaction object cannot be used after its update callback has been invoked.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '../util/promise';\nimport { TimerId, AsyncQueue } from '../util/async_queue';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { Transaction } from './transaction';\nimport { Datastore } from '../remote/datastore';\nimport { isNullOrUndefined } from '../util/types';\nimport { isPermanentError } from '../remote/rpc_error';\nimport { FirestoreError } from '../util/error';\n\nconst RETRY_COUNT = 5;\n\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nexport class TransactionRunner<T> {\n  private retries = RETRY_COUNT;\n  private backoff: ExponentialBackoff;\n\n  constructor(\n    private readonly asyncQueue: AsyncQueue,\n    private readonly datastore: Datastore,\n    private readonly updateFunction: (transaction: Transaction) => Promise<T>,\n    private readonly deferred: Deferred<T>\n  ) {\n    this.backoff = new ExponentialBackoff(\n      this.asyncQueue,\n      TimerId.TransactionRetry\n    );\n  }\n\n  /** Runs the transaction and sets the result on deferred. */\n  run(): void {\n    this.runWithBackOff();\n  }\n\n  private runWithBackOff(): void {\n    this.backoff.backoffAndRun(async () => {\n      const transaction = new Transaction(this.datastore);\n      const userPromise = this.tryRunUpdateFunction(transaction);\n      if (userPromise) {\n        userPromise\n          .then(result => {\n            this.asyncQueue.enqueueAndForget(() => {\n              return transaction\n                .commit()\n                .then(() => {\n                  this.deferred.resolve(result);\n                })\n                .catch(commitError => {\n                  this.handleTransactionError(commitError);\n                });\n            });\n          })\n          .catch(userPromiseError => {\n            this.handleTransactionError(userPromiseError);\n          });\n      }\n    });\n  }\n\n  private tryRunUpdateFunction(transaction: Transaction): Promise<T> | null {\n    try {\n      const userPromise = this.updateFunction(transaction);\n      if (\n        isNullOrUndefined(userPromise) ||\n        !userPromise.catch ||\n        !userPromise.then\n      ) {\n        this.deferred.reject(\n          Error('Transaction callback must return a Promise')\n        );\n        return null;\n      }\n      return userPromise;\n    } catch (error) {\n      // Do not retry errors thrown by user provided updateFunction.\n      this.deferred.reject(error);\n      return null;\n    }\n  }\n\n  private handleTransactionError(error: Error): void {\n    if (this.retries > 0 && this.isRetryableTransactionError(error)) {\n      this.retries -= 1;\n      this.asyncQueue.enqueueAndForget(() => {\n        this.runWithBackOff();\n        return Promise.resolve();\n      });\n    } else {\n      this.deferred.reject(error);\n    }\n  }\n\n  private isRetryableTransactionError(error: Error): boolean {\n    if (error.name === 'FirebaseError') {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const code = (error as FirestoreError).code;\n      return (\n        code === 'aborted' ||\n        code === 'failed-precondition' ||\n        !isPermanentError(code)\n      );\n    }\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GetOptions } from '@firebase/firestore-types';\n\nimport {\n  CredentialChangeListener,\n  CredentialsProvider\n} from '../api/credentials';\nimport { User } from '../auth/user';\nimport {\n  executeQuery,\n  handleUserChange,\n  LocalStore,\n  readLocalDocument\n} from '../local/local_store';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport {\n  RemoteStore,\n  remoteStoreDisableNetwork,\n  remoteStoreEnableNetwork,\n  remoteStoreHandleCredentialChange\n} from '../remote/remote_store';\nimport { AsyncQueue, wrapInUserErrorIfRecoverable } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { Deferred } from '../util/promise';\nimport {\n  addSnapshotsInSyncListener,\n  EventManager,\n  eventManagerListen,\n  eventManagerUnlisten,\n  ListenOptions,\n  Observer,\n  QueryListener,\n  removeSnapshotsInSyncListener\n} from './event_manager';\nimport {\n  registerPendingWritesCallback,\n  SyncEngine,\n  syncEngineListen,\n  syncEngineUnlisten,\n  syncEngineWrite\n} from './sync_engine';\nimport { View } from './view';\nimport { DatabaseInfo } from './database_info';\nimport { newQueryForPath, Query } from './query';\nimport { Transaction } from './transaction';\nimport { ViewSnapshot } from './view_snapshot';\nimport {\n  ComponentConfiguration,\n  MemoryOfflineComponentProvider,\n  OfflineComponentProvider,\n  OnlineComponentProvider\n} from './component_provider';\nimport { AsyncObserver } from '../util/async_observer';\nimport { debugAssert } from '../util/assert';\nimport { TransactionRunner } from './transaction_runner';\nimport { logDebug } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { Persistence } from '../local/persistence';\nimport { Datastore } from '../remote/datastore';\n\nconst LOG_TAG = 'FirestoreClient';\nexport const MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;\n\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nexport class FirestoreClient {\n  private user = User.UNAUTHENTICATED;\n  private readonly clientId = AutoId.newId();\n  private credentialListener: CredentialChangeListener = () => {};\n  private readonly receivedInitialUser = new Deferred<void>();\n\n  offlineComponents?: OfflineComponentProvider;\n  onlineComponents?: OnlineComponentProvider;\n\n  constructor(\n    private credentials: CredentialsProvider,\n    /**\n     * Asynchronous queue responsible for all of our internal processing. When\n     * we get incoming work from the user (via public API) or the network\n     * (incoming GRPC messages), we should always schedule onto this queue.\n     * This ensures all of our work is properly serialized (e.g. we don't\n     * start processing a new operation while the previous one is waiting for\n     * an async I/O to complete).\n     */\n    public asyncQueue: AsyncQueue,\n    private databaseInfo: DatabaseInfo\n  ) {\n    this.credentials.setChangeListener(user => {\n      logDebug(LOG_TAG, 'Received user=', user.uid);\n      if (!this.user.isEqual(user)) {\n        this.user = user;\n        this.credentialListener(user);\n      }\n      this.receivedInitialUser.resolve();\n    });\n  }\n\n  async getConfiguration(): Promise<ComponentConfiguration> {\n    await this.receivedInitialUser.promise;\n\n    return {\n      asyncQueue: this.asyncQueue,\n      databaseInfo: this.databaseInfo,\n      clientId: this.clientId,\n      credentials: this.credentials,\n      initialUser: this.user,\n      maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS\n    };\n  }\n\n  setCredentialChangeListener(listener: (user: User) => void): void {\n    this.credentialListener = listener;\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.receivedInitialUser.promise.then(() =>\n      this.credentialListener(this.user)\n    );\n  }\n\n  /**\n   * Checks that the client has not been terminated. Ensures that other methods on\n   * this class cannot be called after the client is terminated.\n   */\n  verifyNotTerminated(): void {\n    if (this.asyncQueue.isShuttingDown) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  terminate(): Promise<void> {\n    this.asyncQueue.enterRestrictedMode();\n    const deferred = new Deferred();\n    this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async () => {\n      try {\n        if (this.onlineComponents) {\n          await this.onlineComponents.terminate();\n        }\n        if (this.offlineComponents) {\n          await this.offlineComponents.terminate();\n        }\n\n        // `removeChangeListener` must be called after shutting down the\n        // RemoteStore as it will prevent the RemoteStore from retrieving\n        // auth tokens.\n        this.credentials.removeChangeListener();\n        deferred.resolve();\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(\n          e,\n          `Failed to shutdown persistence`\n        );\n        deferred.reject(firestoreError);\n      }\n    });\n    return deferred.promise;\n  }\n}\n\nexport async function setOfflineComponentProvider(\n  client: FirestoreClient,\n  offlineComponentProvider: OfflineComponentProvider\n): Promise<void> {\n  client.asyncQueue.verifyOperationInProgress();\n\n  logDebug(LOG_TAG, 'Initializing OfflineComponentProvider');\n  const configuration = await client.getConfiguration();\n  await offlineComponentProvider.initialize(configuration);\n\n  client.setCredentialChangeListener(user =>\n    client.asyncQueue.enqueueRetryable(async () => {\n      await handleUserChange(offlineComponentProvider.localStore, user);\n    })\n  );\n\n  // When a user calls clearPersistence() in one client, all other clients\n  // need to be terminated to allow the delete to succeed.\n  offlineComponentProvider.persistence.setDatabaseDeletedListener(() =>\n    client.terminate()\n  );\n\n  client.offlineComponents = offlineComponentProvider;\n}\n\nexport async function setOnlineComponentProvider(\n  client: FirestoreClient,\n  onlineComponentProvider: OnlineComponentProvider\n): Promise<void> {\n  client.asyncQueue.verifyOperationInProgress();\n\n  const offlineComponentProvider = await ensureOfflineComponents(client);\n\n  logDebug(LOG_TAG, 'Initializing OnlineComponentProvider');\n  const configuration = await client.getConfiguration();\n  await onlineComponentProvider.initialize(\n    offlineComponentProvider,\n    configuration\n  );\n  // The CredentialChangeListener of the online component provider takes\n  // precedence over the offline component provider.\n  client.setCredentialChangeListener(user =>\n    client.asyncQueue.enqueueRetryable(() =>\n      remoteStoreHandleCredentialChange(\n        onlineComponentProvider.remoteStore,\n        user\n      )\n    )\n  );\n  client.onlineComponents = onlineComponentProvider;\n}\n\nasync function ensureOfflineComponents(\n  client: FirestoreClient\n): Promise<OfflineComponentProvider> {\n  if (!client.offlineComponents) {\n    logDebug(LOG_TAG, 'Using default OfflineComponentProvider');\n    await setOfflineComponentProvider(\n      client,\n      new MemoryOfflineComponentProvider()\n    );\n  }\n\n  return client.offlineComponents!;\n}\n\nasync function ensureOnlineComponents(\n  client: FirestoreClient\n): Promise<OnlineComponentProvider> {\n  if (!client.onlineComponents) {\n    logDebug(LOG_TAG, 'Using default OnlineComponentProvider');\n    await setOnlineComponentProvider(client, new OnlineComponentProvider());\n  }\n\n  return client.onlineComponents!;\n}\n\nfunction getPersistence(client: FirestoreClient): Promise<Persistence> {\n  return ensureOfflineComponents(client).then(c => c.persistence);\n}\n\nexport function getLocalStore(client: FirestoreClient): Promise<LocalStore> {\n  return ensureOfflineComponents(client).then(c => c.localStore);\n}\n\nfunction getRemoteStore(client: FirestoreClient): Promise<RemoteStore> {\n  return ensureOnlineComponents(client).then(c => c.remoteStore);\n}\n\nfunction getSyncEngine(client: FirestoreClient): Promise<SyncEngine> {\n  return ensureOnlineComponents(client).then(c => c.syncEngine);\n}\n\nfunction getDatastore(client: FirestoreClient): Promise<Datastore> {\n  return ensureOnlineComponents(client).then(c => c.datastore);\n}\n\nexport async function getEventManager(\n  client: FirestoreClient\n): Promise<EventManager> {\n  const onlineComponentProvider = await ensureOnlineComponents(client);\n  const eventManager = onlineComponentProvider.eventManager;\n  eventManager.onListen = syncEngineListen.bind(\n    null,\n    onlineComponentProvider.syncEngine\n  );\n  eventManager.onUnlisten = syncEngineUnlisten.bind(\n    null,\n    onlineComponentProvider.syncEngine\n  );\n  return eventManager;\n}\n\n/** Enables the network connection and re-enqueues all pending operations. */\nexport function firestoreClientEnableNetwork(\n  client: FirestoreClient\n): Promise<void> {\n  return client.asyncQueue.enqueue(async () => {\n    const persistence = await getPersistence(client);\n    const remoteStore = await getRemoteStore(client);\n    persistence.setNetworkEnabled(true);\n    return remoteStoreEnableNetwork(remoteStore);\n  });\n}\n\n/** Disables the network connection. Pending operations will not complete. */\nexport function firestoreClientDisableNetwork(\n  client: FirestoreClient\n): Promise<void> {\n  return client.asyncQueue.enqueue(async () => {\n    const persistence = await getPersistence(client);\n    const remoteStore = await getRemoteStore(client);\n    persistence.setNetworkEnabled(false);\n    return remoteStoreDisableNetwork(remoteStore);\n  });\n}\n\n/**\n * Returns a Promise that resolves when all writes that were pending at the time\n * this method was called received server acknowledgement. An acknowledgement\n * can be either acceptance or rejection.\n */\nexport function firestoreClientWaitForPendingWrites(\n  client: FirestoreClient\n): Promise<void> {\n  const deferred = new Deferred<void>();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const syncEngine = await getSyncEngine(client);\n    return registerPendingWritesCallback(syncEngine, deferred);\n  });\n  return deferred.promise;\n}\n\nexport function firestoreClientListen(\n  client: FirestoreClient,\n  query: Query,\n  options: ListenOptions,\n  observer: Partial<Observer<ViewSnapshot>>\n): () => void {\n  const wrappedObserver = new AsyncObserver(observer);\n  const listener = new QueryListener(query, wrappedObserver, options);\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return eventManagerListen(eventManager, listener);\n  });\n  return () => {\n    wrappedObserver.mute();\n    client.asyncQueue.enqueueAndForget(async () => {\n      const eventManager = await getEventManager(client);\n      return eventManagerUnlisten(eventManager, listener);\n    });\n  };\n}\n\nexport function firestoreClientGetDocumentFromLocalCache(\n  client: FirestoreClient,\n  docKey: DocumentKey\n): Promise<Document | null> {\n  const deferred = new Deferred<Document | null>();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const localStore = await getLocalStore(client);\n    return readDocumentFromCache(localStore, docKey, deferred);\n  });\n  return deferred.promise;\n}\n\nexport function firestoreClientGetDocumentViaSnapshotListener(\n  client: FirestoreClient,\n  key: DocumentKey,\n  options: GetOptions = {}\n): Promise<ViewSnapshot> {\n  const deferred = new Deferred<ViewSnapshot>();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return readDocumentViaSnapshotListener(\n      eventManager,\n      client.asyncQueue,\n      key,\n      options,\n      deferred\n    );\n  });\n  return deferred.promise;\n}\n\nexport function firestoreClientGetDocumentsFromLocalCache(\n  client: FirestoreClient,\n  query: Query\n): Promise<ViewSnapshot> {\n  const deferred = new Deferred<ViewSnapshot>();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const localStore = await getLocalStore(client);\n    return executeQueryFromCache(localStore, query, deferred);\n  });\n  return deferred.promise;\n}\n\nexport function firestoreClientGetDocumentsViaSnapshotListener(\n  client: FirestoreClient,\n  query: Query,\n  options: GetOptions = {}\n): Promise<ViewSnapshot> {\n  const deferred = new Deferred<ViewSnapshot>();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return executeQueryViaSnapshotListener(\n      eventManager,\n      client.asyncQueue,\n      query,\n      options,\n      deferred\n    );\n  });\n  return deferred.promise;\n}\n\nexport function firestoreClientWrite(\n  client: FirestoreClient,\n  mutations: Mutation[]\n): Promise<void> {\n  const deferred = new Deferred<void>();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const syncEngine = await getSyncEngine(client);\n    return syncEngineWrite(syncEngine, mutations, deferred);\n  });\n  return deferred.promise;\n}\n\nexport function firestoreClientAddSnapshotsInSyncListener(\n  client: FirestoreClient,\n  observer: Partial<Observer<void>>\n): () => void {\n  const wrappedObserver = new AsyncObserver(observer);\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return addSnapshotsInSyncListener(eventManager, wrappedObserver);\n  });\n  return () => {\n    wrappedObserver.mute();\n    client.asyncQueue.enqueueAndForget(async () => {\n      const eventManager = await getEventManager(client);\n      return removeSnapshotsInSyncListener(eventManager, wrappedObserver);\n    });\n  };\n}\n\n/**\n * Takes an updateFunction in which a set of reads and writes can be performed\n * atomically. In the updateFunction, the client can read and write values\n * using the supplied transaction object. After the updateFunction, all\n * changes will be committed. If a retryable error occurs (ex: some other\n * client has changed any of the data referenced), then the updateFunction\n * will be called again after a backoff. If the updateFunction still fails\n * after all retries, then the transaction will be rejected.\n *\n * The transaction object passed to the updateFunction contains methods for\n * accessing documents and collections. Unlike other datastore access, data\n * accessed with the transaction will not reflect local changes that have not\n * been committed. For this reason, it is required that all reads are\n * performed before any writes. Transactions must be performed while online.\n */\nexport function firestoreClientTransaction<T>(\n  client: FirestoreClient,\n  updateFunction: (transaction: Transaction) => Promise<T>\n): Promise<T> {\n  const deferred = new Deferred<T>();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const datastore = await getDatastore(client);\n    new TransactionRunner<T>(\n      client.asyncQueue,\n      datastore,\n      updateFunction,\n      deferred\n    ).run();\n  });\n  return deferred.promise;\n}\n\nexport async function readDocumentFromCache(\n  localStore: LocalStore,\n  docKey: DocumentKey,\n  result: Deferred<Document | null>\n): Promise<void> {\n  try {\n    const maybeDoc = await readLocalDocument(localStore, docKey);\n    if (maybeDoc instanceof Document) {\n      result.resolve(maybeDoc);\n    } else if (maybeDoc instanceof NoDocument) {\n      result.resolve(null);\n    } else {\n      result.reject(\n        new FirestoreError(\n          Code.UNAVAILABLE,\n          'Failed to get document from cache. (However, this document may ' +\n            \"exist on the server. Run again without setting 'source' in \" +\n            'the GetOptions to attempt to retrieve the document from the ' +\n            'server.)'\n        )\n      );\n    }\n  } catch (e) {\n    const firestoreError = wrapInUserErrorIfRecoverable(\n      e,\n      `Failed to get document '${docKey} from cache`\n    );\n    result.reject(firestoreError);\n  }\n}\n\n/**\n * Retrieves a latency-compensated document from the backend via a\n * SnapshotListener.\n */\nexport function readDocumentViaSnapshotListener(\n  eventManager: EventManager,\n  asyncQueue: AsyncQueue,\n  key: DocumentKey,\n  options: GetOptions,\n  result: Deferred<ViewSnapshot>\n): Promise<void> {\n  const wrappedObserver = new AsyncObserver({\n    next: (snap: ViewSnapshot) => {\n      // Remove query first before passing event to user to avoid\n      // user actions affecting the now stale query.\n      asyncQueue.enqueueAndForget(() =>\n        eventManagerUnlisten(eventManager, listener)\n      );\n\n      const exists = snap.docs.has(key);\n      if (!exists && snap.fromCache) {\n        // TODO(dimond): If we're online and the document doesn't\n        // exist then we resolve with a doc.exists set to false. If\n        // we're offline however, we reject the Promise in this\n        // case. Two options: 1) Cache the negative response from\n        // the server so we can deliver that even when you're\n        // offline 2) Actually reject the Promise in the online case\n        // if the document doesn't exist.\n        result.reject(\n          new FirestoreError(\n            Code.UNAVAILABLE,\n            'Failed to get document because the client is offline.'\n          )\n        );\n      } else if (\n        exists &&\n        snap.fromCache &&\n        options &&\n        options.source === 'server'\n      ) {\n        result.reject(\n          new FirestoreError(\n            Code.UNAVAILABLE,\n            'Failed to get document from server. (However, this ' +\n              'document does exist in the local cache. Run again ' +\n              'without setting source to \"server\" to ' +\n              'retrieve the cached document.)'\n          )\n        );\n      } else {\n        debugAssert(\n          snap.docs.size <= 1,\n          'Expected zero or a single result on a document-only query'\n        );\n        result.resolve(snap);\n      }\n    },\n    error: e => result.reject(e)\n  });\n\n  const listener = new QueryListener(\n    newQueryForPath(key.path),\n    wrappedObserver,\n    {\n      includeMetadataChanges: true,\n      waitForSyncWhenOnline: true\n    }\n  );\n  return eventManagerListen(eventManager, listener);\n}\n\nexport async function executeQueryFromCache(\n  localStore: LocalStore,\n  query: Query,\n  result: Deferred<ViewSnapshot>\n): Promise<void> {\n  try {\n    const queryResult = await executeQuery(\n      localStore,\n      query,\n      /* usePreviousResults= */ true\n    );\n    const view = new View(query, queryResult.remoteKeys);\n    const viewDocChanges = view.computeDocChanges(queryResult.documents);\n    const viewChange = view.applyChanges(\n      viewDocChanges,\n      /* updateLimboDocuments= */ false\n    );\n    result.resolve(viewChange.snapshot!);\n  } catch (e) {\n    const firestoreError = wrapInUserErrorIfRecoverable(\n      e,\n      `Failed to execute query '${query} against cache`\n    );\n    result.reject(firestoreError);\n  }\n}\n\n/**\n * Retrieves a latency-compensated query snapshot from the backend via a\n * SnapshotListener.\n */\nexport function executeQueryViaSnapshotListener(\n  eventManager: EventManager,\n  asyncQueue: AsyncQueue,\n  query: Query,\n  options: GetOptions,\n  result: Deferred<ViewSnapshot>\n): Promise<void> {\n  const wrappedObserver = new AsyncObserver<ViewSnapshot>({\n    next: snapshot => {\n      // Remove query first before passing event to user to avoid\n      // user actions affecting the now stale query.\n      asyncQueue.enqueueAndForget(() =>\n        eventManagerUnlisten(eventManager, listener)\n      );\n\n      if (snapshot.fromCache && options.source === 'server') {\n        result.reject(\n          new FirestoreError(\n            Code.UNAVAILABLE,\n            'Failed to get documents from server. (However, these ' +\n              'documents may exist in the local cache. Run again ' +\n              'without setting source to \"server\" to ' +\n              'retrieve the cached documents.)'\n          )\n        );\n      } else {\n        result.resolve(snapshot);\n      }\n    },\n    error: e => result.reject(e)\n  });\n\n  const listener = new QueryListener(query, wrappedObserver, {\n    includeMetadataChanges: true,\n    waitForSyncWhenOnline: true\n  });\n  return eventManagerListen(eventManager, listener);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '../model/object_value';\nimport { FirestoreError } from '../util/error';\n\n/**\n * Observer/Subscribe interfaces.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: FirestoreError) => void;\nexport type CompleteFn = () => void;\n\n// Allow for any of the Observer methods to be undefined.\nexport interface PartialObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport interface Unsubscribe {\n  (): void;\n}\n\nexport function isPartialObserver(obj: unknown): boolean {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj: unknown, methods: string[]): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj as JsonObject<unknown>;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentData } from '@firebase/firestore-types';\n\nimport {\n  ArrayValue as ProtoArrayValue,\n  LatLng as ProtoLatLng,\n  MapValue as ProtoMapValue,\n  Timestamp as ProtoTimestamp,\n  Value as ProtoValue\n} from '../protos/firestore_proto_api';\nimport { _DocumentKeyReference } from './user_data_reader';\nimport { GeoPoint } from './geo_point';\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  normalizeByteString,\n  normalizeNumber,\n  normalizeTimestamp,\n  typeOrder\n} from '../model/values';\nimport {\n  getLocalWriteTime,\n  getPreviousValue\n} from '../model/server_timestamps';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach } from '../util/obj';\nimport { TypeOrder } from '../model/object_value';\nimport { ResourcePath } from '../model/path';\nimport { isValidResourceName } from '../remote/serializer';\nimport { logError } from '../util/log';\nimport { ByteString } from '../util/byte_string';\nimport { Bytes } from '../../lite/src/api/bytes';\n\nexport type ServerTimestampBehavior = 'estimate' | 'previous' | 'none';\n\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n */\nexport class UserDataWriter {\n  constructor(\n    private readonly databaseId: DatabaseId,\n    private readonly serverTimestampBehavior: ServerTimestampBehavior,\n    private readonly referenceFactory: (\n      key: DocumentKey\n    ) => _DocumentKeyReference<DocumentData>,\n    private readonly bytesFactory: (bytes: ByteString) => Bytes\n  ) {}\n\n  convertValue(value: ProtoValue): unknown {\n    switch (typeOrder(value)) {\n      case TypeOrder.NullValue:\n        return null;\n      case TypeOrder.BooleanValue:\n        return value.booleanValue!;\n      case TypeOrder.NumberValue:\n        return normalizeNumber(value.integerValue || value.doubleValue);\n      case TypeOrder.TimestampValue:\n        return this.convertTimestamp(value.timestampValue!);\n      case TypeOrder.ServerTimestampValue:\n        return this.convertServerTimestamp(value);\n      case TypeOrder.StringValue:\n        return value.stringValue!;\n      case TypeOrder.BlobValue:\n        return this.bytesFactory(normalizeByteString(value.bytesValue!));\n      case TypeOrder.RefValue:\n        return this.convertReference(value.referenceValue!);\n      case TypeOrder.GeoPointValue:\n        return this.convertGeoPoint(value.geoPointValue!);\n      case TypeOrder.ArrayValue:\n        return this.convertArray(value.arrayValue!);\n      case TypeOrder.ObjectValue:\n        return this.convertObject(value.mapValue!);\n      default:\n        throw fail('Invalid value type: ' + JSON.stringify(value));\n    }\n  }\n\n  private convertObject(mapValue: ProtoMapValue): DocumentData {\n    const result: DocumentData = {};\n    forEach(mapValue.fields || {}, (key, value) => {\n      result[key] = this.convertValue(value);\n    });\n    return result;\n  }\n\n  private convertGeoPoint(value: ProtoLatLng): GeoPoint {\n    return new GeoPoint(\n      normalizeNumber(value.latitude),\n      normalizeNumber(value.longitude)\n    );\n  }\n\n  private convertArray(arrayValue: ProtoArrayValue): unknown[] {\n    return (arrayValue.values || []).map(value => this.convertValue(value));\n  }\n\n  private convertServerTimestamp(value: ProtoValue): unknown {\n    switch (this.serverTimestampBehavior) {\n      case 'previous':\n        const previousValue = getPreviousValue(value);\n        if (previousValue == null) {\n          return null;\n        }\n        return this.convertValue(previousValue);\n      case 'estimate':\n        return this.convertTimestamp(getLocalWriteTime(value));\n      default:\n        return null;\n    }\n  }\n\n  private convertTimestamp(value: ProtoTimestamp): Timestamp {\n    const normalizedValue = normalizeTimestamp(value);\n    return new Timestamp(normalizedValue.seconds, normalizedValue.nanos);\n  }\n\n  private convertReference(name: string): _DocumentKeyReference<DocumentData> {\n    const resourcePath = ResourcePath.fromString(name);\n    hardAssert(\n      isValidResourceName(resourcePath),\n      'ReferenceValue is not valid ' + name\n    );\n    const databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\n    const key = new DocumentKey(resourcePath.popFirst(5));\n\n    if (!databaseId.isEqual(this.databaseId)) {\n      // TODO(b/64130202): Somehow support foreign references.\n      logError(\n        `Document ${key} contains a document ` +\n          `reference within a different database (` +\n          `${databaseId.projectId}/${databaseId.database}) which is not ` +\n          `supported. It will be treated as a reference in the current ` +\n          `database (${this.databaseId.projectId}/${this.databaseId.database}) ` +\n          `instead.`\n      );\n    }\n\n    return this.referenceFactory(key);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, _removeServiceInstance } from '@firebase/app-exp';\nimport { _FirebaseService, FirebaseApp } from '@firebase/app-types-exp';\nimport { Provider } from '@firebase/component';\n\nimport { Code, FirestoreError } from '../../../src/util/error';\nimport { DatabaseId, DatabaseInfo } from '../../../src/core/database_info';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  CredentialsProvider,\n  CredentialsSettings,\n  FirebaseCredentialsProvider\n} from '../../../src/api/credentials';\nimport { removeComponents } from './components';\nimport {\n  LRU_COLLECTION_DISABLED,\n  LRU_DEFAULT_CACHE_SIZE_BYTES,\n  LRU_MINIMUM_CACHE_SIZE_BYTES\n} from '../../../src/local/lru_garbage_collector';\nimport { validateIsNotUsedTogether } from '../../../src/util/input_validation';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'firestore/lite': FirebaseFirestore;\n  }\n}\n\n// settings() defaults:\nconst DEFAULT_HOST = 'firestore.googleapis.com';\nconst DEFAULT_SSL = true;\n\nexport interface Settings {\n  host?: string;\n  ssl?: boolean;\n  ignoreUndefinedProperties?: boolean;\n  cacheSizeBytes?: number;\n  experimentalForceLongPolling?: boolean;\n  experimentalAutoDetectLongPolling?: boolean;\n}\n\n/** Undocumented, private additional settings not exposed in our public API. */\ninterface PrivateSettings extends Settings {\n  // Can be a google-auth-library or gapi client.\n  credentials?: CredentialsSettings;\n}\n\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nexport class FirestoreSettings {\n  /** The hostname to connect to. */\n  readonly host: string;\n\n  /** Whether to use SSL when connecting. */\n  readonly ssl: boolean;\n\n  readonly cacheSizeBytes: number;\n\n  readonly experimentalForceLongPolling: boolean;\n\n  readonly experimentalAutoDetectLongPolling: boolean;\n\n  readonly ignoreUndefinedProperties: boolean;\n\n  // Can be a google-auth-library or gapi client.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  credentials?: any;\n\n  constructor(settings: PrivateSettings) {\n    if (settings.host === undefined) {\n      if (settings.ssl !== undefined) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't provide ssl option if host option is not set\"\n        );\n      }\n      this.host = DEFAULT_HOST;\n      this.ssl = DEFAULT_SSL;\n    } else {\n      this.host = settings.host;\n      this.ssl = settings.ssl ?? DEFAULT_SSL;\n    }\n\n    this.credentials = settings.credentials;\n    this.ignoreUndefinedProperties = !!settings.ignoreUndefinedProperties;\n\n    if (settings.cacheSizeBytes === undefined) {\n      this.cacheSizeBytes = LRU_DEFAULT_CACHE_SIZE_BYTES;\n    } else {\n      if (\n        settings.cacheSizeBytes !== LRU_COLLECTION_DISABLED &&\n        settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `cacheSizeBytes must be at least ${LRU_MINIMUM_CACHE_SIZE_BYTES}`\n        );\n      } else {\n        this.cacheSizeBytes = settings.cacheSizeBytes;\n      }\n    }\n\n    this.experimentalForceLongPolling = !!settings.experimentalForceLongPolling;\n    this.experimentalAutoDetectLongPolling = !!settings.experimentalAutoDetectLongPolling;\n\n    validateIsNotUsedTogether(\n      'experimentalForceLongPolling',\n      settings.experimentalForceLongPolling,\n      'experimentalAutoDetectLongPolling',\n      settings.experimentalAutoDetectLongPolling\n    );\n  }\n\n  isEqual(other: FirestoreSettings): boolean {\n    return (\n      this.host === other.host &&\n      this.ssl === other.ssl &&\n      this.credentials === other.credentials &&\n      this.cacheSizeBytes === other.cacheSizeBytes &&\n      this.experimentalForceLongPolling ===\n        other.experimentalForceLongPolling &&\n      this.experimentalAutoDetectLongPolling ===\n        other.experimentalAutoDetectLongPolling &&\n      this.ignoreUndefinedProperties === other.ignoreUndefinedProperties\n    );\n  }\n}\n\n/**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link getFirestore()}.\n */\nexport class FirebaseFirestore implements _FirebaseService {\n  readonly _databaseId: DatabaseId;\n  readonly _credentials: CredentialsProvider;\n  readonly _persistenceKey: string = '(lite)';\n\n  protected _settings?: Settings;\n  private _settingsFrozen = false;\n\n  // A task that is assigned when the terminate() is invoked and resolved when\n  // all components have shut down.\n  private _terminateTask?: Promise<void>;\n\n  /**\n   * The {@link FirebaseApp app} associated with this `Firestore` service\n   * instance.\n   */\n  readonly app: FirebaseApp;\n\n  constructor(\n    app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>\n  ) {\n    this.app = app;\n    this._databaseId = FirebaseFirestore._databaseIdFromApp(app);\n    this._credentials = new FirebaseCredentialsProvider(authProvider);\n  }\n\n  get _initialized(): boolean {\n    return this._settingsFrozen;\n  }\n\n  get _terminated(): boolean {\n    return this._terminateTask !== undefined;\n  }\n\n  _setSettings(settings: Settings): void {\n    if (this._settingsFrozen) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and its settings can no longer ' +\n          'be changed. initializeFirestore() cannot be called after calling ' +\n          'getFirestore().'\n      );\n    }\n    this._settings = settings;\n  }\n\n  _getSettings(): FirestoreSettings {\n    if (!this._settings) {\n      this._settings = {};\n    }\n    this._settingsFrozen = true;\n    return new FirestoreSettings(this._settings);\n  }\n\n  private static _databaseIdFromApp(app: FirebaseApp): DatabaseId {\n    if (!Object.prototype.hasOwnProperty.apply(app.options, ['projectId'])) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        '\"projectId\" not provided in firebase.initializeApp.'\n      );\n    }\n\n    return new DatabaseId(app.options.projectId!);\n  }\n\n  _delete(): Promise<void> {\n    if (!this._terminateTask) {\n      this._terminateTask = this._terminate();\n    }\n    return this._terminateTask;\n  }\n\n  /**\n   * Terminates all components used by this client. Subclasses can override\n   * this method to clean up their own dependencies, but must also call this\n   * method.\n   *\n   * Only ever called once.\n   */\n  protected _terminate(): Promise<void> {\n    removeComponents(this);\n    return Promise.resolve();\n  }\n}\n\n/**\n * Initializes a new instance of Cloud Firestore with the provided settings.\n * Can only be called before any other functions, including\n * {@link getFirestore()}. If the custom settings are empty, this function is\n * equivalent to calling {@link getFirestore()}.\n *\n * @param app The {@link FirebaseApp} with which the `Firestore` instance will be\n * associated.\n * @param settings A settings object to configure the `Firestore` instance.\n * @return A newly initialized Firestore instance.\n */\nexport function initializeFirestore(\n  app: FirebaseApp,\n  settings: Settings\n): FirebaseFirestore {\n  const firestore = _getProvider(\n    app,\n    'firestore/lite'\n  ).getImmediate() as FirebaseFirestore;\n  firestore._setSettings(settings);\n  return firestore;\n}\n\n/**\n * Returns the existing instance of Firestore that is associated with the\n * provided {@link FirebaseApp}. If no instance exists, initializes a new\n * instance with default settings.\n *\n * @param app The {@link FirebaseApp} instance that the returned Firestore\n * instance is associated with.\n * @return The `Firestore` instance of the provided app.\n */\nexport function getFirestore(app: FirebaseApp): FirebaseFirestore {\n  return _getProvider(\n    app,\n    'firestore/lite'\n  ).getImmediate() as FirebaseFirestore;\n}\n\n/**\n * Terminates the provided Firestore instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of FirebaseFirestore with\n * {@link getFirestore()}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence()} to\n * ensure that all local state is destroyed between test runs.\n *\n * @return A promise that is resolved when the instance has been successfully\n * terminated.\n */\nexport function terminate(firestore: FirebaseFirestore): Promise<void> {\n  _removeServiceInstance(firestore.app, 'firestore/lite');\n  return firestore._delete();\n}\n\nexport function makeDatabaseInfo(\n  databaseId: DatabaseId,\n  persistenceKey: string,\n  settings: FirestoreSettings\n): DatabaseInfo {\n  return new DatabaseInfo(\n    databaseId,\n    persistenceKey,\n    settings.host,\n    settings.ssl,\n    settings.experimentalForceLongPolling,\n    settings.experimentalAutoDetectLongPolling\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, _removeServiceInstance } from '@firebase/app-exp';\nimport { _FirebaseService, FirebaseApp } from '@firebase/app-types-exp';\nimport { Provider } from '@firebase/component';\n\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  FirestoreClient,\n  firestoreClientDisableNetwork,\n  firestoreClientEnableNetwork,\n  firestoreClientWaitForPendingWrites,\n  setOfflineComponentProvider,\n  setOnlineComponentProvider\n} from '../../../src/core/firestore_client';\nimport { AsyncQueue } from '../../../src/util/async_queue';\nimport {\n  IndexedDbOfflineComponentProvider,\n  MultiTabOfflineComponentProvider,\n  OfflineComponentProvider,\n  OnlineComponentProvider\n} from '../../../src/core/component_provider';\nimport {\n  FirebaseFirestore as LiteFirestore,\n  Settings as LiteSettings\n} from '../../../lite/src/api/database';\nimport { Code, FirestoreError } from '../../../src/util/error';\nimport { Deferred } from '../../../src/util/promise';\nimport { LRU_MINIMUM_CACHE_SIZE_BYTES } from '../../../src/local/lru_garbage_collector';\nimport {\n  CACHE_SIZE_UNLIMITED,\n  configureFirestore,\n  ensureFirestoreConfigured,\n  FirestoreCompat\n} from '../../../src/api/database';\nimport {\n  indexedDbClearPersistence,\n  indexedDbStoragePrefix\n} from '../../../src/local/indexeddb_persistence';\nimport { PersistenceSettings } from '../../../exp-types';\n\n/** DOMException error code constants. */\nconst DOM_EXCEPTION_INVALID_STATE = 11;\nconst DOM_EXCEPTION_ABORTED = 20;\nconst DOM_EXCEPTION_QUOTA_EXCEEDED = 22;\n\nexport interface Settings extends LiteSettings {\n  cacheSizeBytes?: number;\n}\n\n/**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link getFirestore()}.\n */\nexport class FirebaseFirestore\n  extends LiteFirestore\n  implements _FirebaseService, FirestoreCompat {\n  readonly _queue = new AsyncQueue();\n  readonly _persistenceKey: string;\n\n  _firestoreClient: FirestoreClient | undefined;\n\n  constructor(\n    app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>\n  ) {\n    super(app, authProvider);\n    this._persistenceKey = app.name;\n  }\n\n  _terminate(): Promise<void> {\n    if (!this._firestoreClient) {\n      // The client must be initialized to ensure that all subsequent API\n      // usage throws an exception.\n      configureFirestore(this);\n    }\n    return this._firestoreClient!.terminate();\n  }\n}\n\n/**\n * Initializes a new instance of Cloud Firestore with the provided settings.\n * Can only be called before any other function, including\n * {@link getFirestore()}. If the custom settings are empty, this function is\n * equivalent to calling {@link getFirestore()}.\n *\n * @param app The {@link FirebaseApp} with which the `Firestore` instance will\n * be associated.\n * @param settings A settings object to configure the `Firestore` instance.\n * @return A newly initialized `Firestore` instance.\n */\nexport function initializeFirestore(\n  app: FirebaseApp,\n  settings: Settings\n): FirebaseFirestore {\n  const firestore = _getProvider(\n    app,\n    'firestore-exp'\n  ).getImmediate() as FirebaseFirestore;\n\n  if (\n    settings.cacheSizeBytes !== undefined &&\n    settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED &&\n    settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES\n  ) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `cacheSizeBytes must be at least ${LRU_MINIMUM_CACHE_SIZE_BYTES}`\n    );\n  }\n\n  firestore._setSettings(settings);\n  return firestore;\n}\n\n/**\n * Returns the existing instance of Firestore that is associated with the\n * provided {@link FirebaseApp}. If no instance exists, initializes a new\n * instance with default settings.\n *\n * @param app The {@link FirebaseApp} instance that the returned Firestore\n * instance is associated with.\n * @return The `Firestore` instance of the provided app.\n */\nexport function getFirestore(app: FirebaseApp): FirebaseFirestore {\n  return _getProvider(app, 'firestore-exp').getImmediate() as FirebaseFirestore;\n}\n\n/**\n * Attempts to enable persistent storage, if possible.\n *\n * Must be called before any other functions (other than\n * {@link initializeFirestore()}, {@link getFirestore()} or\n * {@link clearIndexedDbPersistence()}.\n *\n * If this fails, `enableIndexedDbPersistence()` will reject the promise it\n * returns. Note that even after this failure, the `Firestore` instance will\n * remain usable, however offline persistence will be disabled.\n *\n * There are several reasons why this can fail, which can be identified by\n * the `code` on the error.\n *\n *   * failed-precondition: The app is already open in another browser tab.\n *   * unimplemented: The browser is incompatible with the offline\n *     persistence implementation.\n *\n * @param firestore The `Firestore` instance to enable persistence for.\n * @param persistenceSettings Optional settings object to configure persistence.\n * @return A promise that represents successfully enabling persistent storage.\n */\nexport function enableIndexedDbPersistence(\n  firestore: FirestoreCompat,\n  persistenceSettings?: PersistenceSettings\n): Promise<void> {\n  verifyNotInitialized(firestore);\n\n  const client = ensureFirestoreConfigured(firestore);\n  const settings = firestore._getSettings();\n\n  const onlineComponentProvider = new OnlineComponentProvider();\n  const offlineComponentProvider = new IndexedDbOfflineComponentProvider(\n    onlineComponentProvider,\n    settings.cacheSizeBytes,\n    persistenceSettings?.forceOwnership\n  );\n  return setPersistenceProviders(\n    client,\n    onlineComponentProvider,\n    offlineComponentProvider\n  );\n}\n\n/**\n * Attempts to enable multi-tab persistent storage, if possible. If enabled\n * across all tabs, all operations share access to local persistence, including\n * shared execution of queries and latency-compensated local document updates\n * across all connected instances.\n *\n * If this fails, `enableMultiTabIndexedDbPersistence()` will reject the promise\n * it returns. Note that even after this failure, the `Firestore` instance will\n * remain usable, however offline persistence will be disabled.\n *\n * There are several reasons why this can fail, which can be identified by\n * the `code` on the error.\n *\n *   * failed-precondition: The app is already open in another browser tab and\n *     multi-tab is not enabled.\n *   * unimplemented: The browser is incompatible with the offline\n *     persistence implementation.\n *\n * @param firestore The `Firestore` instance to enable persistence for.\n * @return A promise that represents successfully enabling persistent\n * storage.\n */\nexport function enableMultiTabIndexedDbPersistence(\n  firestore: FirestoreCompat\n): Promise<void> {\n  verifyNotInitialized(firestore);\n\n  const client = ensureFirestoreConfigured(firestore);\n  const settings = firestore._getSettings();\n\n  const onlineComponentProvider = new OnlineComponentProvider();\n  const offlineComponentProvider = new MultiTabOfflineComponentProvider(\n    onlineComponentProvider,\n    settings.cacheSizeBytes\n  );\n  return setPersistenceProviders(\n    client,\n    onlineComponentProvider,\n    offlineComponentProvider\n  );\n}\n\n/**\n * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.\n * If the operation fails with a recoverable error (see\n * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected\n * but the client remains usable.\n */\nfunction setPersistenceProviders(\n  client: FirestoreClient,\n  onlineComponentProvider: OnlineComponentProvider,\n  offlineComponentProvider: OfflineComponentProvider\n): Promise<void> {\n  const persistenceResult = new Deferred();\n  return client.asyncQueue\n    .enqueue(async () => {\n      try {\n        await setOfflineComponentProvider(client, offlineComponentProvider);\n        await setOnlineComponentProvider(client, onlineComponentProvider);\n        persistenceResult.resolve();\n      } catch (e) {\n        if (!canFallbackFromIndexedDbError(e)) {\n          throw e;\n        }\n        console.warn(\n          'Error enabling offline persistence. Falling back to ' +\n            'persistence disabled: ' +\n            e\n        );\n        persistenceResult.reject(e);\n      }\n    })\n    .then(() => persistenceResult.promise);\n}\n\n/**\n * Decides whether the provided error allows us to gracefully disable\n * persistence (as opposed to crashing the client).\n */\nfunction canFallbackFromIndexedDbError(\n  error: FirestoreError | DOMException\n): boolean {\n  if (error.name === 'FirebaseError') {\n    return (\n      error.code === Code.FAILED_PRECONDITION ||\n      error.code === Code.UNIMPLEMENTED\n    );\n  } else if (\n    typeof DOMException !== 'undefined' &&\n    error instanceof DOMException\n  ) {\n    // There are a few known circumstances where we can open IndexedDb but\n    // trying to read/write will fail (e.g. quota exceeded). For\n    // well-understood cases, we attempt to detect these and then gracefully\n    // fall back to memory persistence.\n    // NOTE: Rather than continue to add to this list, we could decide to\n    // always fall back, with the risk that we might accidentally hide errors\n    // representing actual SDK bugs.\n    return (\n      // When the browser is out of quota we could get either quota exceeded\n      // or an aborted error depending on whether the error happened during\n      // schema migration.\n      error.code === DOM_EXCEPTION_QUOTA_EXCEEDED ||\n      error.code === DOM_EXCEPTION_ABORTED ||\n      // Firefox Private Browsing mode disables IndexedDb and returns\n      // INVALID_STATE for any usage.\n      error.code === DOM_EXCEPTION_INVALID_STATE\n    );\n  }\n\n  return true;\n}\n\n/**\n * Clears the persistent storage. This includes pending writes and cached\n * documents.\n *\n * Must be called while the `Firestore` instance is not started (after the app is\n * terminated or when the app is first initialized). On startup, this function\n * must be called before other functions (other than {@link\n * initializeFirestore()} or {@link getFirestore()})). If the `Firestore`\n * instance is still running, the promise will be rejected with the error code\n * of `failed-precondition`.\n *\n * Note: `clearIndexedDbPersistence()` is primarily intended to help write\n * reliable tests that use Cloud Firestore. It uses an efficient mechanism for\n * dropping existing data but does not attempt to securely overwrite or\n * otherwise make cached data unrecoverable. For applications that are sensitive\n * to the disclosure of cached data in between user sessions, we strongly\n * recommend not enabling persistence at all.\n *\n * @param firestore The `Firestore` instance to clear persistence for.\n * @return A promise that is resolved when the persistent storage is\n * cleared. Otherwise, the promise is rejected with an error.\n */\nexport function clearIndexedDbPersistence(\n  firestore: FirestoreCompat\n): Promise<void> {\n  if (firestore._initialized && !firestore._terminated) {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      'Persistence can only be cleared before a Firestore instance is ' +\n        'initialized or after it is terminated.'\n    );\n  }\n\n  const deferred = new Deferred<void>();\n  firestore._queue.enqueueAndForgetEvenWhileRestricted(async () => {\n    try {\n      await indexedDbClearPersistence(\n        indexedDbStoragePrefix(firestore._databaseId, firestore._persistenceKey)\n      );\n      deferred.resolve();\n    } catch (e) {\n      deferred.reject(e);\n    }\n  });\n  return deferred.promise;\n}\n\n/**\n * Waits until all currently pending writes for the active user have been\n * acknowledged by the backend.\n *\n * The returned Promise resolves immediately if there are no outstanding writes.\n * Otherwise, the Promise waits for all previously issued writes (including\n * those written in a previous app session), but it does not wait for writes\n * that were added after the function is called. If you want to wait for\n * additional writes, call `waitForPendingWrites()` again.\n *\n * Any outstanding `waitForPendingWrites()` Promises are rejected during user\n * changes.\n *\n * @return A Promise which resolves when all currently pending writes have been\n * acknowledged by the backend.\n */\nexport function waitForPendingWrites(\n  firestore: FirebaseFirestore\n): Promise<void> {\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientWaitForPendingWrites(client);\n}\n\n/**\n * Re-enables use of the network for this Firestore instance after a prior\n * call to {@link disableNetwork()}.\n *\n * @return A promise that is resolved once the network has been enabled.\n */\nexport function enableNetwork(firestore: FirebaseFirestore): Promise<void> {\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientEnableNetwork(client);\n}\n\n/**\n * Disables network usage for this instance. It can be re-enabled via {@link\n * enableNetwork()}. While the network is disabled, any snapshot listeners,\n * `getDoc()` or `getDocs()` calls will return results from cache, and any write\n * operations will be queued until the network is restored.\n *\n * @return A promise that is resolved once the network has been disabled.\n */\nexport function disableNetwork(firestore: FirebaseFirestore): Promise<void> {\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientDisableNetwork(client);\n}\n\n/**\n * Terminates the provided Firestore instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` function\n * may be used. Any other function will throw a `FirestoreError`.\n *\n * To restart after termination, create a new instance of FirebaseFirestore with\n * {@link getFirestore()}.\n *\n * Termination does not cancel any pending writes, and any promises that are\n * awaiting a response from the server will not be resolved. If you have\n * persistence enabled, the next time you start this instance, it will resume\n * sending these writes to the server.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all\n * of its resources or in combination with `clearIndexedDbPersistence()` to\n * ensure that all local state is destroyed between test runs.\n *\n * @return A promise that is resolved when the instance has been successfully\n * terminated.\n */\nexport function terminate(firestore: FirebaseFirestore): Promise<void> {\n  _removeServiceInstance(firestore.app, 'firestore-exp');\n  return firestore._delete();\n}\n\nfunction verifyNotInitialized(firestore: FirestoreCompat): void {\n  if (firestore._initialized || firestore._terminated) {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      'Firestore has already been started and persistence can no longer be ' +\n        'enabled. You can only enable persistence before calling any other ' +\n        'methods on a Firestore object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ProtoValue } from '../protos/firestore_proto_api';\nimport {\n  CollectionReference as PublicCollectionReference,\n  DocumentChange as PublicDocumentChange,\n  DocumentChangeType,\n  DocumentData,\n  DocumentReference as PublicDocumentReference,\n  DocumentSnapshot as PublicDocumentSnapshot,\n  FirebaseFirestore as PublicFirestore,\n  FirestoreDataConverter,\n  GetOptions,\n  LogLevel as PublicLogLevel,\n  OrderByDirection,\n  PersistenceSettings as PublicPersistenceSettings,\n  Query as PublicQuery,\n  QueryDocumentSnapshot as PublicQueryDocumentSnapshot,\n  QuerySnapshot as PublicQuerySnapshot,\n  SetOptions,\n  Settings as PublicSettings,\n  SnapshotListenOptions,\n  SnapshotMetadata as PublicSnapshotMetadata,\n  SnapshotOptions as PublicSnapshotOptions,\n  Transaction as PublicTransaction,\n  UpdateData,\n  WhereFilterOp,\n  WriteBatch as PublicWriteBatch\n} from '@firebase/firestore-types';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp, FirebaseService } from '@firebase/app-types/private';\nimport { Blob } from './blob';\nimport { DatabaseId } from '../core/database_info';\nimport { ListenOptions } from '../core/event_manager';\nimport {\n  FirestoreClient,\n  firestoreClientAddSnapshotsInSyncListener,\n  firestoreClientDisableNetwork,\n  firestoreClientEnableNetwork,\n  firestoreClientGetDocumentFromLocalCache,\n  firestoreClientGetDocumentsFromLocalCache,\n  firestoreClientGetDocumentsViaSnapshotListener,\n  firestoreClientGetDocumentViaSnapshotListener,\n  firestoreClientListen,\n  firestoreClientTransaction,\n  firestoreClientWaitForPendingWrites,\n  firestoreClientWrite\n} from '../core/firestore_client';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  findFilterOperator,\n  getFirstOrderByField,\n  getInequalityFilterField,\n  hasLimitToLast,\n  isCollectionGroupQuery,\n  LimitType,\n  newQueryComparator,\n  newQueryForCollectionGroup,\n  newQueryForPath,\n  Operator,\n  OrderBy,\n  Query as InternalQuery,\n  queryEquals,\n  queryOrderBy,\n  queryWithAddedFilter,\n  queryWithAddedOrderBy,\n  queryWithEndAt,\n  queryWithLimit,\n  queryWithStartAt\n} from '../core/query';\nimport { Transaction as InternalTransaction } from '../core/transaction';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DeleteMutation, Mutation, Precondition } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { isServerTimestamp } from '../model/server_timestamps';\nimport { refValue } from '../model/values';\nimport { debugAssert, fail } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  cast,\n  validateIsNotUsedTogether,\n  validateNonEmptyArgument,\n  validatePositiveNumber,\n  validateSetOptions,\n  valueDescription\n} from '../util/input_validation';\nimport { logWarn, setLogLevel as setClientLogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { FieldPath as ExternalFieldPath } from './field_path';\nimport {\n  CredentialsProvider,\n  EmptyCredentialsProvider,\n  FirebaseCredentialsProvider,\n  makeCredentialsProvider\n} from './credentials';\nimport {\n  CompleteFn,\n  ErrorFn,\n  isPartialObserver,\n  NextFn,\n  PartialObserver,\n  Unsubscribe\n} from './observer';\nimport {\n  _DocumentKeyReference,\n  fieldPathFromArgument,\n  parseQueryValue,\n  parseSetData,\n  parseUpdateData,\n  parseUpdateVarargs,\n  UntypedFirestoreDataConverter,\n  UserDataReader\n} from './user_data_reader';\nimport { UserDataWriter } from './user_data_writer';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  clearIndexedDbPersistence,\n  enableIndexedDbPersistence,\n  enableMultiTabIndexedDbPersistence\n} from '../../exp/src/api/database';\nimport { LRU_COLLECTION_DISABLED } from '../local/lru_garbage_collector';\nimport {\n  FirestoreSettings,\n  makeDatabaseInfo\n} from '../../lite/src/api/database';\nimport { DEFAULT_HOST } from '../../lite/src/api/components';\n\n/**\n * Constant used to indicate the LRU garbage collection should be disabled.\n * Set this value as the `cacheSizeBytes` on the settings passed to the\n * `Firestore` instance.\n */\nexport const CACHE_SIZE_UNLIMITED = LRU_COLLECTION_DISABLED;\n\n/**\n * Options that can be provided in the Firestore constructor when not using\n * Firebase (aka standalone mode).\n */\nexport interface FirestoreDatabase {\n  projectId: string;\n  database?: string;\n}\n\n// TODO(firestore-compat): This interface exposes internal APIs that the Compat\n// layer implements to interact with the firestore-exp SDK. We can remove this\n// class once we have an actual compat class for FirebaseFirestore.\nexport interface FirestoreCompat {\n  readonly _initialized: boolean;\n  readonly _terminated: boolean;\n  readonly _databaseId: DatabaseId;\n  readonly _persistenceKey: string;\n  readonly _queue: AsyncQueue;\n  readonly _credentials: CredentialsProvider;\n  _firestoreClient?: FirestoreClient;\n  _getSettings(): FirestoreSettings;\n}\n\n/**\n * A persistence provider for either memory-only or IndexedDB persistence.\n * Mainly used to allow optional inclusion of IndexedDB code.\n */\nexport interface PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: FirestoreCompat,\n    forceOwnership: boolean\n  ): Promise<void>;\n  enableMultiTabIndexedDbPersistence(firestore: FirestoreCompat): Promise<void>;\n  clearIndexedDbPersistence(firestore: FirestoreCompat): Promise<void>;\n}\n\nconst MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE =\n  'You are using the memory-only build of Firestore. Persistence support is ' +\n  'only available via the @firebase/firestore bundle or the ' +\n  'firebase-firestore.js build.';\n\n/**\n * The persistence provider included with the memory-only SDK. This provider\n * errors for all attempts to access persistence.\n */\nexport class MemoryPersistenceProvider implements PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: FirestoreCompat,\n    forceOwnership: boolean\n  ): Promise<void> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n    );\n  }\n\n  enableMultiTabIndexedDbPersistence(\n    firestore: FirestoreCompat\n  ): Promise<void> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n    );\n  }\n\n  clearIndexedDbPersistence(firestore: FirestoreCompat): Promise<void> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n    );\n  }\n}\n\n/**\n * The persistence provider included with the full Firestore SDK.\n */\nexport class IndexedDbPersistenceProvider implements PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: FirestoreCompat,\n    forceOwnership: boolean\n  ): Promise<void> {\n    return enableIndexedDbPersistence(firestore, { forceOwnership });\n  }\n  enableMultiTabIndexedDbPersistence = enableMultiTabIndexedDbPersistence.bind(\n    null\n  );\n  clearIndexedDbPersistence = clearIndexedDbPersistence.bind(null);\n}\n/**\n * The root reference to the database.\n */\nexport class Firestore\n  implements PublicFirestore, FirebaseService, FirestoreCompat {\n  // The objects that are a part of this API are exposed to third-parties as\n  // compiled javascript so we want to flag our private members with a leading\n  // underscore to discourage their use.\n  readonly _databaseId: DatabaseId;\n  readonly _persistenceKey: string;\n  _credentials: CredentialsProvider;\n  private readonly _firebaseApp: FirebaseApp | null = null;\n  private _settings: FirestoreSettings;\n\n  // The firestore client instance. This will be available as soon as\n  // `configureFirestore()` is called, but any calls against it will block until\n  // setup has completed.\n  _firestoreClient?: FirestoreClient;\n\n  // Public for use in tests.\n  // TODO(mikelehen): Use modularized initialization instead.\n  readonly _queue = new AsyncQueue();\n\n  _userDataReader: UserDataReader | undefined;\n\n  // Note: We are using `MemoryPersistenceProvider` as a default\n  // ComponentProvider to ensure backwards compatibility with the format\n  // expected by the console build.\n  constructor(\n    databaseIdOrApp: FirestoreDatabase | FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    readonly _persistenceProvider: PersistenceProvider = new MemoryPersistenceProvider()\n  ) {\n    if (typeof (databaseIdOrApp as FirebaseApp).options === 'object') {\n      // This is very likely a Firebase app object\n      // TODO(b/34177605): Can we somehow use instanceof?\n      const app = databaseIdOrApp as FirebaseApp;\n      this._firebaseApp = app;\n      this._databaseId = Firestore.databaseIdFromApp(app);\n      this._persistenceKey = app.name;\n      this._credentials = new FirebaseCredentialsProvider(authProvider);\n    } else {\n      const external = databaseIdOrApp as FirestoreDatabase;\n      if (!external.projectId) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Must provide projectId'\n        );\n      }\n\n      this._databaseId = new DatabaseId(external.projectId, external.database);\n      // Use a default persistenceKey that lines up with FirebaseApp.\n      this._persistenceKey = '[DEFAULT]';\n      this._credentials = new EmptyCredentialsProvider();\n    }\n\n    this._settings = new FirestoreSettings({});\n  }\n\n  get _initialized(): boolean {\n    return !!this._firestoreClient;\n  }\n\n  get _terminated(): boolean {\n    return this._queue.isShuttingDown;\n  }\n\n  get _dataReader(): UserDataReader {\n    debugAssert(\n      !!this._firestoreClient,\n      'Cannot obtain UserDataReader before instance is intitialized'\n    );\n    if (!this._userDataReader) {\n      // Lazy initialize UserDataReader once the settings are frozen\n      this._userDataReader = new UserDataReader(\n        this._databaseId,\n        this._settings.ignoreUndefinedProperties\n      );\n    }\n    return this._userDataReader;\n  }\n\n  settings(settingsLiteral: PublicSettings): void {\n    if (settingsLiteral.merge) {\n      settingsLiteral = { ...this._settings, ...settingsLiteral };\n      // Remove the property from the settings once the merge is completed\n      delete settingsLiteral.merge;\n    }\n\n    const newSettings = new FirestoreSettings(settingsLiteral);\n    if (this._firestoreClient && !this._settings.isEqual(newSettings)) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and its settings can no longer ' +\n          'be changed. You can only modify settings before calling any other ' +\n          'methods on a Firestore object.'\n      );\n    }\n\n    this._settings = newSettings;\n    if (newSettings.credentials !== undefined) {\n      this._credentials = makeCredentialsProvider(newSettings.credentials);\n    }\n  }\n\n  useEmulator(host: string, port: number): void {\n    if (this._settings.host !== DEFAULT_HOST) {\n      logWarn(\n        'Host has been set in both settings() and useEmulator(), emulator host will be used'\n      );\n    }\n\n    this.settings({\n      host: `${host}:${port}`,\n      ssl: false,\n      merge: true\n    });\n  }\n\n  enableNetwork(): Promise<void> {\n    ensureFirestoreConfigured(this);\n    return firestoreClientEnableNetwork(this._firestoreClient!);\n  }\n\n  disableNetwork(): Promise<void> {\n    ensureFirestoreConfigured(this);\n    return firestoreClientDisableNetwork(this._firestoreClient!);\n  }\n\n  enablePersistence(settings?: PublicPersistenceSettings): Promise<void> {\n    if (this._firestoreClient) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and persistence can no longer ' +\n          'be enabled. You can only call enablePersistence() before calling ' +\n          'any other methods on a Firestore object.'\n      );\n    }\n\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      synchronizeTabs = !!settings.synchronizeTabs;\n      experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\n\n      validateIsNotUsedTogether(\n        'synchronizeTabs',\n        synchronizeTabs,\n        'experimentalForceOwningTab',\n        experimentalForceOwningTab\n      );\n    }\n\n    return synchronizeTabs\n      ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this)\n      : this._persistenceProvider.enableIndexedDbPersistence(\n          this,\n          experimentalForceOwningTab\n        );\n  }\n\n  async clearPersistence(): Promise<void> {\n    return this._persistenceProvider.clearIndexedDbPersistence(this);\n  }\n\n  terminate(): Promise<void> {\n    (this.app as _FirebaseApp)._removeServiceInstance('firestore');\n    return this.INTERNAL.delete();\n  }\n\n  waitForPendingWrites(): Promise<void> {\n    ensureFirestoreConfigured(this);\n    return firestoreClientWaitForPendingWrites(this._firestoreClient!);\n  }\n\n  onSnapshotsInSync(observer: PartialObserver<void>): Unsubscribe;\n  onSnapshotsInSync(onSync: () => void): Unsubscribe;\n  onSnapshotsInSync(arg: unknown): Unsubscribe {\n    ensureFirestoreConfigured(this);\n\n    if (isPartialObserver(arg)) {\n      return firestoreClientAddSnapshotsInSyncListener(\n        this._firestoreClient!,\n        arg as PartialObserver<void>\n      );\n    } else {\n      const observer: PartialObserver<void> = {\n        next: arg as () => void\n      };\n      return firestoreClientAddSnapshotsInSyncListener(\n        this._firestoreClient!,\n        observer\n      );\n    }\n  }\n\n  private static databaseIdFromApp(app: FirebaseApp): DatabaseId {\n    if (!contains(app.options, 'projectId')) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        '\"projectId\" not provided in firebase.initializeApp.'\n      );\n    }\n\n    const projectId = app.options.projectId;\n    if (!projectId || typeof projectId !== 'string') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'projectId must be a string in FirebaseApp.options'\n      );\n    }\n    return new DatabaseId(projectId);\n  }\n\n  get app(): FirebaseApp {\n    if (!this._firebaseApp) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._firebaseApp;\n  }\n\n  INTERNAL = {\n    delete: async (): Promise<void> => {\n      if (!this._firestoreClient) {\n        // The client must be initialized to ensure that all subsequent API\n        // usage throws an exception.\n        configureFirestore(this);\n      }\n      await this._firestoreClient!.terminate();\n    }\n  };\n\n  collection(pathString: string): PublicCollectionReference {\n    validateNonEmptyArgument('Firestore.collection', 'path', pathString);\n    ensureFirestoreConfigured(this);\n    return new CollectionReference(\n      ResourcePath.fromString(pathString),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  doc(pathString: string): PublicDocumentReference {\n    validateNonEmptyArgument('Firestore.doc', 'path', pathString);\n    ensureFirestoreConfigured(this);\n    return DocumentReference.forPath(\n      ResourcePath.fromString(pathString),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  collectionGroup(collectionId: string): PublicQuery {\n    validateNonEmptyArgument(\n      'Firestore.collectionGroup',\n      'collectionId',\n      collectionId\n    );\n    if (collectionId.indexOf('/') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid collection ID '${collectionId}' passed to function ` +\n          `Firestore.collectionGroup(). Collection IDs must not contain '/'.`\n      );\n    }\n    ensureFirestoreConfigured(this);\n    return new Query(\n      newQueryForCollectionGroup(collectionId),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  runTransaction<T>(\n    updateFunction: (transaction: PublicTransaction) => Promise<T>\n  ): Promise<T> {\n    const client = ensureFirestoreConfigured(this);\n    return firestoreClientTransaction(\n      client,\n      (transaction: InternalTransaction) => {\n        return updateFunction(new Transaction(this, transaction));\n      }\n    );\n  }\n\n  batch(): PublicWriteBatch {\n    ensureFirestoreConfigured(this);\n    return new WriteBatch(this);\n  }\n\n  _getSettings(): FirestoreSettings {\n    return this._settings;\n  }\n}\n\nexport function ensureFirestoreConfigured(\n  firestore: FirestoreCompat\n): FirestoreClient {\n  if (!firestore._firestoreClient) {\n    configureFirestore(firestore);\n  }\n  firestore._firestoreClient!.verifyNotTerminated();\n  return firestore._firestoreClient as FirestoreClient;\n}\n\nexport function configureFirestore(firestore: FirestoreCompat): void {\n  const settings = firestore._getSettings();\n  debugAssert(!!settings.host, 'FirestoreSettings.host is not set');\n  debugAssert(\n    !firestore._firestoreClient,\n    'configureFirestore() called multiple times'\n  );\n\n  const databaseInfo = makeDatabaseInfo(\n    firestore._databaseId,\n    firestore._persistenceKey,\n    settings\n  );\n  firestore._firestoreClient = new FirestoreClient(\n    firestore._credentials,\n    firestore._queue,\n    databaseInfo\n  );\n}\n\nexport function setLogLevel(level: PublicLogLevel): void {\n  setClientLogLevel(level);\n}\n\n/**\n * A reference to a transaction.\n */\nexport class Transaction implements PublicTransaction {\n  constructor(\n    private _firestore: Firestore,\n    private _transaction: InternalTransaction\n  ) {}\n\n  get<T>(\n    documentRef: PublicDocumentReference<T>\n  ): Promise<PublicDocumentSnapshot<T>> {\n    const ref = validateReference(\n      'Transaction.get',\n      documentRef,\n      this._firestore\n    );\n    return this._transaction\n      .lookup([ref._key])\n      .then((docs: MaybeDocument[]) => {\n        if (!docs || docs.length !== 1) {\n          return fail('Mismatch in docs returned from document lookup.');\n        }\n        const doc = docs[0];\n        if (doc instanceof NoDocument) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            null,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else if (doc instanceof Document) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            doc,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else {\n          throw fail(\n            `BatchGetDocumentsRequest returned unexpected document type: ${doc.constructor.name}`\n          );\n        }\n      });\n  }\n\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: SetOptions\n  ): Transaction;\n  set<T>(documentRef: DocumentReference<T>, data: T): Transaction;\n  set<T>(\n    documentRef: PublicDocumentReference<T>,\n    value: T | Partial<T>,\n    options?: SetOptions\n  ): Transaction {\n    const ref = validateReference(\n      'Transaction.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('Transaction.set', options);\n    const convertedValue = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this._firestore._dataReader,\n      'Transaction.set',\n      ref._key,\n      convertedValue,\n      ref._converter !== null,\n      options\n    );\n    this._transaction.set(ref._key, parsed);\n    return this;\n  }\n\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    value: UpdateData\n  ): Transaction;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction {\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateVarargs(\n        this._firestore._dataReader,\n        'Transaction.update',\n        ref._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateData(\n        this._firestore._dataReader,\n        'Transaction.update',\n        ref._key,\n        fieldOrUpdateData\n      );\n    }\n\n    this._transaction.update(ref._key, parsed);\n    return this;\n  }\n\n  delete(documentRef: PublicDocumentReference<unknown>): Transaction {\n    const ref = validateReference(\n      'Transaction.delete',\n      documentRef,\n      this._firestore\n    );\n    this._transaction.delete(ref._key);\n    return this;\n  }\n}\n\nexport class WriteBatch implements PublicWriteBatch {\n  private _mutations = [] as Mutation[];\n  private _committed = false;\n\n  constructor(private _firestore: Firestore) {}\n\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: SetOptions\n  ): WriteBatch;\n  set<T>(documentRef: DocumentReference<T>, data: T): WriteBatch;\n  set<T>(\n    documentRef: PublicDocumentReference<T>,\n    value: T | Partial<T>,\n    options?: SetOptions\n  ): WriteBatch {\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('WriteBatch.set', options);\n    const convertedValue = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this._firestore._dataReader,\n      'WriteBatch.set',\n      ref._key,\n      convertedValue,\n      ref._converter !== null,\n      options\n    );\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    value: UpdateData\n  ): WriteBatch;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    this.verifyNotCommitted();\n\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateVarargs(\n        this._firestore._dataReader,\n        'WriteBatch.update',\n        ref._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateData(\n        this._firestore._dataReader,\n        'WriteBatch.update',\n        ref._key,\n        fieldOrUpdateData\n      );\n    }\n\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.exists(true))\n    );\n    return this;\n  }\n\n  delete(documentRef: PublicDocumentReference<unknown>): WriteBatch {\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.delete',\n      documentRef,\n      this._firestore\n    );\n    this._mutations = this._mutations.concat(\n      new DeleteMutation(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  commit(): Promise<void> {\n    this.verifyNotCommitted();\n    this._committed = true;\n    if (this._mutations.length > 0) {\n      const client = ensureFirestoreConfigured(this._firestore);\n      return firestoreClientWrite(client, this._mutations);\n    }\n\n    return Promise.resolve();\n  }\n\n  private verifyNotCommitted(): void {\n    if (this._committed) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'A write batch can no longer be used after commit() ' +\n          'has been called.'\n      );\n    }\n  }\n}\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = DocumentData>\n  extends _DocumentKeyReference<T>\n  implements PublicDocumentReference<T> {\n  private _firestoreClient: FirestoreClient;\n\n  constructor(\n    public _key: DocumentKey,\n    readonly firestore: Firestore,\n    readonly _converter: FirestoreDataConverter<T> | null\n  ) {\n    super(firestore._databaseId, _key, _converter);\n    this._firestoreClient = ensureFirestoreConfigured(firestore);\n  }\n\n  static forPath<U>(\n    path: ResourcePath,\n    firestore: Firestore,\n    converter: FirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid document reference. Document ' +\n          'references must have an even number of segments, but ' +\n          `${path.canonicalString()} has ${path.length}`\n      );\n    }\n    return new DocumentReference(new DocumentKey(path), firestore, converter);\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get parent(): PublicCollectionReference<T> {\n    return new CollectionReference(\n      this._key.path.popLast(),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  get path(): string {\n    return this._key.path.canonicalString();\n  }\n\n  collection(pathString: string): PublicCollectionReference<DocumentData> {\n    validateNonEmptyArgument(\n      'DocumentReference.collection',\n      'path',\n      pathString\n    );\n    if (!pathString) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Must provide a non-empty collection name to collection()'\n      );\n    }\n    const path = ResourcePath.fromString(pathString);\n    return new CollectionReference(\n      this._key.path.child(path),\n      this.firestore,\n      /* converter= */ null\n    );\n  }\n\n  isEqual(other: PublicDocumentReference<T>): boolean {\n    if (!(other instanceof DocumentReference)) {\n      return false;\n    }\n    return (\n      this.firestore === other.firestore &&\n      this._key.isEqual(other._key) &&\n      this._converter === other._converter\n    );\n  }\n\n  set(value: Partial<T>, options: SetOptions): Promise<void>;\n  set(value: T): Promise<void>;\n  set(value: T | Partial<T>, options?: SetOptions): Promise<void> {\n    options = validateSetOptions('DocumentReference.set', options);\n    const convertedValue = applyFirestoreDataConverter(\n      this._converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this.firestore._dataReader,\n      'DocumentReference.set',\n      this._key,\n      convertedValue,\n      this._converter !== null,\n      options\n    );\n    return firestoreClientWrite(\n      this._firestoreClient,\n      parsed.toMutations(this._key, Precondition.none())\n    );\n  }\n\n  update(value: UpdateData): Promise<void>;\n  update(\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void>;\n  update(\n    fieldOrUpdateData: string | ExternalFieldPath | UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void> {\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      parsed = parseUpdateVarargs(\n        this.firestore._dataReader,\n        'DocumentReference.update',\n        this._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      parsed = parseUpdateData(\n        this.firestore._dataReader,\n        'DocumentReference.update',\n        this._key,\n        fieldOrUpdateData\n      );\n    }\n\n    return firestoreClientWrite(\n      this._firestoreClient,\n      parsed.toMutations(this._key, Precondition.exists(true))\n    );\n  }\n\n  delete(): Promise<void> {\n    return firestoreClientWrite(this._firestoreClient, [\n      new DeleteMutation(this._key, Precondition.none())\n    ]);\n  }\n\n  onSnapshot(observer: PartialObserver<PublicDocumentSnapshot<T>>): Unsubscribe;\n  onSnapshot(\n    options: SnapshotListenOptions,\n    observer: PartialObserver<PublicDocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<PublicDocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: SnapshotListenOptions,\n    onNext: NextFn<PublicDocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    let options: ListenOptions = {\n      includeMetadataChanges: false\n    };\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as SnapshotListenOptions;\n      currArg++;\n    }\n\n    const internalOptions = {\n      includeMetadataChanges: options.includeMetadataChanges\n    };\n\n    if (isPartialObserver(args[currArg])) {\n      const userObserver = args[currArg] as PartialObserver<\n        PublicDocumentSnapshot<T>\n      >;\n      args[currArg] = userObserver.next?.bind(userObserver);\n      args[currArg + 1] = userObserver.error?.bind(userObserver);\n      args[currArg + 2] = userObserver.complete?.bind(userObserver);\n    }\n\n    const observer: PartialObserver<ViewSnapshot> = {\n      next: snapshot => {\n        if (args[currArg]) {\n          (args[currArg] as NextFn<PublicDocumentSnapshot<T>>)(\n            this._convertToDocSnapshot(snapshot)\n          );\n        }\n      },\n      error: args[currArg + 1] as ErrorFn,\n      complete: args[currArg + 2] as CompleteFn\n    };\n\n    return firestoreClientListen(\n      this._firestoreClient,\n      newQueryForPath(this._key.path),\n      internalOptions,\n      observer\n    );\n  }\n\n  get(options?: GetOptions): Promise<PublicDocumentSnapshot<T>> {\n    if (options && options.source === 'cache') {\n      return firestoreClientGetDocumentFromLocalCache(\n        this._firestoreClient,\n        this._key\n      ).then(\n        doc =>\n          new DocumentSnapshot(\n            this.firestore,\n            this._key,\n            doc,\n            /*fromCache=*/ true,\n            doc instanceof Document ? doc.hasLocalMutations : false,\n            this._converter\n          )\n      );\n    } else {\n      return firestoreClientGetDocumentViaSnapshotListener(\n        this._firestoreClient,\n        this._key,\n        options\n      ).then(snapshot => this._convertToDocSnapshot(snapshot));\n    }\n  }\n\n  withConverter<U>(\n    converter: FirestoreDataConverter<U>\n  ): PublicDocumentReference<U> {\n    return new DocumentReference<U>(this._key, this.firestore, converter);\n  }\n\n  /**\n   * Converts a ViewSnapshot that contains the current document to a\n   * DocumentSnapshot.\n   */\n  private _convertToDocSnapshot(snapshot: ViewSnapshot): DocumentSnapshot<T> {\n    debugAssert(\n      snapshot.docs.size <= 1,\n      'Too many documents returned on a document query'\n    );\n    const doc = snapshot.docs.get(this._key);\n\n    return new DocumentSnapshot(\n      this.firestore,\n      this._key,\n      doc,\n      snapshot.fromCache,\n      snapshot.hasPendingWrites,\n      this._converter\n    );\n  }\n}\n\n/**\n * Metadata about a snapshot, describing the state of the snapshot.\n */\nexport class SnapshotMetadata implements PublicSnapshotMetadata {\n  /**\n   * True if the snapshot contains the result of local writes (for example\n   * `set()` or `update()` calls) that have not yet been committed to the\n   * backend. If your listener has opted into metadata updates (via\n   * `SnapshotListenOptions`) you will receive another snapshot with\n   * `hasPendingWrites` equal to false once the writes have been committed to\n   * the backend.\n   */\n  readonly hasPendingWrites: boolean;\n\n  /**\n   * True if the snapshot was created from cached data rather than guaranteed\n   * up-to-date server data. If your listener has opted into metadata updates\n   * (via `SnapshotListenOptions`) you will receive another snapshot with\n   * `fromCache` set to false once the client has received up-to-date data from\n   * the backend.\n   */\n  readonly fromCache: boolean;\n\n  constructor(hasPendingWrites: boolean, fromCache: boolean) {\n    this.hasPendingWrites = hasPendingWrites;\n    this.fromCache = fromCache;\n  }\n\n  /**\n   * Returns true if this `SnapshotMetadata` is equal to the provided one.\n   *\n   * @param other The `SnapshotMetadata` to compare against.\n   * @return true if this `SnapshotMetadata` is equal to the provided one.\n   */\n  isEqual(other: PublicSnapshotMetadata): boolean {\n    return (\n      this.hasPendingWrites === other.hasPendingWrites &&\n      this.fromCache === other.fromCache\n    );\n  }\n}\n\n/**\n * Options interface that can be provided to configure the deserialization of\n * DocumentSnapshots.\n */\nexport interface SnapshotOptions extends PublicSnapshotOptions {}\n\nexport class DocumentSnapshot<T = DocumentData>\n  implements PublicDocumentSnapshot<T> {\n  constructor(\n    private _firestore: Firestore,\n    private _key: DocumentKey,\n    public _document: Document | null,\n    private _fromCache: boolean,\n    private _hasPendingWrites: boolean,\n    private readonly _converter: FirestoreDataConverter<T> | null\n  ) {}\n\n  data(options: PublicSnapshotOptions = {}): T | undefined {\n    if (!this._document) {\n      return undefined;\n    } else {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      if (this._converter) {\n        const snapshot = new QueryDocumentSnapshot(\n          this._firestore,\n          this._key,\n          this._document,\n          this._fromCache,\n          this._hasPendingWrites,\n          /* converter= */ null\n        );\n        return this._converter.fromFirestore(snapshot, options);\n      } else {\n        const userDataWriter = new UserDataWriter(\n          this._firestore._databaseId,\n          options.serverTimestamps || 'none',\n          key =>\n            new DocumentReference(key, this._firestore, /* converter= */ null),\n          bytes => new Blob(bytes)\n        );\n        return userDataWriter.convertValue(this._document.toProto()) as T;\n      }\n    }\n  }\n\n  get(\n    fieldPath: string | ExternalFieldPath,\n    options: PublicSnapshotOptions = {}\n  ): unknown {\n    if (this._document) {\n      const value = this._document\n        .data()\n        .field(\n          fieldPathFromArgument('DocumentSnapshot.get', fieldPath, this._key)\n        );\n      if (value !== null) {\n        const userDataWriter = new UserDataWriter(\n          this._firestore._databaseId,\n          options.serverTimestamps || 'none',\n          key => new DocumentReference(key, this._firestore, this._converter),\n          bytes => new Blob(bytes)\n        );\n        return userDataWriter.convertValue(value);\n      }\n    }\n    return undefined;\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get ref(): PublicDocumentReference<T> {\n    return new DocumentReference<T>(\n      this._key,\n      this._firestore,\n      this._converter\n    );\n  }\n\n  get exists(): boolean {\n    return this._document !== null;\n  }\n\n  get metadata(): PublicSnapshotMetadata {\n    return new SnapshotMetadata(this._hasPendingWrites, this._fromCache);\n  }\n\n  isEqual(other: PublicDocumentSnapshot<T>): boolean {\n    if (!(other instanceof DocumentSnapshot)) {\n      return false;\n    }\n    return (\n      this._firestore === other._firestore &&\n      this._fromCache === other._fromCache &&\n      this._key.isEqual(other._key) &&\n      (this._document === null\n        ? other._document === null\n        : this._document.isEqual(other._document)) &&\n      this._converter === other._converter\n    );\n  }\n}\n\nexport class QueryDocumentSnapshot<T = DocumentData>\n  extends DocumentSnapshot<T>\n  implements PublicQueryDocumentSnapshot<T> {\n  data(options?: SnapshotOptions): T {\n    const data = super.data(options);\n    debugAssert(\n      data !== undefined,\n      'Document in a QueryDocumentSnapshot should exist'\n    );\n    return data;\n  }\n}\n\nexport function newQueryFilter(\n  query: InternalQuery,\n  methodName: string,\n  dataReader: UserDataReader,\n  databaseId: DatabaseId,\n  fieldPath: FieldPath,\n  op: Operator,\n  value: unknown\n): FieldFilter {\n  let fieldValue: ProtoValue;\n  if (fieldPath.isKeyField()) {\n    if (op === Operator.ARRAY_CONTAINS || op === Operator.ARRAY_CONTAINS_ANY) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. You can't perform '${op}' ` +\n          'queries on FieldPath.documentId().'\n      );\n    } else if (op === Operator.IN || op === Operator.NOT_IN) {\n      validateDisjunctiveFilterElements(value, op);\n      const referenceList: ProtoValue[] = [];\n      for (const arrayValue of value as ProtoValue[]) {\n        referenceList.push(parseDocumentIdValue(databaseId, query, arrayValue));\n      }\n      fieldValue = { arrayValue: { values: referenceList } };\n    } else {\n      fieldValue = parseDocumentIdValue(databaseId, query, value);\n    }\n  } else {\n    if (\n      op === Operator.IN ||\n      op === Operator.NOT_IN ||\n      op === Operator.ARRAY_CONTAINS_ANY\n    ) {\n      validateDisjunctiveFilterElements(value, op);\n    }\n    fieldValue = parseQueryValue(\n      dataReader,\n      methodName,\n      value,\n      /* allowArrays= */ op === Operator.IN || op === Operator.NOT_IN\n    );\n  }\n  const filter = FieldFilter.create(fieldPath, op, fieldValue);\n  validateNewFilter(query, filter);\n  return filter;\n}\n\nexport function newQueryOrderBy(\n  query: InternalQuery,\n  fieldPath: FieldPath,\n  direction: Direction\n): OrderBy {\n  if (query.startAt !== null) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid query. You must not call startAt() or startAfter() before ' +\n        'calling orderBy().'\n    );\n  }\n  if (query.endAt !== null) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid query. You must not call endAt() or endBefore() before ' +\n        'calling orderBy().'\n    );\n  }\n  const orderBy = new OrderBy(fieldPath, direction);\n  validateNewOrderBy(query, orderBy);\n  return orderBy;\n}\n\n/**\n * Create a Bound from a query and a document.\n *\n * Note that the Bound will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */\nexport function newQueryBoundFromDocument(\n  query: InternalQuery,\n  databaseId: DatabaseId,\n  methodName: string,\n  doc: Document | null,\n  before: boolean\n): Bound {\n  if (!doc) {\n    throw new FirestoreError(\n      Code.NOT_FOUND,\n      `Can't use a DocumentSnapshot that doesn't exist for ` +\n        `${methodName}().`\n    );\n  }\n\n  const components: ProtoValue[] = [];\n\n  // Because people expect to continue/end a query at the exact document\n  // provided, we need to use the implicit sort order rather than the explicit\n  // sort order, because it's guaranteed to contain the document key. That way\n  // the position becomes unambiguous and the query continues/ends exactly at\n  // the provided document. Without the key (by using the explicit sort\n  // orders), multiple documents could match the position, yielding duplicate\n  // results.\n  for (const orderBy of queryOrderBy(query)) {\n    if (orderBy.field.isKeyField()) {\n      components.push(refValue(databaseId, doc.key));\n    } else {\n      const value = doc.field(orderBy.field);\n      if (isServerTimestamp(value)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. You are trying to start or end a query using a ' +\n            'document for which the field \"' +\n            orderBy.field +\n            '\" is an uncommitted server timestamp. (Since the value of ' +\n            'this field is unknown, you cannot start/end a query with it.)'\n        );\n      } else if (value !== null) {\n        components.push(value);\n      } else {\n        const field = orderBy.field.canonicalString();\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. You are trying to start or end a query using a ` +\n            `document for which the field '${field}' (used as the ` +\n            `orderBy) does not exist.`\n        );\n      }\n    }\n  }\n  return new Bound(components, before);\n}\n\n/**\n * Converts a list of field values to a Bound for the given query.\n */\nexport function newQueryBoundFromFields(\n  query: InternalQuery,\n  databaseId: DatabaseId,\n  dataReader: UserDataReader,\n  methodName: string,\n  values: unknown[],\n  before: boolean\n): Bound {\n  // Use explicit order by's because it has to match the query the user made\n  const orderBy = query.explicitOrderBy;\n  if (values.length > orderBy.length) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Too many arguments provided to ${methodName}(). ` +\n        `The number of arguments must be less than or equal to the ` +\n        `number of orderBy() clauses`\n    );\n  }\n\n  const components: ProtoValue[] = [];\n  for (let i = 0; i < values.length; i++) {\n    const rawValue = values[i];\n    const orderByComponent = orderBy[i];\n    if (orderByComponent.field.isKeyField()) {\n      if (typeof rawValue !== 'string') {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. Expected a string for document ID in ` +\n            `${methodName}(), but got a ${typeof rawValue}`\n        );\n      }\n      if (!isCollectionGroupQuery(query) && rawValue.indexOf('/') !== -1) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection and ordering by FieldPath.documentId(), ` +\n            `the value passed to ${methodName}() must be a plain document ID, but ` +\n            `'${rawValue}' contains a slash.`\n        );\n      }\n      const path = query.path.child(ResourcePath.fromString(rawValue));\n      if (!DocumentKey.isDocumentKey(path)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection group and ordering by ` +\n            `FieldPath.documentId(), the value passed to ${methodName}() must result in a ` +\n            `valid document path, but '${path}' is not because it contains an odd number ` +\n            `of segments.`\n        );\n      }\n      const key = new DocumentKey(path);\n      components.push(refValue(databaseId, key));\n    } else {\n      const wrapped = parseQueryValue(dataReader, methodName, rawValue);\n      components.push(wrapped);\n    }\n  }\n\n  return new Bound(components, before);\n}\n\n/**\n * Parses the given documentIdValue into a ReferenceValue, throwing\n * appropriate errors if the value is anything other than a DocumentReference\n * or String, or if the string is malformed.\n */\nfunction parseDocumentIdValue(\n  databaseId: DatabaseId,\n  query: InternalQuery,\n  documentIdValue: unknown\n): ProtoValue {\n  if (typeof documentIdValue === 'string') {\n    if (documentIdValue === '') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. When querying with FieldPath.documentId(), you ' +\n          'must provide a valid document ID, but it was an empty string.'\n      );\n    }\n    if (!isCollectionGroupQuery(query) && documentIdValue.indexOf('/') !== -1) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying a collection by ` +\n          `FieldPath.documentId(), you must provide a plain document ID, but ` +\n          `'${documentIdValue}' contains a '/' character.`\n      );\n    }\n    const path = query.path.child(ResourcePath.fromString(documentIdValue));\n    if (!DocumentKey.isDocumentKey(path)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying a collection group by ` +\n          `FieldPath.documentId(), the value provided must result in a valid document path, ` +\n          `but '${path}' is not because it has an odd number of segments (${path.length}).`\n      );\n    }\n    return refValue(databaseId, new DocumentKey(path));\n  } else if (documentIdValue instanceof _DocumentKeyReference) {\n    return refValue(databaseId, documentIdValue._key);\n  } else {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid query. When querying with FieldPath.documentId(), you must provide a valid ` +\n        `string or a DocumentReference, but it was: ` +\n        `${valueDescription(documentIdValue)}.`\n    );\n  }\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */\nfunction validateDisjunctiveFilterElements(\n  value: unknown,\n  operator: Operator\n): void {\n  if (!Array.isArray(value) || value.length === 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid Query. A non-empty array is required for ' +\n        `'${operator.toString()}' filters.`\n    );\n  }\n  if (value.length > 10) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid Query. '${operator.toString()}' filters support a ` +\n        'maximum of 10 elements in the value array.'\n    );\n  }\n}\n\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one array operator is allowed.\n * 2. Only one disjunctive operator is allowed.\n * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.\n * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.\n *\n * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY\n * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN\n */\nfunction conflictingOps(op: Operator): Operator[] {\n  switch (op) {\n    case Operator.NOT_EQUAL:\n      return [Operator.NOT_EQUAL, Operator.NOT_IN];\n    case Operator.ARRAY_CONTAINS:\n      return [\n        Operator.ARRAY_CONTAINS,\n        Operator.ARRAY_CONTAINS_ANY,\n        Operator.NOT_IN\n      ];\n    case Operator.IN:\n      return [Operator.ARRAY_CONTAINS_ANY, Operator.IN, Operator.NOT_IN];\n    case Operator.ARRAY_CONTAINS_ANY:\n      return [\n        Operator.ARRAY_CONTAINS,\n        Operator.ARRAY_CONTAINS_ANY,\n        Operator.IN,\n        Operator.NOT_IN\n      ];\n    case Operator.NOT_IN:\n      return [\n        Operator.ARRAY_CONTAINS,\n        Operator.ARRAY_CONTAINS_ANY,\n        Operator.IN,\n        Operator.NOT_IN,\n        Operator.NOT_EQUAL\n      ];\n    default:\n      return [];\n  }\n}\n\nfunction validateNewFilter(query: InternalQuery, filter: Filter): void {\n  debugAssert(filter instanceof FieldFilter, 'Only FieldFilters are supported');\n\n  if (filter.isInequality()) {\n    const existingField = getInequalityFilterField(query);\n    if (existingField !== null && !existingField.isEqual(filter.field)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. All where filters with an inequality' +\n          ' (<, <=, >, or >=) must be on the same field. But you have' +\n          ` inequality filters on '${existingField.toString()}'` +\n          ` and '${filter.field.toString()}'`\n      );\n    }\n\n    const firstOrderByField = getFirstOrderByField(query);\n    if (firstOrderByField !== null) {\n      validateOrderByAndInequalityMatch(query, filter.field, firstOrderByField);\n    }\n  }\n\n  const conflictingOp = findFilterOperator(query, conflictingOps(filter.op));\n  if (conflictingOp !== null) {\n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    if (conflictingOp === filter.op) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You cannot use more than one ' +\n          `'${filter.op.toString()}' filter.`\n      );\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. You cannot use '${filter.op.toString()}' filters ` +\n          `with '${conflictingOp.toString()}' filters.`\n      );\n    }\n  }\n}\n\nfunction validateNewOrderBy(query: InternalQuery, orderBy: OrderBy): void {\n  if (getFirstOrderByField(query) === null) {\n    // This is the first order by. It must match any inequality.\n    const inequalityField = getInequalityFilterField(query);\n    if (inequalityField !== null) {\n      validateOrderByAndInequalityMatch(query, inequalityField, orderBy.field);\n    }\n  }\n}\n\nfunction validateOrderByAndInequalityMatch(\n  baseQuery: InternalQuery,\n  inequality: FieldPath,\n  orderBy: FieldPath\n): void {\n  if (!orderBy.isEqual(inequality)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid query. You have a where filter with an inequality ` +\n        `(<, <=, >, or >=) on field '${inequality.toString()}' ` +\n        `and so you must also use '${inequality.toString()}' ` +\n        `as your first orderBy(), but your first orderBy() ` +\n        `is on field '${orderBy.toString()}' instead.`\n    );\n  }\n}\n\nexport function validateHasExplicitOrderByForLimitToLast(\n  query: InternalQuery\n): void {\n  if (hasLimitToLast(query) && query.explicitOrderBy.length === 0) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'limitToLast() queries require specifying at least one orderBy() clause'\n    );\n  }\n}\n\nexport class Query<T = DocumentData> implements PublicQuery<T> {\n  constructor(\n    public _query: InternalQuery,\n    readonly firestore: Firestore,\n    protected readonly _converter: FirestoreDataConverter<T> | null\n  ) {}\n\n  where(\n    field: string | ExternalFieldPath,\n    opStr: WhereFilterOp,\n    value: unknown\n  ): PublicQuery<T> {\n    const fieldPath = fieldPathFromArgument('Query.where', field);\n    const filter = newQueryFilter(\n      this._query,\n      'Query.where',\n      this.firestore._dataReader,\n      this.firestore._databaseId,\n      fieldPath,\n      opStr as Operator,\n      value\n    );\n    return new Query(\n      queryWithAddedFilter(this._query, filter),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  orderBy(\n    field: string | ExternalFieldPath,\n    directionStr?: OrderByDirection\n  ): PublicQuery<T> {\n    let direction: Direction;\n    if (directionStr === undefined || directionStr === 'asc') {\n      direction = Direction.ASCENDING;\n    } else if (directionStr === 'desc') {\n      direction = Direction.DESCENDING;\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function Query.orderBy() has unknown direction '${directionStr}', ` +\n          `expected 'asc' or 'desc'.`\n      );\n    }\n    const fieldPath = fieldPathFromArgument('Query.orderBy', field);\n    const orderBy = newQueryOrderBy(this._query, fieldPath, direction);\n    return new Query(\n      queryWithAddedOrderBy(this._query, orderBy),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limit(n: number): PublicQuery<T> {\n    validatePositiveNumber('Query.limit', n);\n    return new Query(\n      queryWithLimit(this._query, n, LimitType.First),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limitToLast(n: number): PublicQuery<T> {\n    validatePositiveNumber('Query.limitToLast', n);\n    return new Query(\n      queryWithLimit(this._query, n, LimitType.Last),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAt(\n    docOrField: unknown | PublicDocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): PublicQuery<T> {\n    const bound = this.boundFromDocOrFields(\n      'Query.startAt',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      queryWithStartAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAfter(\n    docOrField: unknown | PublicDocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): PublicQuery<T> {\n    const bound = this.boundFromDocOrFields(\n      'Query.startAfter',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      queryWithStartAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endBefore(\n    docOrField: unknown | PublicDocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): PublicQuery<T> {\n    const bound = this.boundFromDocOrFields(\n      'Query.endBefore',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      queryWithEndAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endAt(\n    docOrField: unknown | PublicDocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): PublicQuery<T> {\n    const bound = this.boundFromDocOrFields(\n      'Query.endAt',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      queryWithEndAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  isEqual(other: PublicQuery<T>): boolean {\n    if (!(other instanceof Query)) {\n      return false;\n    }\n    return (\n      this.firestore === other.firestore &&\n      queryEquals(this._query, other._query) &&\n      this._converter === other._converter\n    );\n  }\n\n  withConverter<U>(converter: FirestoreDataConverter<U>): PublicQuery<U> {\n    return new Query<U>(this._query, this.firestore, converter);\n  }\n\n  /** Helper function to create a bound from a document or fields */\n  private boundFromDocOrFields(\n    methodName: string,\n    docOrField: unknown | PublicDocumentSnapshot<T>,\n    fields: unknown[],\n    before: boolean\n  ): Bound {\n    if (docOrField instanceof DocumentSnapshot) {\n      return newQueryBoundFromDocument(\n        this._query,\n        this.firestore._databaseId,\n        methodName,\n        docOrField._document,\n        before\n      );\n    } else {\n      const allFields = [docOrField].concat(fields);\n      return newQueryBoundFromFields(\n        this._query,\n        this.firestore._databaseId,\n        this.firestore._dataReader,\n        methodName,\n        allFields,\n        before\n      );\n    }\n  }\n\n  onSnapshot(observer: PartialObserver<PublicQuerySnapshot<T>>): Unsubscribe;\n  onSnapshot(\n    options: SnapshotListenOptions,\n    observer: PartialObserver<PublicQuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<PublicQuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: SnapshotListenOptions,\n    onNext: NextFn<PublicQuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    let options: ListenOptions = {};\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as SnapshotListenOptions;\n      currArg++;\n    }\n\n    if (isPartialObserver(args[currArg])) {\n      const userObserver = args[currArg] as PartialObserver<\n        PublicQuerySnapshot<T>\n      >;\n      args[currArg] = userObserver.next?.bind(userObserver);\n      args[currArg + 1] = userObserver.error?.bind(userObserver);\n      args[currArg + 2] = userObserver.complete?.bind(userObserver);\n    } else {\n    }\n\n    const observer: PartialObserver<ViewSnapshot> = {\n      next: snapshot => {\n        if (args[currArg]) {\n          (args[currArg] as NextFn<PublicQuerySnapshot<T>>)(\n            new QuerySnapshot(\n              this.firestore,\n              this._query,\n              snapshot,\n              this._converter\n            )\n          );\n        }\n      },\n      error: args[currArg + 1] as ErrorFn,\n      complete: args[currArg + 2] as CompleteFn\n    };\n\n    validateHasExplicitOrderByForLimitToLast(this._query);\n    const client = ensureFirestoreConfigured(this.firestore);\n    return firestoreClientListen(client, this._query, options, observer);\n  }\n\n  get(options?: GetOptions): Promise<PublicQuerySnapshot<T>> {\n    validateHasExplicitOrderByForLimitToLast(this._query);\n\n    const client = ensureFirestoreConfigured(this.firestore);\n    return (options && options.source === 'cache'\n      ? firestoreClientGetDocumentsFromLocalCache(client, this._query)\n      : firestoreClientGetDocumentsViaSnapshotListener(\n          client,\n          this._query,\n          options\n        )\n    ).then(\n      snap =>\n        new QuerySnapshot(this.firestore, this._query, snap, this._converter)\n    );\n  }\n}\n\nexport class QuerySnapshot<T = DocumentData> implements PublicQuerySnapshot<T> {\n  private _cachedChanges: Array<PublicDocumentChange<T>> | null = null;\n  private _cachedChangesIncludeMetadataChanges: boolean | null = null;\n\n  readonly metadata: PublicSnapshotMetadata;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    private readonly _originalQuery: InternalQuery,\n    private readonly _snapshot: ViewSnapshot,\n    private readonly _converter: FirestoreDataConverter<T> | null\n  ) {\n    this.metadata = new SnapshotMetadata(\n      _snapshot.hasPendingWrites,\n      _snapshot.fromCache\n    );\n  }\n\n  get docs(): Array<PublicQueryDocumentSnapshot<T>> {\n    const result: Array<PublicQueryDocumentSnapshot<T>> = [];\n    this.forEach(doc => result.push(doc));\n    return result;\n  }\n\n  get empty(): boolean {\n    return this._snapshot.docs.isEmpty();\n  }\n\n  get size(): number {\n    return this._snapshot.docs.size;\n  }\n\n  forEach(\n    callback: (result: PublicQueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    this._snapshot.docs.forEach(doc => {\n      callback.call(\n        thisArg,\n        this.convertToDocumentImpl(\n          doc,\n          this.metadata.fromCache,\n          this._snapshot.mutatedKeys.has(doc.key)\n        )\n      );\n    });\n  }\n\n  get query(): PublicQuery<T> {\n    return new Query(this._originalQuery, this._firestore, this._converter);\n  }\n\n  docChanges(options?: SnapshotListenOptions): Array<PublicDocumentChange<T>> {\n    if (options) {\n    }\n\n    const includeMetadataChanges = !!(\n      options && options.includeMetadataChanges\n    );\n\n    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'To include metadata changes with your document changes, you must ' +\n          'also pass { includeMetadataChanges:true } to onSnapshot().'\n      );\n    }\n\n    if (\n      !this._cachedChanges ||\n      this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges\n    ) {\n      this._cachedChanges = changesFromSnapshot<QueryDocumentSnapshot<T>>(\n        this._snapshot,\n        includeMetadataChanges,\n        this.convertToDocumentImpl.bind(this)\n      );\n      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\n    }\n\n    return this._cachedChanges;\n  }\n\n  /** Check the equality. The call can be very expensive. */\n  isEqual(other: PublicQuerySnapshot<T>): boolean {\n    if (!(other instanceof QuerySnapshot)) {\n      return false;\n    }\n\n    return (\n      this._firestore === other._firestore &&\n      queryEquals(this._originalQuery, other._originalQuery) &&\n      this._snapshot.isEqual(other._snapshot) &&\n      this._converter === other._converter\n    );\n  }\n\n  private convertToDocumentImpl(\n    doc: Document,\n    fromCache: boolean,\n    hasPendingWrites: boolean\n  ): QueryDocumentSnapshot<T> {\n    return new QueryDocumentSnapshot(\n      this._firestore,\n      doc.key,\n      doc,\n      fromCache,\n      hasPendingWrites,\n      this._converter\n    );\n  }\n}\n\nexport class CollectionReference<T = DocumentData>\n  extends Query<T>\n  implements PublicCollectionReference<T> {\n  constructor(\n    readonly _path: ResourcePath,\n    firestore: Firestore,\n    _converter: FirestoreDataConverter<T> | null\n  ) {\n    super(newQueryForPath(_path), firestore, _converter);\n    if (_path.length % 2 !== 1) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid collection reference. Collection ' +\n          'references must have an odd number of segments, but ' +\n          `${_path.canonicalString()} has ${_path.length}`\n      );\n    }\n  }\n\n  get id(): string {\n    return this._query.path.lastSegment();\n  }\n\n  get parent(): PublicDocumentReference<DocumentData> | null {\n    const parentPath = this._query.path.popLast();\n    if (parentPath.isEmpty()) {\n      return null;\n    } else {\n      return new DocumentReference<DocumentData>(\n        new DocumentKey(parentPath),\n        this.firestore,\n        /* converter= */ null\n      );\n    }\n  }\n\n  get path(): string {\n    return this._query.path.canonicalString();\n  }\n\n  doc(pathString?: string): PublicDocumentReference<T> {\n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    if (arguments.length === 0) {\n      pathString = AutoId.newId();\n    }\n    validateNonEmptyArgument('CollectionReference.doc', 'path', pathString);\n    const path = ResourcePath.fromString(pathString!);\n    return DocumentReference.forPath<T>(\n      this._query.path.child(path),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  add(value: T): Promise<PublicDocumentReference<T>> {\n    const convertedValue = this._converter\n      ? this._converter.toFirestore(value)\n      : value;\n    const docRef = this.doc();\n\n    // Call set() with the converted value directly to avoid calling toFirestore() a second time.\n    return new DocumentReference(\n      (docRef as DocumentReference<T>)._key,\n      this.firestore,\n      null\n    )\n      .set(convertedValue)\n      .then(() => docRef);\n  }\n\n  withConverter<U>(\n    converter: FirestoreDataConverter<U>\n  ): PublicCollectionReference<U> {\n    return new CollectionReference<U>(this._path, this.firestore, converter);\n  }\n}\n\nfunction validateReference<T>(\n  methodName: string,\n  documentRef: PublicDocumentReference<T>,\n  firestore: Firestore\n): _DocumentKeyReference<T> {\n  const reference = cast<DocumentReference<T>>(documentRef, DocumentReference);\n  if (reference.firestore !== firestore) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Provided document reference is from a different Firestore instance.'\n    );\n  } else {\n    return reference;\n  }\n}\n\n/**\n * Calculates the array of DocumentChanges for a given ViewSnapshot.\n *\n * Exported for testing.\n *\n * @param snapshot The ViewSnapshot that represents the expected state.\n * @param includeMetadataChanges Whether to include metadata changes.\n * @param converter A factory function that returns a QueryDocumentSnapshot.\n * @return An object that matches the DocumentChange API.\n */\nexport function changesFromSnapshot<DocSnap>(\n  snapshot: ViewSnapshot,\n  includeMetadataChanges: boolean,\n  converter: (\n    doc: Document,\n    fromCache: boolean,\n    hasPendingWrite: boolean\n  ) => DocSnap\n): Array<{\n  type: DocumentChangeType;\n  doc: DocSnap;\n  oldIndex: number;\n  newIndex: number;\n}> {\n  if (snapshot.oldDocs.isEmpty()) {\n    // Special case the first snapshot because index calculation is easy and\n    // fast\n    let lastDoc: Document;\n    let index = 0;\n    return snapshot.docChanges.map(change => {\n      const doc = converter(\n        change.doc,\n        snapshot.fromCache,\n        snapshot.mutatedKeys.has(change.doc.key)\n      );\n      debugAssert(\n        change.type === ChangeType.Added,\n        'Invalid event type for first snapshot'\n      );\n      debugAssert(\n        !lastDoc || newQueryComparator(snapshot.query)(lastDoc, change.doc) < 0,\n        'Got added events in wrong order'\n      );\n      lastDoc = change.doc;\n      return {\n        type: 'added' as DocumentChangeType,\n        doc,\n        oldIndex: -1,\n        newIndex: index++\n      };\n    });\n  } else {\n    // A DocumentSet that is updated incrementally as changes are applied to use\n    // to lookup the index of a document.\n    let indexTracker = snapshot.oldDocs;\n    return snapshot.docChanges\n      .filter(\n        change => includeMetadataChanges || change.type !== ChangeType.Metadata\n      )\n      .map(change => {\n        const doc = converter(\n          change.doc,\n          snapshot.fromCache,\n          snapshot.mutatedKeys.has(change.doc.key)\n        );\n        let oldIndex = -1;\n        let newIndex = -1;\n        if (change.type !== ChangeType.Added) {\n          oldIndex = indexTracker.indexOf(change.doc.key);\n          debugAssert(oldIndex >= 0, 'Index for document not found');\n          indexTracker = indexTracker.delete(change.doc.key);\n        }\n        if (change.type !== ChangeType.Removed) {\n          indexTracker = indexTracker.add(change.doc);\n          newIndex = indexTracker.indexOf(change.doc.key);\n        }\n        return { type: resultChangeType(change.type), doc, oldIndex, newIndex };\n      });\n  }\n}\n\nfunction resultChangeType(type: ChangeType): DocumentChangeType {\n  switch (type) {\n    case ChangeType.Added:\n      return 'added';\n    case ChangeType.Modified:\n    case ChangeType.Metadata:\n      return 'modified';\n    case ChangeType.Removed:\n      return 'removed';\n    default:\n      return fail('Unknown change type: ' + type);\n  }\n}\n\n/**\n * Converts custom model object of type T into DocumentData by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to DocumentData\n * because we want to provide the user with a more specific error message if\n * their set() or fails due to invalid data originating from a toFirestore()\n * call.\n */\nexport function applyFirestoreDataConverter<T>(\n  converter: UntypedFirestoreDataConverter<T> | null,\n  value: T,\n  options?: SetOptions\n): DocumentData {\n  let convertedValue;\n  if (converter) {\n    if (options && (options.merge || options.mergeFields)) {\n      // Cast to `any` in order to satisfy the union type constraint on\n      // toFirestore().\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      convertedValue = (converter as any).toFirestore(value, options);\n    } else {\n      convertedValue = converter.toFirestore(value);\n    }\n  } else {\n    convertedValue = value as DocumentData;\n  }\n  return convertedValue;\n}\n\nfunction contains(obj: object, key: string): obj is { key: unknown } {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Datastore, newDatastore } from '../../../src/remote/datastore';\nimport { newConnection } from '../../../src/platform/connection';\nimport { newSerializer } from '../../../src/platform/serializer';\nimport { FirebaseFirestore, makeDatabaseInfo } from './database';\nimport { logDebug } from '../../../src/util/log';\nimport { Code, FirestoreError } from '../../../src/util/error';\n\nexport const LOG_TAG = 'ComponentProvider';\n\n// settings() defaults:\nexport const DEFAULT_HOST = 'firestore.googleapis.com';\nexport const DEFAULT_SSL = true;\n\n// The components module manages the lifetime of dependencies of the Firestore\n// client. Dependencies can be lazily constructed and only one exists per\n// Firestore instance.\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\nconst datastoreInstances = new Map<FirebaseFirestore, Datastore>();\n\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nexport function getDatastore(firestore: FirebaseFirestore): Datastore {\n  if (firestore._terminated) {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      'The client has already been terminated.'\n    );\n  }\n  if (!datastoreInstances.has(firestore)) {\n    logDebug(LOG_TAG, 'Initializing Datastore');\n    const databaseInfo = makeDatabaseInfo(\n      firestore._databaseId,\n      firestore._persistenceKey,\n      firestore._getSettings()\n    );\n    const connection = newConnection(databaseInfo);\n    const serializer = newSerializer(firestore._databaseId);\n    const datastore = newDatastore(\n      firestore._credentials,\n      connection,\n      serializer\n    );\n\n    datastoreInstances.set(firestore, datastore);\n  }\n  return datastoreInstances.get(firestore)!;\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\nexport function removeComponents(firestore: FirebaseFirestore): void {\n  const datastore = datastoreInstances.get(firestore);\n  if (datastore) {\n    logDebug(LOG_TAG, 'Removing Datastore');\n    datastoreInstances.delete(firestore);\n    datastore.terminate();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '../../exp/index';\nimport {\n  deleteField,\n  serverTimestamp,\n  arrayUnion,\n  arrayRemove,\n  increment\n} from '../../exp/index';\nimport * as legacy from '@firebase/firestore-types';\nimport { Compat } from './compat';\n\nexport class FieldValue\n  extends Compat<exp.FieldValue>\n  implements legacy.FieldValue {\n  static serverTimestamp(): FieldValue {\n    const delegate = serverTimestamp();\n    delegate._methodName = 'FieldValue.serverTimestamp';\n    return new FieldValue(delegate);\n  }\n\n  static delete(): FieldValue {\n    const delegate = deleteField();\n    delegate._methodName = 'FieldValue.delete';\n    return new FieldValue(delegate);\n  }\n\n  static arrayUnion(...elements: unknown[]): FieldValue {\n    const delegate = arrayUnion(...elements);\n    delegate._methodName = 'FieldValue.arrayUnion';\n    return new FieldValue(delegate);\n  }\n\n  static arrayRemove(...elements: unknown[]): FieldValue {\n    const delegate = arrayRemove(...elements);\n    delegate._methodName = 'FieldValue.arrayRemove';\n    return new FieldValue(delegate);\n  }\n\n  static increment(n: number): FieldValue {\n    const delegate = increment(n);\n    delegate._methodName = 'FieldValue.increment';\n    return new FieldValue(delegate);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType, Provider } from '@firebase/component';\nimport {\n  CACHE_SIZE_UNLIMITED,\n  CollectionReference,\n  DocumentReference,\n  DocumentSnapshot,\n  Firestore,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  Transaction,\n  WriteBatch,\n  setLogLevel\n} from './api/database';\nimport { Blob } from './api/blob';\nimport { FieldPath } from './api/field_path';\nimport { GeoPoint } from './api/geo_point';\nimport { Timestamp } from './api/timestamp';\nimport { FieldValue } from './compat/field_value';\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n *\n * @param firebase The FirebaseNamespace to register Firestore with\n * @param firestoreFactory A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    auth: Provider<FirebaseAuthInternalName>\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore',\n      container => {\n        const app = container.getProvider('app').getImmediate()!;\n        return firestoreFactory(app, container.getProvider('auth-internal'));\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\n\nimport { Firestore, IndexedDbPersistenceProvider } from './src/api/database';\nimport { configureForFirebase } from './src/config';\n\nimport './register-module';\nimport { name, version } from './package.json';\n\n/**\n * Registers the main Firestore ReactNative build with the components framework.\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(instance, (app, auth) => {\n    return new Firestore(app, auth, new IndexedDbPersistenceProvider());\n  });\n  instance.registerVersion(name, version, 'rn');\n}\n\nregisterFirestore(firebase);\n"],"names":["__PRIVATE_decodeBase64","__PRIVATE_encoded","String","fromCharCode","apply","base64","decodeStringToByteArray","Code","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","FirestoreError","Error","[object Object]","code","message","super","this","toString","name","__PRIVATE_logClient","Logger","__PRIVATE_getLogLevel","logLevel","__PRIVATE_logDebug","msg","obj","LogLevel","DEBUG","args","map","__PRIVATE_argToString","debug","__PRIVATE_logError","ERROR","error","__PRIVATE_logWarn","WARN","warn","value","JSON","stringify","e","fail","__PRIVATE_failure","__PRIVATE_hardAssert","assertion","__PRIVATE_debugCast","constructor","__PRIVATE_randomBytes","__PRIVATE_nBytes","crypto","self","bytes","Uint8Array","getRandomValues","__PRIVATE_i","Math","floor","random","__PRIVATE_AutoId","__PRIVATE_chars","__PRIVATE_maxMultiple","length","__PRIVATE_autoId","charAt","__PRIVATE_primitiveComparator","left","right","__PRIVATE_arrayEquals","__PRIVATE_comparator","every","index","__PRIVATE_immediateSuccessor","s","__PRIVATE_ByteString","__PRIVATE_binaryString","array","__PRIVATE_binaryStringFromUint8Array","raw","charCodeAt","encodeByteArray","__PRIVATE_encodeBase64","buffer","__PRIVATE_uint8ArrayFromBinaryString","other","Bytes","__PRIVATE_byteString","__PRIVATE__byteString","fromBase64String","fromUint8Array","toBase64","toUint8Array","isEqual","__PRIVATE_assertUint8ArrayAvailable","Blob","__PRIVATE_DatabaseInfo","__PRIVATE_databaseId","persistenceKey","host","ssl","forceLongPolling","__PRIVATE_autoDetectLongPolling","__PRIVATE_DatabaseId","projectId","database","I","__PRIVATE_objectSize","count","key","Object","prototype","hasOwnProperty","call","forEach","fn","__PRIVATE_isEmpty","__PRIVATE_ObjectMap","__PRIVATE_mapKeyFn","__PRIVATE_equalsFn","id","matches","__PRIVATE_inner","undefined","__PRIVATE_otherKey","get","push","splice","__PRIVATE__","entries","k","v","Timestamp","seconds","nanoseconds","fromMillis","Date","now","date","getTime","milliseconds","toMillis","__PRIVATE_adjustedSeconds","padStart","__PRIVATE_SnapshotVersion","timestamp","__PRIVATE__compareTo","__PRIVATE_BasePath","segments","offset","__PRIVATE_len","__PRIVATE_nameOrPath","slice","limit","__PRIVATE_segment","__PRIVATE_construct","size","__PRIVATE_potentialChild","end","p1","p2","min","ResourcePath","__PRIVATE_toArray","join","__PRIVATE_canonicalString","pathComponents","path","indexOf","split","filter","__PRIVATE_identifierRegExp","FieldPath","test","str","replace","__PRIVATE_isValidIdentifier","__PRIVATE_current","__PRIVATE_addCurrentSegment","__PRIVATE_inBackticks","c","next","__PRIVATE_DocumentKey","__PRIVATE_fromString","__PRIVATE_popFirst","collectionId","k1","k2","__PRIVATE_isNullOrUndefined","__PRIVATE_isNegativeZero","isSafeInteger","Number","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","__PRIVATE_TargetImpl","collectionGroup","orderBy","filters","startAt","endAt","__PRIVATE_newTarget","__PRIVATE_canonifyTarget","target","__PRIVATE_targetImpl","__PRIVATE_memoizedCanonicalId","canonicalId","f","__PRIVATE_canonifyFilter","o","__PRIVATE_canonifyOrderBy","field","dir","__PRIVATE_canonifyBound","__PRIVATE_stringifyTarget","__PRIVATE_stringifyFilter","op","__PRIVATE_stringifyOrderBy","__PRIVATE_targetEquals","__PRIVATE_orderByEquals","__PRIVATE_f1","__PRIVATE_f2","__PRIVATE_valueEquals","__PRIVATE_boundEquals","__PRIVATE_isDocumentTarget","__PRIVATE_isDocumentKey","__PRIVATE_TargetData","targetId","__PRIVATE_purpose","sequenceNumber","__PRIVATE_snapshotVersion","lastLimboFreeSnapshotVersion","resumeToken","__PRIVATE_EMPTY_BYTE_STRING","ExistenceFilter","__PRIVATE_RpcCode","__PRIVATE_isPermanentError","__PRIVATE_mapCodeFromRpcCode","RpcCode","__PRIVATE_SortedMap","root","__PRIVATE_LLRBNode","EMPTY","__PRIVATE_insert","copy","__PRIVATE_BLACK","remove","node","cmp","__PRIVATE_prunedNodes","__PRIVATE_minKey","__PRIVATE_maxKey","action","__PRIVATE_inorderTraversal","__PRIVATE_descriptions","__PRIVATE_reverseTraversal","__PRIVATE_SortedMapIterator","__PRIVATE_startKey","__PRIVATE_isReverse","__PRIVATE_nodeStack","pop","result","color","RED","n","__PRIVATE_fixUp","__PRIVATE_isRed","__PRIVATE_moveRedLeft","__PRIVATE_removeMin","__PRIVATE_smallest","__PRIVATE_rotateRight","__PRIVATE_moveRedRight","__PRIVATE_rotateLeft","__PRIVATE_colorFlip","__PRIVATE_nl","__PRIVATE_nr","__PRIVATE_blackDepth","__PRIVATE_check","pow","__PRIVATE_SortedSet","data","__PRIVATE_elem","cb","range","__PRIVATE_iter","__PRIVATE_getIteratorFrom","__PRIVATE_hasNext","__PRIVATE_getNext","start","__PRIVATE_getIterator","__PRIVATE_SortedSetIterator","has","add","__PRIVATE_thisIt","__PRIVATE_otherIt","__PRIVATE_thisElem","__PRIVATE_otherElem","__PRIVATE_res","__PRIVATE_EMPTY_MAYBE_DOCUMENT_MAP","__PRIVATE_maybeDocumentMap","__PRIVATE_nullableMaybeDocumentMap","__PRIVATE_EMPTY_DOCUMENT_MAP","__PRIVATE_documentMap","__PRIVATE_EMPTY_DOCUMENT_VERSION_MAP","__PRIVATE_EMPTY_DOCUMENT_KEY_SET","__PRIVATE_documentKeySet","keys","set","__PRIVATE_EMPTY_TARGET_ID_SET","__PRIVATE_targetIdSet","__PRIVATE_DocumentSet","__PRIVATE_comp","__PRIVATE_d1","__PRIVATE_d2","__PRIVATE_keyedMap","__PRIVATE_sortedSet","__PRIVATE_oldSet","doc","delete","__PRIVATE_thisDoc","__PRIVATE_otherDoc","__PRIVATE_docStrings","__PRIVATE_newSet","__PRIVATE_DocumentChangeSet","__PRIVATE_change","__PRIVATE_oldChange","__PRIVATE_changeMap","type","__PRIVATE_changes","__PRIVATE_ViewSnapshot","query","docs","__PRIVATE_oldDocs","docChanges","__PRIVATE_mutatedKeys","fromCache","__PRIVATE_syncStateChanged","__PRIVATE_excludesMetadataChanges","documents","__PRIVATE_emptySet","hasPendingWrites","__PRIVATE_queryEquals","__PRIVATE_otherChanges","__PRIVATE_RemoteEvent","__PRIVATE_targetChanges","__PRIVATE_targetMismatches","__PRIVATE_documentUpdates","__PRIVATE_resolvedLimboDocuments","Map","TargetChange","__PRIVATE_createSynthesizedTargetChangeForCurrentChange","__PRIVATE_addedDocuments","__PRIVATE_modifiedDocuments","__PRIVATE_removedDocuments","__PRIVATE_DocumentWatchChange","__PRIVATE_updatedTargetIds","removedTargetIds","__PRIVATE_newDoc","__PRIVATE_ExistenceFilterChange","__PRIVATE_existenceFilter","__PRIVATE_WatchTargetChange","state","targetIds","cause","__PRIVATE_TargetState","__PRIVATE_snapshotChangesMap","te","__PRIVATE__current","__PRIVATE__resumeToken","_e","__PRIVATE_pendingResponses","fe","__PRIVATE__hasPendingChanges","__PRIVATE_approximateByteSize","__PRIVATE_documentChanges","__PRIVATE_changeType","__PRIVATE_WatchChangeAggregator","__PRIVATE_metadataProvider","__PRIVATE_documentTargetMap","__PRIVATE_docChange","Document","__PRIVATE_addDocumentToTarget","__PRIVATE_NoDocument","__PRIVATE_removeDocumentFromTarget","targetChange","__PRIVATE_forEachTarget","__PRIVATE_targetState","__PRIVATE_ensureTargetState","__PRIVATE_isActiveTarget","__PRIVATE_updateResumeToken","__PRIVATE_recordTargetResponse","__PRIVATE_isPending","__PRIVATE_clearPendingChanges","removeTarget","__PRIVATE_markCurrent","__PRIVATE_resetTarget","__PRIVATE_targetStates","__PRIVATE_watchChange","__PRIVATE_expectedCount","__PRIVATE_targetData","__PRIVATE_targetDataForActiveTarget","__PRIVATE_getCurrentDocumentCountForTarget","__PRIVATE_pendingTargetResets","__PRIVATE_pendingDocumentUpdates","__PRIVATE_targetContainsDocument","__PRIVATE_hasPendingChanges","__PRIVATE_toTargetChange","__PRIVATE_pendingDocumentTargetMapping","__PRIVATE_targets","__PRIVATE_isOnlyLimboTarget","__PRIVATE_forEachWhile","__PRIVATE_remoteEvent","document","__PRIVATE_addDocumentChange","__PRIVATE_ensureDocumentTargetMapping","__PRIVATE_updatedDocument","__PRIVATE_removeDocumentChange","__PRIVATE_getRemoteKeysForTarget","__PRIVATE_recordPendingTargetRequest","__PRIVATE_targetMapping","__PRIVATE_targetActive","__PRIVATE_getTargetDataForTarget","__PRIVATE_isServerTimestamp","mapValue","fields","stringValue","__PRIVATE_getPreviousValue","previousValue","__PRIVATE_getLocalWriteTime","__PRIVATE_localWriteTime","__PRIVATE_normalizeTimestamp","nanos","__PRIVATE_ISO_TIMESTAMP_REG_EXP","RegExp","__PRIVATE_typeOrder","__PRIVATE_leftType","booleanValue","timestampValue","__PRIVATE_leftTimestamp","__PRIVATE_rightTimestamp","__PRIVATE_timestampEquals","__PRIVATE_normalizeByteString","__PRIVATE_blobEquals","referenceValue","__PRIVATE_normalizeNumber","geoPointValue","latitude","longitude","__PRIVATE_geoPointEquals","integerValue","__PRIVATE_n1","__PRIVATE_n2","isNaN","__PRIVATE_numberEquals","arrayValue","values","__PRIVATE_leftMap","__PRIVATE_rightMap","__PRIVATE_objectEquals","__PRIVATE_arrayValueContains","__PRIVATE_haystack","__PRIVATE_needle","find","__PRIVATE_valueCompare","__PRIVATE_rightType","__PRIVATE_leftNumber","doubleValue","__PRIVATE_rightNumber","__PRIVATE_compareNumbers","__PRIVATE_compareTimestamps","__PRIVATE_leftBytes","__PRIVATE_rightBytes","__PRIVATE_compareTo","__PRIVATE_compareBlobs","__PRIVATE_leftPath","__PRIVATE_rightPath","__PRIVATE_leftSegments","__PRIVATE_rightSegments","__PRIVATE_comparison","__PRIVATE_compareReferences","__PRIVATE_compareGeoPoints","__PRIVATE_leftArray","__PRIVATE_rightArray","compare","__PRIVATE_compareArrays","__PRIVATE_leftKeys","__PRIVATE_rightKeys","sort","__PRIVATE_keyCompare","__PRIVATE_compareMaps","__PRIVATE_canonifyValue","__PRIVATE_normalizedTimestamp","__PRIVATE_canonifyTimestamp","__PRIVATE_fromName","__PRIVATE_geoPoint","first","__PRIVATE_canonifyArray","__PRIVATE_sortedKeys","__PRIVATE_canonifyMap","__PRIVATE_fraction","exec","__PRIVATE_nanoStr","substr","__PRIVATE_parsedDate","blob","__PRIVATE_refValue","isArray","__PRIVATE_isNullValue","__PRIVATE_isNanValue","__PRIVATE_isMapValue","__PRIVATE_DIRECTIONS","__PRIVATE_dirs","asc","desc","__PRIVATE_OPERATORS","__PRIVATE_ops","<","<=",">",">=","==","!=","array-contains","in","not-in","array-contains-any","__PRIVATE_JsonProtoSerializer","__PRIVATE_useProto3Json","__PRIVATE_toInteger","__PRIVATE_toDouble","serializer","Infinity","__PRIVATE_toNumber","__PRIVATE_toTimestamp","toISOString","__PRIVATE_toBytes","toVersion","version","fromVersion","__PRIVATE_fromTimestamp","__PRIVATE_toResourceName","__PRIVATE_fullyQualifiedPrefixPath","child","__PRIVATE_fromResourceName","__PRIVATE_resource","__PRIVATE_isValidResourceName","__PRIVATE_toName","__PRIVATE_extractLocalPathFromResourceName","__PRIVATE_toQueryPath","__PRIVATE_fromQueryPath","__PRIVATE_resourceName","__PRIVATE_emptyPath","__PRIVATE_getEncodedDatabaseId","__PRIVATE_toMutationDocument","proto","__PRIVATE_fromMaybeDocument","found","updateTime","__PRIVATE_ObjectValue","__PRIVATE_fromFound","missing","readTime","__PRIVATE_fromMissing","__PRIVATE_fromWatchChange","__PRIVATE_fromWatchTargetChangeState","targetChangeType","__PRIVATE_fromBytes","__PRIVATE_causeProto","status","__PRIVATE_fromRpcStatus","documentChange","__PRIVATE_entityChange","documentDelete","__PRIVATE_docDelete","documentRemove","__PRIVATE_docRemove","__PRIVATE_toMutation","__PRIVATE_mutation","__PRIVATE_SetMutation","update","__PRIVATE_DeleteMutation","__PRIVATE_PatchMutation","updateMask","__PRIVATE_toDocumentMask","__PRIVATE_fieldMask","__PRIVATE_TransformMutation","transform","fieldTransforms","__PRIVATE_fieldTransform","__PRIVATE_ServerTimestampTransform","fieldPath","setToServerValue","__PRIVATE_ArrayUnionTransformOperation","appendMissingElements","elements","__PRIVATE_ArrayRemoveTransformOperation","removeAllFromArray","__PRIVATE_NumericIncrementTransformOperation","increment","__PRIVATE_operand","__PRIVATE_toFieldTransform","__PRIVATE_VerifyMutation","verify","__PRIVATE_precondition","__PRIVATE_isNone","currentDocument","exists","__PRIVATE_toPrecondition","__PRIVATE_fromMutation","Precondition","__PRIVATE_none","__PRIVATE_fromPrecondition","paths","fieldPaths","__PRIVATE_FieldMask","__PRIVATE_fromServerFormat","__PRIVATE_fromDocumentMask","FieldTransform","__PRIVATE_fromFieldTransform","__PRIVATE_fromWriteResults","__PRIVATE_protos","commitTime","transformResults","__PRIVATE_MutationResult","__PRIVATE_fromWriteResult","__PRIVATE_toDocumentsTarget","__PRIVATE_toQueryTarget","structuredQuery","parent","from","allDescendants","__PRIVATE_popLast","__PRIVATE_lastSegment","where","unaryFilter","__PRIVATE_toFieldPathReference","fieldFilter","__PRIVATE_toOperatorName","__PRIVATE_toUnaryOrFieldFilter","compositeFilter","__PRIVATE_toFilter","__PRIVATE_orderBys","order","direction","__PRIVATE_toDirection","__PRIVATE_toPropertyOrder","__PRIVATE_toOrder","val","__PRIVATE_toInt32Proto","__PRIVATE_toCursor","__PRIVATE_fromQueryTarget","__PRIVATE_fromCount","__PRIVATE_filterBy","__PRIVATE_fromFilter","__PRIVATE_OrderBy","__PRIVATE_fromFieldPathReference","__PRIVATE_fromDirection","__PRIVATE_fromPropertyOrder","__PRIVATE_fromInt32Proto","__PRIVATE_fromCursor","__PRIVATE_queryToTarget","__PRIVATE_newQuery","__PRIVATE_toListenRequestLabels","__PRIVATE_toLabel","goog-listen-tags","__PRIVATE_fromUnaryFilter","__PRIVATE_fromFieldFilter","reduce","__PRIVATE_accum","concat","cursor","before","position","__PRIVATE_Bound","__PRIVATE_fieldReference","FieldFilter","create","__PRIVATE_fromOperatorName","__PRIVATE_nanField","NaN","__PRIVATE_nullField","nullValue","__PRIVATE_notNanField","__PRIVATE_notNullField","__PRIVATE_canonicalFields","__PRIVATE_TransformOperation","__PRIVATE_applyTransformOperationToLocalView","__type__","__local_write_time__","serverTimestamp","__PRIVATE_applyArrayUnionTransformOperation","__PRIVATE_applyArrayRemoveTransformOperation","__PRIVATE_baseValue","__PRIVATE_computeTransformOperationBaseValue","__PRIVATE_sum","asNumber","__PRIVATE_applyNumericIncrementTransformOperationToLocalView","__PRIVATE_applyTransformOperationToRemoteDocument","__PRIVATE_transformResult","__PRIVATE_isDouble","__PRIVATE_coercedFieldValuesArray","__PRIVATE_toUnion","some","element","__PRIVATE_toRemove","__PRIVATE_fieldMaskPath","__PRIVATE_isPrefixOf","__PRIVATE_l","r","__PRIVATE_fieldTransformEquals","__PRIVATE_transformOperationEquals","je","__PRIVATE_preconditionIsValidForDocument","__PRIVATE_maybeDoc","__PRIVATE_Mutation","__PRIVATE_applyMutationToRemoteDocument","__PRIVATE_mutationResult","hasCommittedMutations","__PRIVATE_applySetMutationToRemoteDocument","__PRIVATE_UnknownDocument","__PRIVATE_newData","__PRIVATE_patchDocument","__PRIVATE_applyPatchMutationToRemoteDocument","__PRIVATE_requireDocument","__PRIVATE_baseDoc","__PRIVATE_serverTransformResults","__PRIVATE_transformObject","__PRIVATE_applyTransformMutationToRemoteDocument","__PRIVATE_applyDeleteMutationToRemoteDocument","__PRIVATE_applyMutationToLocalView","__PRIVATE_getPostMutationVersion","Je","__PRIVATE_applySetMutationToLocalView","__PRIVATE_applyPatchMutationToLocalView","__PRIVATE_localTransformResults","__PRIVATE_applyTransformMutationToLocalView","__PRIVATE_applyDeleteMutationToLocalView","__PRIVATE_extractMutationBaseValue","__PRIVATE_baseObject","__PRIVATE_existingValue","__PRIVATE_coercedValue","__PRIVATE_ObjectValueBuilder","__PRIVATE_build","__PRIVATE_extractTransformMutationBaseValue","__PRIVATE_mutationEquals","empty","__PRIVATE_builder","newValue","__PRIVATE_patchObject","__PRIVATE_setOverlay","__PRIVATE_currentLevel","__PRIVATE_overlayMap","__PRIVATE_currentSegment","currentValue","__PRIVATE_mergedResult","__PRIVATE_applyOverlay","__PRIVATE_currentPath","__PRIVATE_currentOverlays","__PRIVATE_modified","__PRIVATE_resultAtPath","__PRIVATE_pathSegment","__PRIVATE_nested","__PRIVATE_extractFieldMask","__PRIVATE_nestedFields","__PRIVATE_nestedPath","__PRIVATE_MaybeDocument","__PRIVATE_objectValue","options","__PRIVATE_hasLocalMutations","__PRIVATE_QueryImpl","__PRIVATE_explicitOrderBy","__PRIVATE_limitType","__PRIVATE_newQueryForPath","__PRIVATE_hasLimitToFirst","__PRIVATE_hasLimitToLast","__PRIVATE_getFirstOrderByField","__PRIVATE_getInequalityFilterField","__PRIVATE_isInequality","__PRIVATE_isCollectionGroupQuery","__PRIVATE_queryOrderBy","__PRIVATE_queryImpl","__PRIVATE_memoizedOrderBy","__PRIVATE_inequalityField","__PRIVATE_firstOrderByField","__PRIVATE_isKeyField","__PRIVATE_keyField","__PRIVATE_foundKeyOrdering","__PRIVATE_lastDirection","__PRIVATE_memoizedTarget","__PRIVATE_queryWithLimit","__PRIVATE_queryWithStartAt","bound","__PRIVATE_queryWithEndAt","__PRIVATE_canonifyQuery","__PRIVATE_stringifyQuery","__PRIVATE_queryMatches","__PRIVATE_docPath","__PRIVATE_hasCollectionId","__PRIVATE_isImmediateParentOf","__PRIVATE_queryMatchesPathAndCollectionGroup","__PRIVATE_queryMatchesOrderBy","__PRIVATE_queryMatchesFilters","__PRIVATE_sortsBeforeDocument","__PRIVATE_queryMatchesBounds","__PRIVATE_newQueryComparator","__PRIVATE_comparedOnKeyField","__PRIVATE_compareDocs","__PRIVATE_createKeyFieldInFilter","__PRIVATE_KeyFieldFilter","__PRIVATE_ArrayContainsFilter","__PRIVATE_InFilter","__PRIVATE_NotInFilter","__PRIVATE_ArrayContainsAnyFilter","__PRIVATE_KeyFieldInFilter","__PRIVATE_KeyFieldNotInFilter","__PRIVATE_matchesComparison","__PRIVATE_extractDocumentKeysFromArrayValue","p","__PRIVATE_orderByComponent","component","v1","v2","__PRIVATE_compareDocumentsByField","__PRIVATE_Deferred","promise","Promise","resolve","reject","__PRIVATE_ExponentialBackoff","__PRIVATE_queue","__PRIVATE_timerId","__PRIVATE_initialDelayMs","__PRIVATE_backoffFactor","__PRIVATE_maxDelayMs","reset","__PRIVATE_currentBaseMs","cancel","__PRIVATE_desiredDelayWithJitterMs","__PRIVATE_jitterDelayMs","__PRIVATE_delaySoFarMs","max","__PRIVATE_lastAttemptTime","__PRIVATE_remainingDelayMs","__PRIVATE_timerPromise","__PRIVATE_enqueueAfterDelay","__PRIVATE_skipDelay","PersistencePromise","callback","__PRIVATE_isDone","__PRIVATE_nextCallback","__PRIVATE_catchCallback","__PRIVATE_nextFn","__PRIVATE_catchFn","__PRIVATE_callbackAttached","__PRIVATE_wrapFailure","__PRIVATE_wrapSuccess","__PRIVATE_wrapUserFunction","all","__PRIVATE_resolvedCount","done","err","__PRIVATE_predicates","predicate","__PRIVATE_isTrue","collection","__PRIVATE_promises","__PRIVATE_waitFor","__PRIVATE_SimpleDb","__PRIVATE_schemaConverter","__PRIVATE_getIOSVersion","getUA","__PRIVATE_wrapRequest","window","indexedDB","deleteDatabase","__PRIVATE_toPromise","__PRIVATE_isMockPersistence","__PRIVATE_ua","__PRIVATE_iOSVersion","__PRIVATE_isUnsupportedIOS","__PRIVATE_androidVersion","__PRIVATE_getAndroidVersion","__PRIVATE_isUnsupportedAndroid","process","env","__PRIVATE_USE_MOCK_PERSISTENCE","txn","store","__PRIVATE_iOSVersionRegex","match","__PRIVATE_androidVersionRegex","db","request","open","onsuccess","event","onblocked","__PRIVATE_IndexedDbTransactionError","onerror","onupgradeneeded","oldVersion","createOrUpgrade","__PRIVATE_versionchangelistener","onversionchange","__PRIVATE_versionChangeListener","mode","__PRIVATE_objectStores","__PRIVATE_transactionFn","__PRIVATE_readonly","__PRIVATE_attemptNumber","__PRIVATE_ensureDb","transaction","__PRIVATE_SimpleDbTransaction","__PRIVATE_transactionFnResult","catch","abort","__PRIVATE_completionPromise","__PRIVATE_retryable","close","__PRIVATE_IterationController","__PRIVATE_dbCursor","Sn","__PRIVATE_shouldStop","Jn","__PRIVATE_nextKey","__PRIVATE_actionName","__PRIVATE_isIndexedDbTransactionError","oncomplete","__PRIVATE_completionDeferred","onabort","__PRIVATE_checkForAndReportiOSError","objectStoreNames","Gn","aborted","__PRIVATE_storeName","objectStore","__PRIVATE_SimpleDbStore","__PRIVATE_keyOrValue","put","__PRIVATE_indexOrRange","results","__PRIVATE_iterateCursor","__PRIVATE_keysOnly","control","__PRIVATE_optionsOrCallback","__PRIVATE_cursorRequest","primaryKey","__PRIVATE_shouldContinue","continue","controller","__PRIVATE_userResult","__PRIVATE_userPromise","__PRIVATE_skipToKey","__PRIVATE_indexName","reverse","openKeyCursor","openCursor","__PRIVATE_reportedIOSError","__PRIVATE_IOS_ERROR","__PRIVATE_newError","setTimeout","__PRIVATE_getWindow","__PRIVATE_getDocument","__PRIVATE_DelayedOperation","__PRIVATE_asyncQueue","__PRIVATE_targetTimeMs","__PRIVATE_removalCallback","__PRIVATE_deferred","then","bind","__PRIVATE_delayMs","__PRIVATE_targetTime","__PRIVATE_delayedOp","__PRIVATE_timerHandle","__PRIVATE_handleDelayElapsed","reason","clearTimeout","__PRIVATE_enqueueAndForget","__PRIVATE_AsyncQueue","visibilityState","__PRIVATE_backoff","__PRIVATE_skipBackoff","addEventListener","__PRIVATE_visibilityHandler","ps","__PRIVATE__isShuttingDown","enqueue","__PRIVATE_verifyNotFailed","__PRIVATE_enqueueInternal","removeEventListener","__PRIVATE_retryableOps","__PRIVATE_retryNextOp","shift","__PRIVATE_backoffAndRun","__PRIVATE_newTail","__PRIVATE_tail","__PRIVATE_operationInProgress","stack","includes","__PRIVATE_getMessageOrStack","__PRIVATE_timerIdsToSkip","__PRIVATE_createAndSchedule","__PRIVATE_removedOp","__PRIVATE_removeDelayedOperation","__PRIVATE_delayedOperations","__PRIVATE_currentTail","__PRIVATE_lastTimerId","__PRIVATE_drain","a","b","__PRIVATE_wrapInUserErrorIfRecoverable","__PRIVATE_QueryListenersInfo","__PRIVATE_EventManagerImpl","q","Set","async","__PRIVATE_eventManagerListen","__PRIVATE_eventManager","listener","__PRIVATE_eventManagerImpl","__PRIVATE_firstListen","__PRIVATE_queryInfo","__PRIVATE_queries","__PRIVATE_viewSnap","__PRIVATE_onListen","__PRIVATE_firestoreError","onError","listeners","__PRIVATE_applyOnlineStateChange","onlineState","__PRIVATE_onViewSnapshot","__PRIVATE_raiseSnapshotsInSyncEvent","__PRIVATE_eventManagerUnlisten","__PRIVATE_lastListen","__PRIVATE_onUnlisten","__PRIVATE_eventManagerOnWatchChange","__PRIVATE_viewSnaps","__PRIVATE_raisedEvent","__PRIVATE_eventManagerOnWatchError","__PRIVATE_snapshotsInSyncListeners","observer","__PRIVATE_QueryListener","__PRIVATE_queryObserver","__PRIVATE_snap","includeMetadataChanges","__PRIVATE_raisedInitialEvent","__PRIVATE_shouldRaiseEvent","__PRIVATE_shouldRaiseInitialEvent","__PRIVATE_raiseInitialEvent","__PRIVATE_maybeOnline","__PRIVATE_waitForSyncWhenOnline","__PRIVATE_hasPendingWritesChanged","__PRIVATE_fromInitialDocuments","User","uid","__PRIVATE_isAuthenticated","__PRIVATE_otherUser","__PRIVATE_OAuthToken","user","__PRIVATE_authHeaders","__PRIVATE_EmptyCredentialsProvider","__PRIVATE_changeListener","__PRIVATE_FirebaseCredentialsProvider","__PRIVATE_authProvider","__PRIVATE_tokenListener","__PRIVATE_tokenCounter","currentUser","__PRIVATE_getUser","__PRIVATE_receivedInitialUser","auth","getImmediate","optional","addAuthTokenListener","__PRIVATE_initialTokenCounter","forceRefresh","getToken","__PRIVATE_tokenData","accessToken","removeAuthTokenListener","__PRIVATE_currentUid","getUid","__PRIVATE_FirstPartyToken","__PRIVATE_gapi","__PRIVATE_sessionIndex","__PRIVATE_FIRST_PARTY","si","headers","X-Goog-AuthUser","__PRIVATE_authHeader","__PRIVATE_FirstPartyCredentialsProvider","__PRIVATE_MutationBatch","batchId","baseMutations","mutations","__PRIVATE_docKey","__PRIVATE_batchResult","__PRIVATE_mutationResults","__PRIVATE_maybeDocs","__PRIVATE_mutatedDocuments","m","__PRIVATE_mutatedDocument","__PRIVATE_applyToLocalView","__PRIVATE_MutationBatchResult","batch","__PRIVATE_commitVersion","__PRIVATE_docVersions","__PRIVATE_versionMap","__PRIVATE_RemoteDocumentChangeBuffer","__PRIVATE__readTime","__PRIVATE_maybeDocument","__PRIVATE_assertNotApplied","__PRIVATE_documentKey","__PRIVATE_bufferedEntry","__PRIVATE_getFromCache","__PRIVATE_documentKeys","__PRIVATE_getAllFromCache","__PRIVATE_changesApplied","__PRIVATE_applyChanges","__PRIVATE_PRIMARY_LEASE_LOST_ERROR_MSG","__PRIVATE_PersistenceTransaction","__PRIVATE_onCommittedListeners","__PRIVATE_LocalDocumentsView","__PRIVATE_remoteDocumentCache","__PRIVATE_mutationQueue","__PRIVATE_indexManager","__PRIVATE_getAllMutationBatchesAffectingDocumentKey","__PRIVATE_batches","__PRIVATE_getDocumentInternal","__PRIVATE_inBatches","__PRIVATE_getEntry","__PRIVATE_localView","getEntries","__PRIVATE_getLocalViewOfDocuments","__PRIVATE_baseDocs","__PRIVATE_getAllMutationBatchesAffectingDocumentKeys","__PRIVATE_applyLocalMutationsToDocuments","__PRIVATE_sinceReadTime","__PRIVATE_isDocumentQuery","__PRIVATE_getDocumentsMatchingDocumentQuery","__PRIVATE_getDocumentsMatchingCollectionGroupQuery","__PRIVATE_getDocumentsMatchingCollectionQuery","__PRIVATE_getCollectionParents","__PRIVATE_parents","__PRIVATE_collectionQuery","__PRIVATE_asCollectionQueryAtPath","__PRIVATE_mutationBatches","__PRIVATE_getDocumentsMatchingQuery","__PRIVATE_queryResults","__PRIVATE_getAllMutationBatchesAffectingQuery","__PRIVATE_matchingMutationBatches","__PRIVATE_addMissingBaseDocuments","__PRIVATE_mergedDocuments","__PRIVATE_mutatedDoc","__PRIVATE_existingDocuments","__PRIVATE_missingBaseDocEntriesForPatching","__PRIVATE_missingBaseDocs","__PRIVATE_LocalViewChanges","__PRIVATE_addedKeys","__PRIVATE_removedKeys","__PRIVATE_viewSnapshot","__PRIVATE_ListenSequence","__PRIVATE_sequenceNumberSyncer","__PRIVATE_sequenceNumberHandler","__PRIVATE_setPreviousValue","__PRIVATE_writeNewSequenceNumber","__PRIVATE_writeSequenceNumber","__PRIVATE_externalPreviousValue","__PRIVATE_nextValue","__PRIVATE_bufferEntryComparator","__PRIVATE_aSequence","__PRIVATE_aIndex","__PRIVATE_bSequence","__PRIVATE_bIndex","__PRIVATE_seqCmp","__PRIVATE_RollingSequenceNumberBuffer","__PRIVATE_maxElements","__PRIVATE_previousIndex","__PRIVATE_entry","__PRIVATE_nextIndex","__PRIVATE_highestValue","last","maxValue","__PRIVATE_GC_DID_NOT_RUN","hr","lr","_r","dr","__PRIVATE_LruParams","__PRIVATE_cacheSizeCollectionThreshold","__PRIVATE_percentileToCollect","__PRIVATE_maximumSequenceNumbersToCollect","__PRIVATE_cacheSize","__PRIVATE_DEFAULT_COLLECTION_PERCENTILE","__PRIVATE_DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT","__PRIVATE_LruScheduler","__PRIVATE_garbageCollector","__PRIVATE_gcTask","__PRIVATE_localStore","params","__PRIVATE_scheduleGC","br","delay","__PRIVATE_hasRun","__PRIVATE_collectGarbage","__PRIVATE_ignoreIfPrimaryLeaseLoss","__PRIVATE_LruGarbageCollector","__PRIVATE_delegate","__PRIVATE_percentile","__PRIVATE_getSequenceNumberCount","targetCount","__PRIVATE_INVALID","__PRIVATE_addElement","__PRIVATE_forEachOrphanedDocumentSequenceNumber","upperBound","activeTargetIds","__PRIVATE_removeTargets","__PRIVATE_removeOrphanedDocuments","__PRIVATE_getCacheSize","__PRIVATE_runGarbageCollection","__PRIVATE_upperBoundSequenceNumber","__PRIVATE_sequenceNumbersToCollect","__PRIVATE_targetsRemoved","__PRIVATE_countedTargetsTs","__PRIVATE_foundUpperBoundTs","__PRIVATE_removedTargetsTs","__PRIVATE_removedDocumentsTs","__PRIVATE_startTs","__PRIVATE_calculateTargetCount","__PRIVATE_sequenceNumbers","__PRIVATE_nthSequenceNumber","__PRIVATE_numTargetsRemoved","__PRIVATE_documentsRemoved","__PRIVATE_encodeResourcePath","__PRIVATE_encodeSeparator","__PRIVATE_encodeSegment","__PRIVATE_resultBuf","__PRIVATE_escapeChar","__PRIVATE_decodeResourcePath","__PRIVATE_lastReasonableEscapeIndex","__PRIVATE_segmentBuilder","__PRIVATE_currentPiece","substring","LocalSerializer","__PRIVATE_remoteSerializer","__PRIVATE_fromDbRemoteDocument","__PRIVATE_localSerializer","__PRIVATE_remoteDoc","__PRIVATE_fromDocument","noDocument","__PRIVATE_fromSegments","__PRIVATE_fromDbTimestamp","unknownDocument","__PRIVATE_toDbRemoteDocument","__PRIVATE_dbReadTime","__PRIVATE_toDbTimestampKey","parentPath","__PRIVATE_toProto","__PRIVATE_toDocument","DbRemoteDocument","__PRIVATE_toDbTimestamp","DbNoDocument","DbUnknownDocument","__PRIVATE_fromDbTimestampKey","__PRIVATE_dbTimestampKey","DbTimestamp","__PRIVATE_dbTimestamp","__PRIVATE_fromDbMutationBatch","__PRIVATE_dbBatch","localWriteTimeMs","__PRIVATE_fromDbTarget","__PRIVATE_dbTarget","__PRIVATE_documentsTarget","lastListenSequenceNumber","__PRIVATE_toDbTarget","__PRIVATE_dbLastLimboFreeTimestamp","__PRIVATE_queryProto","DbTarget","__PRIVATE_IndexedDbMutationQueue","userId","__PRIVATE_referenceDelegate","IDBKeyRange","NEGATIVE_INFINITY","POSITIVE_INFINITY","__PRIVATE_mutationsStore","__PRIVATE_iterate","DbMutationBatch","userMutationsIndex","__PRIVATE_documentStore","__PRIVATE_documentMutationsStore","__PRIVATE_mutationStore","__PRIVATE_serializedBaseMutations","__PRIVATE_serializedMutations","__PRIVATE_toDbMutationBatch","__PRIVATE_collectionParents","__PRIVATE_indexKey","DbDocumentMutation","PLACEHOLDER","__PRIVATE_addToCollectionParentIndex","__PRIVATE_addOnCommittedListener","__PRIVATE_documentKeysByBatchId","__PRIVATE_lookupMutationBatch","__PRIVATE_nextBatchId","lowerBound","__PRIVATE_foundBatch","__PRIVATE_loadAll","__PRIVATE_dbBatches","__PRIVATE_indexPrefix","prefixForPath","__PRIVATE_indexStart","__PRIVATE_userID","__PRIVATE_encodedPath","__PRIVATE_uniqueBatchIDs","__PRIVATE_batchID","__PRIVATE_lookupMutationBatches","__PRIVATE_queryPath","__PRIVATE_immediateChildrenLength","__PRIVATE_batchIDs","__PRIVATE_removeMutationBatch","__PRIVATE_simpleDbTransaction","__PRIVATE_removeCachedMutationKeys","__PRIVATE_markPotentiallyOrphaned","__PRIVATE_checkEmpty","__PRIVATE_startRange","prefixForUser","__PRIVATE_danglingMutationReferences","__PRIVATE_mutationQueueContainsKey","__PRIVATE_mutationQueuesStore","metadata","DbMutationQueue","__PRIVATE_containsKey","ss","keyPath","__PRIVATE_indexTxn","only","__PRIVATE_numDeleted","__PRIVATE_removePromise","__PRIVATE_IndexedDbPersistence","__PRIVATE_getStore","__PRIVATE_IndexedDbRemoteDocumentCacheImpl","__PRIVATE_remoteDocumentsStore","__PRIVATE_dbKey","__PRIVATE_sizeDelta","getMetadata","byteSize","__PRIVATE_setMetadata","__PRIVATE_dbRemoteDoc","__PRIVATE_maybeDecodeDocument","ho","__PRIVATE_dbDocumentSize","__PRIVATE_forEachDbEntry","__PRIVATE_sizeMap","fo","do","__PRIVATE_keyIter","__PRIVATE_potentialKeyRaw","__PRIVATE_potentialKey","__PRIVATE_skip","__PRIVATE_immediateChildrenPathLength","__PRIVATE_iterationOptions","__PRIVATE_collectionKey","__PRIVATE_readTimeKey","collectionReadTimeIndex","__PRIVATE_IndexedDbRemoteDocumentChangeBuffer","__PRIVATE_trackRemovals","__PRIVATE_documentGlobalStore","DbRemoteDocumentGlobal","__PRIVATE_documentCache","__PRIVATE_previousSize","__PRIVATE_documentSizes","__PRIVATE_addEntry","__PRIVATE_deletedDoc","__PRIVATE_removeEntry","updateMetadata","__PRIVATE_getSizedEntry","__PRIVATE_getResult","__PRIVATE_getSizedEntries","__PRIVATE_maybeDocuments","__PRIVATE_MemoryIndexManager","__PRIVATE_MemoryCollectionParentIndex","collectionPath","__PRIVATE_collectionParentIndex","__PRIVATE_existingParents","__PRIVATE_added","SchemaConverter","createObjectStore","DbPrimaryClient","__PRIVATE_createPrimaryClientStore","autoIncrement","createIndex","userMutationsKeyPath","unique","__PRIVATE_createMutationQueue","__PRIVATE_createQueryCache","__PRIVATE_createRemoteDocumentCache","deleteObjectStore","DbTargetDocument","DbTargetGlobal","__PRIVATE_dropQueryCache","__PRIVATE_globalStore","__PRIVATE_writeEmptyTargetGlobalEntry","__PRIVATE_existingMutations","__PRIVATE_v3MutationsStore","__PRIVATE_writeAll","__PRIVATE_upgradeMutationBatchSchemaAndMigrateData","DbClientMetadata","__PRIVATE_createClientMetadataStore","removeAcknowledgedMutations","__PRIVATE_createDocumentGlobalStore","addDocumentGlobal","ensureSequenceNumbers","createCollectionParentIndex","contains","__PRIVATE_dropRemoteDocumentChangesStore","__PRIVATE_remoteDocumentStore","readTimeIndex","readTimeIndexPath","collectionReadTimeIndexPath","__PRIVATE_createRemoteDocumentReadTimeIndex","rewriteCanonicalIds","__PRIVATE_byteCount","__PRIVATE_queuesStore","__PRIVATE_queues","lastAcknowledgedBatchId","__PRIVATE_documentTargetStore","__PRIVATE_documentsStore","__PRIVATE_docSentinelKey","__PRIVATE_sentinelKey","__PRIVATE_maybeSentinel","__PRIVATE_writeSentinelKey","DbCollectionParent","__PRIVATE_collectionParentsStore","cache","__PRIVATE_pathSegments","__PRIVATE_targetStore","__PRIVATE_originalDbTarget","__PRIVATE_originalTargetData","__PRIVATE_updatedDbTarget","ownerId","allowTabSynchronization","leaseTimestampMs","lastStreamToken","highestTargetId","highestListenSequenceNumber","lastRemoteSnapshotVersion","documentTargetsIndex","documentTargetsKeyPath","queryTargetsIndexName","queryTargetsKeyPath","clientId","updateTimeMs","networkEnabled","inForeground","ALL_STORES","__PRIVATE_IndexedDbIndexManager","__PRIVATE_collectionParentsCache","__PRIVATE_collectionParent","__PRIVATE_parentPaths","__PRIVATE_TargetIdGenerator","__PRIVATE_lastId","__PRIVATE_IndexedDbTargetCache","__PRIVATE_retrieveMetadata","__PRIVATE_targetIdGenerator","__PRIVATE_saveMetadata","__PRIVATE_targetGlobal","__PRIVATE_saveTargetData","__PRIVATE_updateMetadataFromTargetData","__PRIVATE_removeMatchingKeysForTargetId","__PRIVATE_targetsStore","__PRIVATE_removeTargetData","__PRIVATE_globalTargetStore","updated","__PRIVATE_addReference","__PRIVATE_removeReference","__PRIVATE_PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG","__PRIVATE_IndexedDbTransaction","__PRIVATE_currentSequenceNumber","__PRIVATE_lruParams","__PRIVATE_forceOwningTab","__PRIVATE_isAvailable","__PRIVATE_IndexedDbLruDelegate","__PRIVATE_dbName","__PRIVATE_simpleDb","__PRIVATE_targetCache","__PRIVATE_newIndexedDbRemoteDocumentCache","localStorage","__PRIVATE_webStorage","__PRIVATE_updateClientMetadataAndTryBecomePrimary","isPrimary","__PRIVATE_attachVisibilityHandler","__PRIVATE_attachWindowUnloadHook","__PRIVATE_scheduleClientMetadataAndPrimaryLeaseRefreshes","runTransaction","__PRIVATE_getHighestSequenceNumber","__PRIVATE_listenSequence","__PRIVATE__started","__PRIVATE_primaryStateListener","__PRIVATE_primaryState","__PRIVATE_started","__PRIVATE_databaseDeletedListener","__PRIVATE_setVersionChangeListener","newVersion","__PRIVATE_clientMetadataStore","__PRIVATE_verifyPrimaryLease","__PRIVATE_success","__PRIVATE_enqueueRetryable","__PRIVATE_canActAsPrimary","__PRIVATE_releasePrimaryLeaseIfHeld","__PRIVATE_acquireOrExtendPrimaryLease","__PRIVATE_primaryClientStore","__PRIVATE_primaryClient","__PRIVATE_isLocalClient","__PRIVATE_isWithinAge","__PRIVATE_lastGarbageCollectionTime","__PRIVATE_inactiveClients","__PRIVATE_metadataStore","__PRIVATE_existingClients","active","__PRIVATE_filterActiveClients","__PRIVATE_inactive","__PRIVATE_client","__PRIVATE_inactiveClient","removeItem","__PRIVATE_zombiedClientLocalStorageKey","__PRIVATE_clientMetadataRefresher","__PRIVATE_maybeGarbageCollectMultiClientState","__PRIVATE_currentPrimary","__PRIVATE_isClientZombied","__PRIVATE_otherClient","__PRIVATE_otherClientHasBetterNetworkState","__PRIVATE_otherClientHasBetterVisibility","__PRIVATE_otherClientHasSameNetworkState","__PRIVATE_markClientZombied","__PRIVATE_detachVisibilityHandler","__PRIVATE_detachWindowUnloadHook","__PRIVATE_simpleDbTxn","__PRIVATE_persistenceTransaction","__PRIVATE_removeClientMetadata","__PRIVATE_removeClientZombiedEntry","__PRIVATE_clients","__PRIVATE_activityThresholdMs","__PRIVATE_clientMetadata","__PRIVATE_forUser","__PRIVATE_transactionOperation","__PRIVATE_simpleDbMode","__PRIVATE_holdsPrimaryLease","__PRIVATE_verifyAllowTabSynchronization","__PRIVATE_raiseOnCommittedEvent","__PRIVATE_newPrimary","__PRIVATE_maxAgeMs","__PRIVATE_documentVisibilityHandler","__PRIVATE_windowUnloadHandler","__PRIVATE_shutdown","__PRIVATE_isZombied","getItem","setItem","__PRIVATE_docCountPromise","__PRIVATE_orphanedDocumentCount","__PRIVATE_getTargetCache","__PRIVATE_getTargetCount","__PRIVATE_docCount","__PRIVATE_orphanedCount","__PRIVATE_forEachOrphanedDocument","__PRIVATE_iterateSerial","__PRIVATE_mutationQueuesContainKey","__PRIVATE_changeBuffer","__PRIVATE_getRemoteDocumentCache","__PRIVATE_newChangeBuffer","__PRIVATE_documentCount","__PRIVATE_isPinned","__PRIVATE_withSequenceNumber","__PRIVATE_updateTargetData","__PRIVATE_nextPath","__PRIVATE_nextToReport","__PRIVATE_getSize","__PRIVATE_sentinelRow","__PRIVATE_indexedDbStoragePrefix","__PRIVATE_isDefaultDatabase","__PRIVATE_LocalStoreImpl","persistence","__PRIVATE_queryEngine","__PRIVATE_initialUser","t","__PRIVATE_getMutationQueue","__PRIVATE_remoteDocuments","__PRIVATE_localDocuments","__PRIVATE_getIndexManager","__PRIVATE_setLocalDocumentsView","__PRIVATE_collect","__PRIVATE_targetDataByTarget","__PRIVATE_handleUserChange","__PRIVATE_localStoreImpl","__PRIVATE_newMutationQueue","__PRIVATE_newLocalDocuments","__PRIVATE_oldBatches","__PRIVATE_getAllMutationBatches","__PRIVATE_promisedOldBatches","__PRIVATE_newBatches","__PRIVATE_removedBatchIds","__PRIVATE_addedBatchIds","__PRIVATE_changedKeys","__PRIVATE_getDocuments","__PRIVATE_affectedDocuments","Wa","ja","Ga","__PRIVATE_acknowledgeBatch","__PRIVATE_affected","__PRIVATE_documentBuffer","Eo","__PRIVATE_docKeys","__PRIVATE_promiseChain","__PRIVATE_ackVersion","__PRIVATE_applyToRemoteDocument","__PRIVATE_applyWriteToRemoteDocuments","__PRIVATE_performConsistencyCheck","__PRIVATE_getLastRemoteSnapshotVersion","__PRIVATE_applyRemoteEventToLocalCache","__PRIVATE_remoteVersion","__PRIVATE_newTargetDataByTargetMap","__PRIVATE_oldTargetData","__PRIVATE_removeMatchingKeys","__PRIVATE_addMatchingKeys","__PRIVATE_newTargetData","__PRIVATE_withResumeToken","__PRIVATE_toMicroseconds","__PRIVATE_shouldPersistTargetData","__PRIVATE_changedDocs","__PRIVATE_updatedKeys","__PRIVATE_existingDocs","__PRIVATE_existingDoc","__PRIVATE_updateLimboDocument","__PRIVATE_updateRemoteVersion","__PRIVATE_setTargetsMetadata","__PRIVATE_nextMutationBatch","__PRIVATE_afterBatchId","__PRIVATE_getNextMutationBatchAfterBatchId","__PRIVATE_allocateTarget","__PRIVATE_getTargetData","__PRIVATE_cached","__PRIVATE_allocateTargetId","__PRIVATE_addTargetData","__PRIVATE_cachedTargetData","__PRIVATE_targetIdByTarget","__PRIVATE_releaseTarget","__PRIVATE_keepPersistedTargetData","__PRIVATE_executeQuery","__PRIVATE_usePreviousResults","__PRIVATE_remoteKeys","__PRIVATE_getLocalTargetData","__PRIVATE_getMatchingKeysForTargetId","za","__PRIVATE_getCachedTarget","__PRIVATE_targetCacheImpl","__PRIVATE_getNewDocumentChanges","__PRIVATE_remoteDocumentCacheImpl","__PRIVATE_lastReadTime","Ha","__PRIVATE_remoteDocumentCacheGetNewDocumentChanges","__PRIVATE_lastDocumentChangeReadTime","__PRIVATE_synchronizeLastDocumentChangeReadTime","__PRIVATE_remoteDocumentCacheGetLastReadTime","__PRIVATE_PersistentStream","__PRIVATE_connectionTimerId","__PRIVATE_idleTimerId","__PRIVATE_connection","__PRIVATE_credentialsProvider","__PRIVATE_performBackoff","__PRIVATE_isStarted","__PRIVATE_isOpen","__PRIVATE_idleTimer","__PRIVATE_handleIdleCloseTimer","__PRIVATE_cancelIdleCheck","stream","send","__PRIVATE_finalState","__PRIVATE_closeCount","__PRIVATE_resetToMax","__PRIVATE_invalidateToken","__PRIVATE_tearDown","__PRIVATE_onClose","__PRIVATE_dispatchIfNotClosed","__PRIVATE_getCloseGuardedDispatcher","token","__PRIVATE_startStream","__PRIVATE_rpcError","__PRIVATE_handleStreamClose","__PRIVATE_startRpc","__PRIVATE_onOpen","onMessage","__PRIVATE_startCloseCount","__PRIVATE_PersistentListenStream","credentials","__PRIVATE_openStream","__PRIVATE_watchChangeProto","snapshot","__PRIVATE_versionFromListenResponse","__PRIVATE_onWatchChange","addTarget","__PRIVATE_toTarget","labels","__PRIVATE_sendRequest","__PRIVATE_PersistentWriteStream","Rc","__PRIVATE_handshakeComplete_","__PRIVATE_writeMutations","__PRIVATE_responseProto","streamToken","writeResults","__PRIVATE_onMutationResult","__PRIVATE_onHandshakeComplete","writes","__PRIVATE_DatastoreImpl","__PRIVATE_terminated","__PRIVATE_rpcName","__PRIVATE_verifyInitialized","__PRIVATE_invokeRPC","__PRIVATE_invokeStreamingRPC","__PRIVATE_OnlineStateTracker","__PRIVATE_onlineStateHandler","__PRIVATE_watchStreamFailures","__PRIVATE_setAndBroadcast","__PRIVATE_onlineStateTimer","__PRIVATE_logClientOfflineWarningIfNecessary","__PRIVATE_clearOnlineStateTimer","__PRIVATE_newState","__PRIVATE_shouldWarnClientIsOffline","details","__PRIVATE_RemoteStoreImpl","__PRIVATE_datastore","__PRIVATE_connectivityMonitor","__PRIVATE_addCallback","__PRIVATE_canUseNetwork","__PRIVATE_remoteStore","__PRIVATE_remoteStoreImpl","__PRIVATE_offlineCauses","__PRIVATE_disableNetworkInternal","__PRIVATE_onlineStateTracker","__PRIVATE_enableNetworkInternal","__PRIVATE_restartNetwork","__PRIVATE_networkStatusHandler","__PRIVATE_onNetworkStatusChange","__PRIVATE_remoteStoreListen","__PRIVATE_listenTargets","__PRIVATE_shouldStartWatchStream","__PRIVATE_startWatchStream","__PRIVATE_ensureWatchStream","__PRIVATE_sendWatchRequest","__PRIVATE_remoteStoreUnlisten","__PRIVATE_watchStream","__PRIVATE_sendUnwatchRequest","__PRIVATE_markIdle","__PRIVATE_watchChangeAggregator","__PRIVATE_watch","__PRIVATE_unwatch","qe","__PRIVATE_remoteSyncer","Ue","__PRIVATE_handleWatchStreamStart","__PRIVATE_cleanUpWatchStreamState","__PRIVATE_onWatchStreamOpen","__PRIVATE_onWatchStreamClose","__PRIVATE_handleWatchStreamFailure","__PRIVATE_onWatchStreamChange","__PRIVATE_rejectListen","__PRIVATE_handleTargetError","__PRIVATE_disableNetworkUntilRecovery","__PRIVATE_handleDocumentChange","__PRIVATE_handleExistenceFilter","__PRIVATE_handleTargetChange","__PRIVATE_createRemoteEvent","__PRIVATE_requestTargetData","__PRIVATE_applyRemoteEvent","__PRIVATE_raiseWatchSnapshot","__PRIVATE_executeWithRecovery","__PRIVATE_fillWritePipeline","__PRIVATE_writeStream","__PRIVATE_ensureWriteStream","__PRIVATE_lastBatchIdRetrieved","__PRIVATE_writePipeline","__PRIVATE_canAddToWritePipeline","__PRIVATE_addToWritePipeline","__PRIVATE_shouldStartWriteStream","__PRIVATE_startWriteStream","__PRIVATE_handshakeComplete","__PRIVATE_onWriteStreamOpen","__PRIVATE_writeHandshake","__PRIVATE_onWriteHandshakeComplete","__PRIVATE_applySuccessfulWrite","__PRIVATE_onWriteStreamClose","__PRIVATE_inhibitBackoff","__PRIVATE_rejectFailedWrite","__PRIVATE_handleWriteError","__PRIVATE_remoteStoreApplyPrimaryState","__PRIVATE_datastoreImpl","__PRIVATE_newPersistentWatchStream","wc","hc","Tc","enabled","stop","__PRIVATE_newPersistentWriteStream","yc","gc","__PRIVATE_ReferenceSet","__PRIVATE_DocReference","__PRIVATE_compareByKey","__PRIVATE_compareByTargetId","__PRIVATE_refsByKey","ref","__PRIVATE_refsByTarget","__PRIVATE_removeRef","__PRIVATE_emptyKey","__PRIVATE_startRef","__PRIVATE_endRef","__PRIVATE_forEachInRange","__PRIVATE_firstRef","__PRIVATE_firstAfterOrEqual","__PRIVATE_targetOrBatchId","createWebStorageClientStateKey","createWebStorageMutationBatchKey","__PRIVATE_mutationKey","createWebStorageQueryTargetMetadataKey","__PRIVATE_MutationMetadata","__PRIVATE_mutationBatch","parse","__PRIVATE_validData","__PRIVATE_batchMetadata","__PRIVATE_QueryTargetMetadata","__PRIVATE_RemoteClientState","__PRIVATE_clientState","Array","__PRIVATE_activeTargetIdsSet","__PRIVATE_SharedOnlineState","__PRIVATE_LocalClientState","__PRIVATE_WebStorageSharedClientState","__PRIVATE_localClientId","__PRIVATE_handleWebStorageEvent","__PRIVATE_escapedPersistenceKey","storage","__PRIVATE_localClientStorageKey","__PRIVATE_sequenceNumberKey","createWebStorageSequenceNumberKey","__PRIVATE_activeClients","__PRIVATE_clientStateKeyRe","__PRIVATE_mutationBatchKeyRe","__PRIVATE_queryTargetKeyRe","__PRIVATE_onlineStateKey","createWebStorageOnlineStateKey","__PRIVATE_storageListener","__PRIVATE_syncEngine","__PRIVATE_getActiveClients","__PRIVATE_storageItem","__PRIVATE_fromWebStorageEntry","__PRIVATE_persistClientState","__PRIVATE_onlineStateJSON","__PRIVATE_fromWebStorageOnlineState","__PRIVATE_handleOnlineStateEvent","__PRIVATE_earlyEvents","__PRIVATE_extractActiveQueryTargets","__PRIVATE_persistMutationState","__PRIVATE_removeMutationState","__PRIVATE_queryState","__PRIVATE_isActiveQueryTarget","__PRIVATE_localClientState","__PRIVATE_addQueryTarget","__PRIVATE_removeQueryTarget","__PRIVATE_persistQueryTargetState","__PRIVATE_addPendingMutation","__PRIVATE_persistOnlineState","__PRIVATE_storageEvent","storageArea","__PRIVATE_fromWebStorageClientStateKey","__PRIVATE_handleClientStateEvent","__PRIVATE_fromWebStorageClientState","__PRIVATE_mutationMetadata","__PRIVATE_fromWebStorageMutationMetadata","__PRIVATE_handleMutationBatchEvent","__PRIVATE_queryTargetMetadata","__PRIVATE_fromWebStorageQueryTargetMetadata","__PRIVATE_handleQueryTargetEvent","__PRIVATE_seqString","__PRIVATE_parsed","__PRIVATE_fromWebStorageSequenceNumber","qu","__PRIVATE_toWebStorageJSON","__PRIVATE_mutationState","__PRIVATE_targetKey","__PRIVATE_targetMetadata","__PRIVATE_applyBatchState","__PRIVATE_applyTargetState","__PRIVATE_updatedClients","__PRIVATE_existingTargets","__PRIVATE_newTargets","__PRIVATE_addedTargets","__PRIVATE_removedTargets","__PRIVATE_applyActiveTargetsChange","__PRIVATE_activeTargets","__PRIVATE_kev","__PRIVATE_unionWith","__PRIVATE_MemorySharedClientState","__PRIVATE_localState","__PRIVATE_AddedLimboDocument","__PRIVATE_RemovedLimboDocument","__PRIVATE_View","__PRIVATE__syncedDocuments","__PRIVATE_docComparator","__PRIVATE_documentSet","dh","__PRIVATE_previousChanges","__PRIVATE_changeSet","__PRIVATE_oldDocumentSet","__PRIVATE_newMutatedKeys","__PRIVATE_newDocumentSet","__PRIVATE_needsRefill","__PRIVATE_lastDocInLimit","__PRIVATE_firstDocInLimit","__PRIVATE_newMaybeDoc","__PRIVATE_oldDoc","__PRIVATE_oldDocHadPendingMutations","__PRIVATE_newDocHasPendingMutations","__PRIVATE_changeApplied","track","__PRIVATE_shouldWaitForSyncedDocument","fh","Eh","Ih","Qt","__PRIVATE_updateLimboDocuments","__PRIVATE_getChanges","__PRIVATE_c1","__PRIVATE_c2","__PRIVATE_compareChangeType","__PRIVATE_applyTargetChange","__PRIVATE_limboChanges","__PRIVATE_newSyncState","__PRIVATE_limboDocuments","__PRIVATE_syncState","Rh","__PRIVATE_oldLimboDocuments","__PRIVATE_shouldBeInLimbo","__PRIVATE_queryResult","__PRIVATE_computeDocChanges","__PRIVATE_QueryView","view","__PRIVATE_LimboResolution","__PRIVATE_SyncEngineImpl","__PRIVATE_sharedClientState","__PRIVATE_maxConcurrentLimboResolutions","__PRIVATE_forSyncEngine","Uh","__PRIVATE__isPrimaryClient","__PRIVATE_syncEngineListen","__PRIVATE_syncEngineImpl","__PRIVATE_ensureWatchCallbacks","__PRIVATE_queryView","__PRIVATE_queryViewsByQuery","__PRIVATE_addLocalQueryTarget","__PRIVATE_computeInitialSnapshot","__PRIVATE_initializeViewAndComputeSnapshot","__PRIVATE_isPrimaryClient","__PRIVATE_applyDocChanges","__PRIVATE_viewDocChanges","__PRIVATE_viewChange","__PRIVATE_updateTrackedLimbos","__PRIVATE_synthesizedTargetChange","__PRIVATE_queriesByTarget","__PRIVATE_syncEngineUnlisten","__PRIVATE_removeLocalQueryTarget","__PRIVATE_clearQueryState","__PRIVATE_removeAndCleanupTarget","__PRIVATE_syncEngineWrite","__PRIVATE_userCallback","__PRIVATE_ensureWriteCallbacks","__PRIVATE_addMutationBatch","__PRIVATE_applyToLocalDocumentSet","Ri","__PRIVATE_localWrite","__PRIVATE_newCallbacks","__PRIVATE_mutationUserCallbacks","__PRIVATE_toKey","__PRIVATE_addMutationCallback","__PRIVATE_emitNewSnapsAndNotifyLocalStore","__PRIVATE_limboResolution","__PRIVATE_activeLimboResolutionsByTarget","__PRIVATE_receivedDocument","source","__PRIVATE_newViewSnapshots","__PRIVATE_eventManagerOnOnlineStateChange","__PRIVATE_syncEngineListener","__PRIVATE_setOnlineState","__PRIVATE_updateQueryState","__PRIVATE_limboKey","__PRIVATE_activeLimboTargetsByKey","__PRIVATE_pumpEnqueuedLimboResolutions","__PRIVATE_mutationBatchResult","__PRIVATE_processUserCallback","__PRIVATE_triggerPendingWritesCallbacks","__PRIVATE_updateMutationState","__PRIVATE_affectedKeys","__PRIVATE_rejectBatch","__PRIVATE_registerPendingWritesCallback","__PRIVATE_highestBatchId","__PRIVATE_getHighestUnacknowledgedBatchId","__PRIVATE_callbacks","__PRIVATE_pendingWritesCallbacks","__PRIVATE_onWatchError","__PRIVATE_limboDocumentRefs","__PRIVATE_removeReferencesForId","__PRIVATE_removeLimboTarget","__PRIVATE_limboTargetId","__PRIVATE_limboChange","__PRIVATE_trackLimboChange","__PRIVATE_enqueuedLimboResolutions","__PRIVATE_limboTargetIdGenerator","__PRIVATE_newSnaps","__PRIVATE_docChangesInAllViews","__PRIVATE_queriesProcessed","__PRIVATE_fromSnapshot","__PRIVATE_viewChanges","__PRIVATE_updatedTargetData","__PRIVATE_withLastLimboFreeSnapshotVersion","__PRIVATE_notifyLocalViewChanges","__PRIVATE_syncEngineHandleCredentialChange","__PRIVATE_errorMessage","clear","__PRIVATE_rejectOutstandingPendingWritesCallbacks","__PRIVATE_keySet","__PRIVATE_syncedDocuments","__PRIVATE_synchronizeViewAndComputeSnapshot","__PRIVATE_synchronizeWithPersistedState","__PRIVATE_batchState","__PRIVATE_mutationQueueImpl","__PRIVATE_lookupMutationKeys","__PRIVATE_lookupMutationDocuments","__PRIVATE_removeCachedMutationBatchMetadata","__PRIVATE_applyPrimaryState","__PRIVATE_getAllActiveQueryTargets","__PRIVATE_activeQueries","__PRIVATE_synchronizeQueryViewsAndRaiseSnapshots","__PRIVATE_isLocalQueryTarget","__PRIVATE_removeAllReferences","__PRIVATE_resetLimboDocuments","__PRIVATE_transitionToPrimary","__PRIVATE_synthesizeTargetToQuery","__PRIVATE_synthesizedRemoteEvent","__PRIVATE_createSynthesizedRemoteEventForCurrentChange","__PRIVATE_removed","__PRIVATE_IndexFreeQueryEngine","__PRIVATE_localDocumentsView","__PRIVATE_matchesAllDocuments","__PRIVATE_executeFullCollectionScan","__PRIVATE_previousResults","__PRIVATE_applyQuery","__PRIVATE_updatedResults","__PRIVATE_sortedPreviousResults","__PRIVATE_limboFreeSnapshotVersion","__PRIVATE_docAtLimitEdge","__PRIVATE_MemoryMutationQueue","__PRIVATE_batchesByDocumentKey","__PRIVATE_findMutationBatch","__PRIVATE_rawIndex","__PRIVATE_indexOfBatchId","__PRIVATE_findMutationBatches","prefix","__PRIVATE_startPath","__PRIVATE_rowKeyPath","__PRIVATE_indexOfExistingBatchId","__PRIVATE_references","__PRIVATE_MemoryRemoteDocumentCacheImpl","__PRIVATE_sizer","__PRIVATE_currentSize","iterator","__PRIVATE_MemoryRemoteDocumentChangeBuffer","__PRIVATE_MemoryTargetCache","__PRIVATE_forTargetCache","__PRIVATE_highestSequenceNumber","__PRIVATE_removals","__PRIVATE_addReferences","__PRIVATE_removeReferences","__PRIVATE_matchingKeys","__PRIVATE_referencesForId","__PRIVATE_MemoryPersistence","__PRIVATE_referenceDelegateFactory","__PRIVATE_newMemoryRemoteDocumentCache","__PRIVATE_documentSize","__PRIVATE_mutationQueues","__PRIVATE_MemoryTransaction","__PRIVATE_onTransactionStarted","__PRIVATE_onTransactionCommitted","__PRIVATE_or","__PRIVATE_MemoryEagerDelegate","dl","__PRIVATE__orphanedDocuments","__PRIVATE_localViewReferences","__PRIVATE_orphanedDocuments","__PRIVATE_fromPath","__PRIVATE_isReferenced","__PRIVATE_StreamBridge","__PRIVATE_sendFn","__PRIVATE_closeFn","__PRIVATE_wrappedOnOpen","__PRIVATE_wrappedOnClose","__PRIVATE_wrappedOnMessage","__PRIVATE_RPC_NAME_URL_MAPPING","BatchGetDocuments","Commit","RunQuery","__PRIVATE_WebChannelConnection","__PRIVATE_databaseInfo","__PRIVATE_baseUrl","__PRIVATE_databaseRoot","__PRIVATE_req","url","__PRIVATE_makeUrl","__PRIVATE_modifyHeadersForRequest","__PRIVATE_performRPCRequest","response","__PRIVATE_header","__PRIVATE_urlRpcName","info","body","__PRIVATE_xhr","XhrIo","listenOnce","EventType","COMPLETE","getLastErrorCode","ErrorCode","NO_ERROR","json","getResponseJson","TIMEOUT","HTTP_ERROR","getStatus","getResponseText","__PRIVATE_responseError","__PRIVATE_firestoreErrorCode","__PRIVATE_serverError","toLowerCase","__PRIVATE_mapCodeFromHttpResponseErrorStatus","__PRIVATE_requestString","__PRIVATE_urlParts","__PRIVATE_webchannelTransport","createWebChannelTransport","httpSessionIdParam","initMessageHeaders","messageUrlParams","sendRawJson","supportsCrossDomainXhr","internalChannelParams","forwardChannelRequestTimeoutMs","detectBufferingProxy","isMobileCordova","isReactNative","isElectron","isIE","isUWP","isBrowserExtension","httpHeadersOverwriteParam","channel","createWebChannel","__PRIVATE_opened","closed","__PRIVATE_streamBridge","El","Tl","__PRIVATE_unguardedEventListen","listen","param","WebChannel","OPEN","CLOSE","__PRIVATE_callOnClose","MESSAGE","__PRIVATE_msgData","__PRIVATE_msgDataOrError","__PRIVATE_mapCodeFromRpcStatus","__PRIVATE_callOnMessage","__PRIVATE_callOnOpen","__PRIVATE_BrowserConnectivityMonitor","__PRIVATE_onNetworkAvailable","__PRIVATE_onNetworkUnavailable","__PRIVATE_configureNetworkMonitoring","__PRIVATE_networkAvailableListener","__PRIVATE_networkUnavailableListener","__PRIVATE_NoopConnectivityMonitor","__PRIVATE_newSerializer","__PRIVATE_MemoryOfflineComponentProvider","__PRIVATE_cfg","__PRIVATE_createSharedClientState","__PRIVATE_createPersistence","__PRIVATE_gcScheduler","__PRIVATE_createGarbageCollectionScheduler","__PRIVATE_createLocalStore","__PRIVATE_factory","__PRIVATE_IndexedDbOfflineComponentProvider","__PRIVATE_onlineComponentProvider","cacheSizeBytes","forceOwnership","initialize","__PRIVATE_withCacheSize","__PRIVATE_DEFAULT","synchronizeTabs","__PRIVATE_MultiTabOfflineComponentProvider","sh","ih","rh","va","__PRIVATE_setPrimaryStateListener","__PRIVATE_OnlineComponentProvider","__PRIVATE_offlineComponentProvider","__PRIVATE_createDatastore","__PRIVATE_createRemoteStore","__PRIVATE_createEventManager","__PRIVATE_createSyncEngine","__PRIVATE_handleCredentialChange","__PRIVATE_newDatastore","__PRIVATE_startAsPrimary","__PRIVATE_newSyncEngine","__PRIVATE_remoteStoreShutdown","__PRIVATE_AsyncObserver","__PRIVATE_scheduleEvent","console","muted","eventHandler","__PRIVATE_validateNonEmptyArgument","functionName","__PRIVATE_argumentName","__PRIVATE_argument","__PRIVATE_validateSetOptions","methodName","merge","mergeFields","__PRIVATE_validateIsNotUsedTogether","__PRIVATE_optionName1","__PRIVATE_argument1","__PRIVATE_optionName2","__PRIVATE_argument2","__PRIVATE_valueDescription","input","__PRIVATE_customObjectName","__PRIVATE_tryGetCustomObjectType","__PRIVATE_validatePositiveNumber","__PRIVATE__BaseFieldPath","fieldNames","__PRIVATE__internalPath","__PRIVATE_InternalFieldPath","__PRIVATE_RESERVED","FieldValue","__PRIVATE__methodName","__PRIVATE_DeleteFieldValueImpl","context","__PRIVATE_dataSource","__PRIVATE_createError","__PRIVATE_createSentinelChildContext","__PRIVATE_fieldValue","__PRIVATE_arrayElement","__PRIVATE_ParseContext","Zl","e_","settings","__PRIVATE_targetDoc","n_","ignoreUndefinedProperties","__PRIVATE_ServerTimestampFieldValueImpl","__PRIVATE_ArrayUnionFieldValueImpl","__PRIVATE__elements","__PRIVATE_parseContext","__PRIVATE_parsedElements","__PRIVATE_parseData","arrayUnion","__PRIVATE_ArrayRemoveFieldValueImpl","__PRIVATE_NumericIncrementFieldValueImpl","__PRIVATE__operand","__PRIVATE_numericIncrement","GeoPoint","isFinite","__PRIVATE__lat","__PRIVATE__long","__PRIVATE_Compat","__PRIVATE__delegate","__PRIVATE_RESERVED_FIELD_REGEX","__PRIVATE__DocumentKeyReference","__PRIVATE__databaseId","__PRIVATE__key","__PRIVATE__converter","__PRIVATE_ParsedSetData","__PRIVATE_ParsedUpdateData","__PRIVATE_isWrite","__PRIVATE_validatePath","configuration","__PRIVATE_childPath","__PRIVATE_contextWith","__PRIVATE_validatePathSegment","__PRIVATE_hasConverter","__PRIVATE_UserDataReader","I_","__PRIVATE_parseSetData","__PRIVATE_userDataReader","__PRIVATE_createContext","__PRIVATE_validatePlainObject","__PRIVATE_updateData","__PRIVATE_parseObject","__PRIVATE_validatedFieldPaths","__PRIVATE_stringOrFieldPath","__PRIVATE_fieldPathFromDotSeparatedString","__PRIVATE_fieldMaskContains","__PRIVATE_covers","__PRIVATE_parseUpdateData","__PRIVATE_fieldMaskPaths","__PRIVATE_childContext","__PRIVATE_childContextForFieldPath","__PRIVATE_parsedValue","mask","__PRIVATE_parseUpdateVarargs","moreFieldsAndValues","__PRIVATE_fieldPathFromArgument","__PRIVATE_parseQueryValue","__PRIVATE_allowArrays","__PRIVATE_looksLikeJsonObject","__PRIVATE__toFieldTransform","__PRIVATE_parseSentinelFieldValue","__PRIVATE_entryIndex","__PRIVATE_parsedEntry","__PRIVATE_childContextForArray","__PRIVATE_parseArray","fromDate","bytesValue","__PRIVATE_thisDb","__PRIVATE_otherDb","__PRIVATE_parseScalarValue","__PRIVATE_childContextForField","getPrototypeOf","__PRIVATE_isPlainObject","description","search","__PRIVATE_fromDotSeparatedString","__PRIVATE_hasPath","__PRIVATE_hasDocument","Transaction","__PRIVATE_ensureCommitNotCalled","__PRIVATE_invokeBatchGetDocumentsRpc","__PRIVATE_recordVersion","write","__PRIVATE_toMutations","__PRIVATE_writtenDocs","__PRIVATE_preconditionForUpdate","__PRIVATE_lastWriteError","__PRIVATE_unwritten","__PRIVATE_readVersions","__PRIVATE_invokeCommitRpc","__PRIVATE_committed","__PRIVATE_docVersion","__PRIVATE_existingVersion","__PRIVATE_TransactionRunner","updateFunction","__PRIVATE_runWithBackOff","__PRIVATE_tryRunUpdateFunction","commit","__PRIVATE_commitError","__PRIVATE_handleTransactionError","__PRIVATE_userPromiseError","__PRIVATE_retries","__PRIVATE_isRetryableTransactionError","__PRIVATE_FirestoreClient","__PRIVATE_newId","__PRIVATE_setChangeListener","__PRIVATE_credentialListener","cs","yl","ql","Dh","__PRIVATE_isShuttingDown","__PRIVATE_enterRestrictedMode","__PRIVATE_enqueueAndForgetEvenWhileRestricted","__PRIVATE_onlineComponents","terminate","__PRIVATE_offlineComponents","__PRIVATE_removeChangeListener","__PRIVATE_setOfflineComponentProvider","__PRIVATE_verifyOperationInProgress","getConfiguration","__PRIVATE_setCredentialChangeListener","__PRIVATE_setDatabaseDeletedListener","__PRIVATE_setOnlineComponentProvider","__PRIVATE_ensureOfflineComponents","__PRIVATE_usesNetwork","__PRIVATE_remoteStoreHandleCredentialChange","__PRIVATE_ensureOnlineComponents","__PRIVATE_getPersistence","__PRIVATE_getLocalStore","__PRIVATE_getRemoteStore","__PRIVATE_getSyncEngine","__PRIVATE_getEventManager","__PRIVATE_firestoreClientEnableNetwork","__PRIVATE_setNetworkEnabled","__PRIVATE_remoteStoreEnableNetwork","__PRIVATE_firestoreClientDisableNetwork","__PRIVATE_remoteStoreDisableNetwork","__PRIVATE_firestoreClientListen","__PRIVATE_wrappedObserver","__PRIVATE_mute","__PRIVATE_firestoreClientGetDocumentFromLocalCache","__PRIVATE_readLocalDocument","__PRIVATE_readDocumentFromCache","__PRIVATE_firestoreClientGetDocumentViaSnapshotListener","Xs","__PRIVATE_readDocumentViaSnapshotListener","__PRIVATE_firestoreClientGetDocumentsFromLocalCache","__PRIVATE_executeQueryFromCache","__PRIVATE_firestoreClientGetDocumentsViaSnapshotListener","__PRIVATE_executeQueryViaSnapshotListener","__PRIVATE_firestoreClientWrite","__PRIVATE_firestoreClientAddSnapshotsInSyncListener","__PRIVATE_addSnapshotsInSyncListener","__PRIVATE_removeSnapshotsInSyncListener","__PRIVATE_firestoreClientTransaction","__PRIVATE_getDatastore","run","__PRIVATE_isPartialObserver","__PRIVATE_methods","object","method","__PRIVATE_implementsAnyMethods","__PRIVATE_UserDataWriter","__PRIVATE_serverTimestampBehavior","__PRIVATE_referenceFactory","__PRIVATE_bytesFactory","__PRIVATE_convertTimestamp","__PRIVATE_convertServerTimestamp","__PRIVATE_convertReference","__PRIVATE_convertGeoPoint","__PRIVATE_convertArray","__PRIVATE_convertObject","__PRIVATE_convertValue","__PRIVATE_normalizedValue","__PRIVATE_resourcePath","__PRIVATE_FirestoreSettings","experimentalForceLongPolling","experimentalAutoDetectLongPolling","enableMultiTabIndexedDbPersistence","firestore","__PRIVATE_verifyNotInitialized","__PRIVATE_ensureFirestoreConfigured","__PRIVATE__getSettings","__PRIVATE_setPersistenceProviders","__PRIVATE_persistenceResult","DOMException","__PRIVATE_canFallbackFromIndexedDbError","clearIndexedDbPersistence","__PRIVATE__initialized","__PRIVATE__terminated","__PRIVATE__queue","__PRIVATE_indexedDbClearPersistence","__PRIVATE__persistenceKey","__PRIVATE_MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE","__PRIVATE_MemoryPersistenceProvider","__PRIVATE_IndexedDbPersistenceProvider","persistenceSettings","enableIndexedDbPersistence","Firestore","__PRIVATE_databaseIdOrApp","__PRIVATE__persistenceProvider","__PRIVATE__firestoreClient","__PRIVATE_configureFirestore","app","__PRIVATE__firebaseApp","__PRIVATE_databaseIdFromApp","__PRIVATE__credentials","external","__PRIVATE__settings","Y_","J_","af","__PRIVATE__userDataReader","__PRIVATE_settingsLiteral","__PRIVATE_newSettings","__PRIVATE_makeCredentialsProvider","port","experimentalForceOwningTab","_removeServiceInstance","__PRIVATE_firestoreClientWaitForPendingWrites","arg","__PRIVATE_pathString","CollectionReference","DocumentReference","__PRIVATE_forPath","Query","__PRIVATE_newQueryForCollectionGroup","WriteBatch","__PRIVATE_verifyNotTerminated","__PRIVATE_makeDatabaseInfo","__PRIVATE__firestore","__PRIVATE__transaction","documentRef","__PRIVATE_validateReference","__PRIVATE_lookup","DocumentSnapshot","__PRIVATE_convertedValue","__PRIVATE_applyFirestoreDataConverter","__PRIVATE__dataReader","__PRIVATE_fieldOrUpdateData","__PRIVATE_ExternalFieldPath","__PRIVATE_verifyNotCommitted","__PRIVATE__mutations","__PRIVATE__committed","converter","__PRIVATE_currArg","__PRIVATE_internalOptions","__PRIVATE_userObserver","complete","__PRIVATE__convertToDocSnapshot","SnapshotMetadata","__PRIVATE__document","__PRIVATE__fromCache","__PRIVATE__hasPendingWrites","QueryDocumentSnapshot","fromFirestore","serverTimestamps","__PRIVATE_newQueryFilter","__PRIVATE_dataReader","__PRIVATE_validateDisjunctiveFilterElements","__PRIVATE_referenceList","__PRIVATE_parseDocumentIdValue","__PRIVATE_existingField","__PRIVATE_validateOrderByAndInequalityMatch","__PRIVATE_conflictingOp","__PRIVATE_operators","__PRIVATE_findFilterOperator","__PRIVATE_conflictingOps","__PRIVATE_validateNewFilter","__PRIVATE_newQueryOrderBy","__PRIVATE_validateNewOrderBy","__PRIVATE_documentIdValue","operator","__PRIVATE_baseQuery","__PRIVATE_inequality","__PRIVATE_validateHasExplicitOrderByForLimitToLast","__PRIVATE__query","opStr","__PRIVATE_newFilters","__PRIVATE_queryWithAddedFilter","directionStr","__PRIVATE_newOrderBy","__PRIVATE_queryWithAddedOrderBy","__PRIVATE_docOrField","__PRIVATE_boundFromDocOrFields","components","__PRIVATE_newQueryBoundFromDocument","__PRIVATE_allFields","__PRIVATE_rawValue","__PRIVATE_wrapped","__PRIVATE_newQueryBoundFromFields","QuerySnapshot","__PRIVATE__originalQuery","__PRIVATE__snapshot","thisArg","__PRIVATE_convertToDocumentImpl","__PRIVATE__cachedChanges","__PRIVATE__cachedChangesIncludeMetadataChanges","__PRIVATE_lastDoc","oldIndex","newIndex","__PRIVATE_indexTracker","__PRIVATE_resultChangeType","__PRIVATE_changesFromSnapshot","__PRIVATE__path","arguments","toFirestore","__PRIVATE_docRef","reference","__PRIVATE_cast","arrayRemove","__PRIVATE_firestoreNamespace","level","setLogLevel","CACHE_SIZE_UNLIMITED","__PRIVATE_registerFirestore","instance","firebase","__PRIVATE_firestoreFactory","registerComponent","Component","container","getProvider","setServiceProps","__PRIVATE_configureForFirebase","registerVersion"],"mappings":"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"}